/********************************************************
 * 
 *  This file was GENERATED by the Intel Software 
 *  Development Environment based on the Virtual 
 *  Pipelines definition for the chip "AXC6732", 
 *  
 *  Please DO NOT MODIFY this file; instead, modify the 
 *  original configuration and re-run the generation.
 *
 ********************************************************/ 

#ifndef _IP_OVER_ETHERNET_H_   
#define _IP_OVER_ETHERNET_H_

#include <common.h>
#include "uboot/ncp_sal_types_linux.h"
#include "uboot/ncp_task_basetypes.h"
#include "uboot/ncp_types.h"
#include "uboot/ncp_vpm.h"
#include "uboot/ncp_task.h"


/*********************************************
**** NCA TaskReceive Queue macros.
*********************************************/




/********************************************************************
**   NAMESPACES
********************************************************************/
#define NCP_NS_L2Headers                     "L2Headers"
#define NCP_NS_BASEID_L2Headers                 0x000000
#define NCP_NS_NUM_ENTRIES_L2Headers            0x001000
#define NCP_NS_SECounters                    "SECounters"
#define NCP_NS_BASEID_SECounters                0x000000
#define NCP_NS_NUM_ENTRIES_SECounters           0x001000
#define NCP_NS_ENTRY_SIZE_SECounters            256      

/**********************************************************
 **** Code generated for the NCA Backpressure destinations
 ***********************************************************/
 
 /******************************************************************************
 *  ncp_st_t ncp_nca_bp_dest_val_get(ncp_hdl_t ncpHdl, ncp_uint8_t destBit, 
 *                                   ncp_bool_t *destVal);
 *  For a given dest bit, this function returns the NCA backpressure state.
 *  ncpHdl:  NCP handle.
 *  destBit: The bp dest bit that needs to be queried. 
 *           Valid values: 0-11 (rev 1.0), 0-31 (rev 1.1)
 *  destVal: TRUE - if bp state is on for the given bit.
 *           FALSE - if bp state is off for the given bit.
 ******************************************************************************/
 

/**********************************************************
 **** Code generated for the UEIOA Policer Backpressure destinations
 ***********************************************************/


/**********************************************************
 **** Code generated for the MTM Backpressure destinations
 ***********************************************************/

    
    
/********************************************************************
** VIRTUAL PIPELINE:   EIOAtoCPU
***                    EIOA->CPU
********************************************************************/    

ncp_st_t ncp_vp_handle_get_eioa_EIOAtoCPU(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_EIOA_EIOAtoCPU                      0x00052ec5481f1986ll
#define NCP_VP_NAME_EIOA_EIOAtoCPU                        "EIOAtoCPU"
#define NCP_VP_ID_EIOA_EIOAtoCPU                          0


/* Structure definition for RECEIVING TASKS (CPU Input parameters) */
typedef struct {
    ncp_uint8_t  split0;
    ncp_uint8_t  reserved_pad[30];
    ncp_uint8_t  pduPad;
} ncp_vp_receive_EIOAtoCPU_t;

    
    
/********************************************************************
** VIRTUAL PIPELINE:   Egress_Fixed_EIOA
***                    EIOA(0)->EIOA(1)
********************************************************************/    

ncp_st_t ncp_vp_handle_get_eioa_Egress_Fixed_EIOA(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_EIOA_Egress_Fixed_EIOA              0x0000000a81271af5ll
#define NCP_VP_NAME_EIOA_Egress_Fixed_EIOA                "Egress_Fixed_EIOA"
#define NCP_VP_ID_EIOA_Egress_Fixed_EIOA                  1


    
    
/********************************************************************
** VIRTUAL PIPELINE:   FixedEioaToERIF
***                    EIOA->ERIF
********************************************************************/    

ncp_st_t ncp_vp_handle_get_eioa_FixedEioaToERIF(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_EIOA_FixedEioaToERIF                0xfffffff19a97b6d1ll
#define NCP_VP_NAME_EIOA_FixedEioaToERIF                  "FixedEioaToERIF"
#define NCP_VP_ID_EIOA_FixedEioaToERIF                    3


    
    
/********************************************************************
** VIRTUAL PIPELINE:   IPv4Forwarding
***                    EIOA->MPP
********************************************************************/    

ncp_st_t ncp_vp_handle_get_eioa_IPv4Forwarding(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_EIOA_IPv4Forwarding                 0x0000000a7b58997ell
#define NCP_VP_NAME_EIOA_IPv4Forwarding                   "IPv4Forwarding"
#define NCP_VP_ID_EIOA_IPv4Forwarding                     7


    
    
/********************************************************************
** VIRTUAL PIPELINE:   MulticastReplicator
***                    EIOA(0)->EIOA(1)
********************************************************************/    

ncp_st_t ncp_vp_handle_get_eioa_MulticastReplicator(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_EIOA_MulticastReplicator            0xfffffff5c4384349ll
#define NCP_VP_NAME_EIOA_MulticastReplicator              "MulticastReplicator"
#define NCP_VP_ID_EIOA_MulticastReplicator                2


    
    
/********************************************************************
** VIRTUAL PIPELINE:   EgressToEIOA
***                    MPP->SED->PIC->EIOA
********************************************************************/    

ncp_st_t ncp_vp_handle_get_mpp_EgressToEIOA(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_MPP_EgressToEIOA                    0x0000000872649e5all
#define NCP_VP_NAME_MPP_EgressToEIOA                      "EgressToEIOA"
#define NCP_VP_ID_MPP_EgressToEIOA                        1

#define NCP_VP_NUM_FLOWS_MPP_EgressToEIOA                   0

/* Structure(s) for the flow data: */
/* Skipped structure 'ncp_vp_flow_mpp_EgressToEIOA_t' because it is empty */

    
    
/********************************************************************
** VIRTUAL PIPELINE:   CPUtoEIOA
***                    CPU->EIOA
********************************************************************/    

ncp_st_t ncp_vp_handle_get_cpu_CPUtoEIOA(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_CPU_CPUtoEIOA                       0xfffac32613417908ll
#define NCP_VP_NAME_CPU_CPUtoEIOA                         "CPUtoEIOA"
#define NCP_VP_ID_CPU_CPUtoEIOA                           1

#define NCP_VP_NUM_FLOWS_CPU_CPUtoEIOA                      0

/* Structure(s) for the flow data: */
/* Skipped structure 'ncp_vp_flow_cpu_CPUtoEIOA_t' because it is empty */

/* Structure definition for SENDING TASKS, single instance per Virtual Pipeline */
typedef struct {
    ncp_uint8_t  split0;
    ncp_uint8_t  reserved_pad[3];
} ncp_vp_send_CPUtoEIOA_t;

    
    
/********************************************************************
** VIRTUAL PIPELINE:   FixedERIFToEIOAEgress
***                    ERIF->EIOA
********************************************************************/    

ncp_st_t ncp_vp_handle_get_erif_FixedERIFToEIOAEgress(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_ERIF_FixedERIFToEIOAEgress          0x0000000952439c3cll
#define NCP_VP_NAME_ERIF_FixedERIFToEIOAEgress            "FixedERIFToEIOAEgress"
#define NCP_VP_ID_ERIF_FixedERIFToEIOAEgress              0


    
    
/********************************************************************
** VIRTUAL PIPELINE:   FixedERIFToEIOAMulticast
***                    ERIF->EIOA
********************************************************************/    

ncp_st_t ncp_vp_handle_get_erif_FixedERIFToEIOAMulticast(ncp_hdl_t ncpHdl, ncp_vp_hdl_t *vpHdl);

#define NCP_VP_COOKIE_ERIF_FixedERIFToEIOAMulticast       0xffffffff805e1857ll
#define NCP_VP_NAME_ERIF_FixedERIFToEIOAMulticast         "FixedERIFToEIOAMulticast"
#define NCP_VP_ID_ERIF_FixedERIFToEIOAMulticast           1



/* C-NP Script Ids */
/* MPP State Engine Script Ids */

/* SED Script Ids */
#define ncp_sed_sedScript0                                        0x00
#define ncp_sed_sedScript1                                        0x01

/* TM Script Ids */

/* TS Script Ids */

/*****************************************
 * EIOA Switch specific macros
 *****************************************/

/* Mask all bridging vps */
#define NCP_EIOA_BRIDGING_VP_GLOBAL_MASK (0x3FFFFFFFFFULL)

/* Bit Masks and values for user-defined Bridging VPS */

/* Port (MacChannel) to Bit id */
#define NCP_EIOA_BRIDGING_PORT_VP_BIT_ID(macChan)    \
({                                                   \
    ncp_uint32_t __vpBitId = 63;                     \
    switch (macChan)                                 \
    {                                                \
        case  NCP_GMAC20:                            \
             __vpBitId =  9;                         \
            break;                                   \
        case  NCP_GMAC64:                            \
             __vpBitId = 14;                         \
            break;                                   \
        case  NCP_GMAC65:                            \
             __vpBitId = 15;                         \
            break;                                   \
        case  NCP_GMAC80:                            \
             __vpBitId = 16;                         \
            break;                                   \
        case  NCP_GMAC81:                            \
             __vpBitId = 17;                         \
            break;                                   \
        case  NCP_GMAC96:                            \
             __vpBitId = 18;                         \
            break;                                   \
        case  NCP_GMAC97:                            \
             __vpBitId = 19;                         \
            break;                                   \
        case NCP_GMAC112:                            \
             __vpBitId = 20;                         \
            break;                                   \
        case NCP_GMAC113:                            \
             __vpBitId = 21;                         \
            break;                                   \
        case        null:                            \
             __vpBitId = 22;                         \
            break;                                   \
        case        null:                            \
             __vpBitId = 23;                         \
            break;                                   \
    }                                                \
    __vpBitId;                                       \
})

/* Port (MacChannel) to Bit Map */
#define NCP_EIOA_BRIDGING_PORT_VP_BIT_MAP(macChan)     \
({                                                     \
    ncp_uint64_t __vpBitMap = (1ULL << 63);            \
    switch (macChan)                                   \
    {                                                  \
        case  NCP_GMAC20:                              \
            __vpBitMap = (0x00000200ULL);              \
            break;                                     \
        case  NCP_GMAC64:                              \
            __vpBitMap = (0x00004000ULL);              \
            break;                                     \
        case  NCP_GMAC65:                              \
            __vpBitMap = (0x00008000ULL);              \
            break;                                     \
        case  NCP_GMAC80:                              \
            __vpBitMap = (0x00010000ULL);              \
            break;                                     \
        case  NCP_GMAC81:                              \
            __vpBitMap = (0x00020000ULL);              \
            break;                                     \
        case  NCP_GMAC96:                              \
            __vpBitMap = (0x00040000ULL);              \
            break;                                     \
        case  NCP_GMAC97:                              \
            __vpBitMap = (0x00080000ULL);              \
            break;                                     \
        case NCP_GMAC112:                              \
            __vpBitMap = (0x00100000ULL);              \
            break;                                     \
        case NCP_GMAC113:                              \
            __vpBitMap = (0x00200000ULL);              \
            break;                                     \
        case        null:                              \
            __vpBitMap = (0x00400000ULL);              \
            break;                                     \
        case        null:                              \
            __vpBitMap = (0x00800000ULL);              \
            break;                                     \
    }                                                  \
    __vpBitMap;                                        \
})

/* Port (MacChannel) to Bit Mask */
#define NCP_EIOA_BRIDGING_PORT_VP_BIT_MASK(macChan)    \
({                                                     \
    ncp_uint64_t __vpBitMask = (1ULL << 63);           \
    switch (macChan)                                   \
    {                                                  \
        case  NCP_GMAC20:                              \
            __vpBitMask = (0x3FFFFFFDFFULL);           \
            break;                                     \
        case  NCP_GMAC64:                              \
            __vpBitMask = (0x3FFFFFBFFFULL);           \
            break;                                     \
        case  NCP_GMAC65:                              \
            __vpBitMask = (0x3FFFFF7FFFULL);           \
            break;                                     \
        case  NCP_GMAC80:                              \
            __vpBitMask = (0x3FFFFEFFFFULL);           \
            break;                                     \
        case  NCP_GMAC81:                              \
            __vpBitMask = (0x3FFFFDFFFFULL);           \
            break;                                     \
        case  NCP_GMAC96:                              \
            __vpBitMask = (0x3FFFFBFFFFULL);           \
            break;                                     \
        case  NCP_GMAC97:                              \
            __vpBitMask = (0x3FFFF7FFFFULL);           \
            break;                                     \
        case NCP_GMAC112:                              \
            __vpBitMask = (0x3FFFEFFFFFULL);           \
            break;                                     \
        case NCP_GMAC113:                              \
            __vpBitMask = (0x3FFFDFFFFFULL);           \
            break;                                     \
        case        null:                              \
            __vpBitMask = (0x3FFFBFFFFFULL);           \
            break;                                     \
        case        null:                              \
            __vpBitMask = (0x3FFF7FFFFFULL);           \
            break;                                     \
    }                                                  \
    __vpBitMask;                                       \
})

/* Bit Id to Port (MacChannel) */
#define NCP_EIOA_BRIDGING_VP_BIT_TO_PORT(bridgingVpId) \
({                                                     \
    ncp_macChan_t __macChan = NCP_XGMAC0;              \
    switch (bridingVpId)                               \
    {                                                  \
        case  0:                                       \
            __macChan =  NCP_XGMAC0;                   \
            break;                                     \
        case  1:                                       \
            __macChan =   NCP_GMAC1;                   \
            break;                                     \
        case  2:                                       \
            __macChan =   NCP_GMAC2;                   \
            break;                                     \
        case  3:                                       \
            __macChan =   NCP_GMAC3;                   \
            break;                                     \
        case  4:                                       \
            __macChan =   NCP_GMAC4;                   \
            break;                                     \
        case  5:                                       \
            __macChan = NCP_XGMAC16;                   \
            break;                                     \
        case  6:                                       \
            __macChan =  NCP_GMAC17;                   \
            break;                                     \
        case  7:                                       \
            __macChan =  NCP_GMAC18;                   \
            break;                                     \
        case  8:                                       \
            __macChan =  NCP_GMAC19;                   \
            break;                                     \
        case  9:                                       \
            __macChan =  NCP_GMAC20;                   \
            break;                                     \
        case 10:                                       \
            __macChan =  NCP_GMAC32;                   \
            break;                                     \
        case 11:                                       \
            __macChan =  NCP_GMAC33;                   \
            break;                                     \
        case 12:                                       \
            __macChan =  NCP_GMAC48;                   \
            break;                                     \
        case 13:                                       \
            __macChan =  NCP_GMAC49;                   \
            break;                                     \
        case 14:                                       \
            __macChan =  NCP_GMAC64;                   \
            break;                                     \
        case 15:                                       \
            __macChan =  NCP_GMAC65;                   \
            break;                                     \
        case 16:                                       \
            __macChan =  NCP_GMAC80;                   \
            break;                                     \
        case 17:                                       \
            __macChan =  NCP_GMAC81;                   \
            break;                                     \
        case 18:                                       \
            __macChan =  NCP_GMAC96;                   \
            break;                                     \
        case 19:                                       \
            __macChan =  NCP_GMAC97;                   \
            break;                                     \
        case 20:                                       \
            __macChan = NCP_GMAC112;                   \
            break;                                     \
        case 21:                                       \
            __macChan = NCP_GMAC113;                   \
            break;                                     \
        case 22:                                       \
            __macChan =        null;                   \
            break;                                     \
        case 23:                                       \
            __macChan =        null;                   \
            break;                                     \
    }                                                  \
    __macChan;                                         \
})




#endif /* _IP_OVER_ETHERNET_H_ */

