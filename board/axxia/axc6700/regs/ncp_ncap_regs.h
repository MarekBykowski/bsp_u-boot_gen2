/**************************************************************************
 ** INTEL CONFIDENTIAL
 ** Copyright 2008 - 2015 Intel Corporation All Rights Reserved.
 **
 ** The source code contained or described herein and all documents related to 
 ** the source code ("Material") are owned by Intel Corporation or its 
 ** suppliers or licensors. Title to the Material remains with 
 ** Intel Corporation or its suppliers and licensors. 
 ** The Material contains trade secrets and proprietary and confidential
 ** information of Intel or its suppliers and licensors. The Material is 
 ** protected by worldwide copyright and trade secret laws and treaty 
 ** provisions. No part of the Material may be used, copied, reproduced, 
 ** modified, published, uploaded, posted, transmitted, distributed, or 
 ** disclosed in any way without Intel's prior express written permission.
 **
 ** No license under any patent, copyright, trade secret or other 
 ** intellectual property right is granted to or conferred upon you by 
 ** disclosure or delivery of the Materials, either expressly, by implication, 
 ** inducement, estoppel or otherwise. Any license under such intellectual 
 ** property rights must be express and approved by Intel in writing.
 **  **********************************************************************/


#ifndef _NCP_NCAP_REGS_H_
#define _NCP_NCAP_REGS_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "ncp_sal_types.h"

/*! @struct ncp_ncap_config_init_reg_t
 *  @brief NCAP Configuration and Initialization Control
 *  @details This register contains block enables and memory access controls.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_config_init_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param spare3 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param a53_acp_pm </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> A53 ACP port mode </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> mPCQ manager enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ manager enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param always_cnt_itask_arrival </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Always count itask arrivals. When enabled, inhibits
 *        input tasks arrival counting from being disabled when
 *        itask_arrival_int_grp interupt enables are off.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_config_init_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare3                                    : 15;
     unsigned      a53_acp_pm                                :  1;
     unsigned      spare2                                    :  3;
     unsigned      mpm_en                                    :  1;
     unsigned      spare1                                    :  7;
     unsigned      opm_en                                    :  1;
     unsigned      spare0                                    :  2;
     unsigned      always_cnt_itask_arrival                  :  1;
     unsigned      ipm_en                                    :  1;
#else    /* Little Endian */
     unsigned      ipm_en                                    :  1;
     unsigned      always_cnt_itask_arrival                  :  1;
     unsigned      spare0                                    :  2;
     unsigned      opm_en                                    :  1;
     unsigned      spare1                                    :  7;
     unsigned      mpm_en                                    :  1;
     unsigned      spare2                                    :  3;
     unsigned      a53_acp_pm                                :  1;
     unsigned      spare3                                    : 15;
#endif
} ncp_ncap_config_init_reg_t;

/*! @struct ncp_ncap_config_init_woclr_reg_t
 *  @brief NCAP Configuration and Initialization Control
 *  @details This is an alias of the config_init register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_config_init_woclr_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param spare3 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param a53_acp_pm </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> A53 ACP port mode </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> mPCQ manager enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ manager enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param always_cnt_itask_arrival </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Always count itask arrivals. When enabled, inhibits
 *        input tasks arrival counting from being disabled when
 *        itask_arrival_int_grp interupt enables are off.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_config_init_woclr_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare3                                    : 15;
     unsigned      a53_acp_pm                                :  1;
     unsigned      spare2                                    :  3;
     unsigned      mpm_en                                    :  1;
     unsigned      spare1                                    :  7;
     unsigned      opm_en                                    :  1;
     unsigned      spare0                                    :  2;
     unsigned      always_cnt_itask_arrival                  :  1;
     unsigned      ipm_en                                    :  1;
#else    /* Little Endian */
     unsigned      ipm_en                                    :  1;
     unsigned      always_cnt_itask_arrival                  :  1;
     unsigned      spare0                                    :  2;
     unsigned      opm_en                                    :  1;
     unsigned      spare1                                    :  7;
     unsigned      mpm_en                                    :  1;
     unsigned      spare2                                    :  3;
     unsigned      a53_acp_pm                                :  1;
     unsigned      spare3                                    : 15;
#endif
} ncp_ncap_config_init_woclr_reg_t;

/*! @struct ncp_ncap_config_init_woset_reg_t
 *  @brief NCAP Configuration and Initialization Control
 *  @details This is an alias of the config_init register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_config_init_woset_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param spare3 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param a53_acp_pm </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> A53 ACP port mode </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> mPCQ manager enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ manager enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param always_cnt_itask_arrival </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Always count itask arrivals. When enabled, inhibits
 *        input tasks arrival counting from being disabled when
 *        itask_arrival_int_grp interupt enables are off.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_config_init_woset_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare3                                    : 15;
     unsigned      a53_acp_pm                                :  1;
     unsigned      spare2                                    :  3;
     unsigned      mpm_en                                    :  1;
     unsigned      spare1                                    :  7;
     unsigned      opm_en                                    :  1;
     unsigned      spare0                                    :  2;
     unsigned      always_cnt_itask_arrival                  :  1;
     unsigned      ipm_en                                    :  1;
#else    /* Little Endian */
     unsigned      ipm_en                                    :  1;
     unsigned      always_cnt_itask_arrival                  :  1;
     unsigned      spare0                                    :  2;
     unsigned      opm_en                                    :  1;
     unsigned      spare1                                    :  7;
     unsigned      mpm_en                                    :  1;
     unsigned      spare2                                    :  3;
     unsigned      a53_acp_pm                                :  1;
     unsigned      spare3                                    : 15;
#endif
} ncp_ncap_config_init_woset_reg_t;

/*! @struct ncp_ncap_idle_status_reg_t
 *  @brief Idle Status
 *  @details Shows the idle status of NCAP internal blocks.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_idle_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> iPCQ manager idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> mPCQ manager idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ manager idle </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_idle_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      ipm_idle                                  :  1;
     unsigned      mpm_idle                                  :  1;
     unsigned      opm_idle                                  :  1;
#else    /* Little Endian */
     unsigned      opm_idle                                  :  1;
     unsigned      mpm_idle                                  :  1;
     unsigned      ipm_idle                                  :  1;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_idle_status_reg_t;

/*! @struct ncp_ncap_cfg_ring_parity_reg_t
 *  @brief NCAP CFG Master Parity and CNAL ECC Register
 *  @details This register defines CFG Ring Parity Type , CNAL I/F ECC and Enables
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_parity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param singlebit_ecc_correct_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> CNAL I/F correct singlebit ECC enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param singlebit_ecc_detect_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CNAL I/F detect singlebit ECC enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param multibit_ecc_detect_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> CNAL I/F detect multibit ECC enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_par_err_rst_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cfg_ring_parity_err_reset_exec_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_type_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cfg_parity_type_ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_type_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cfg_parity_type_ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_type_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cfg_parity_type_ring0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_err_en_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cfg_parity_err_en_ring3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_err_en_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cfg_parity_err_en_ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_err_en_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cfg_parity_err_en_ring0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_parity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      singlebit_ecc_correct_en                  :  1;
     unsigned      singlebit_ecc_detect_en                   :  1;
     unsigned      multibit_ecc_detect_en                    :  1;
     unsigned      cfg_par_err_rst_en                        :  1;
     unsigned      cfg_parity_type_ring2                     :  1;
     unsigned      cfg_parity_type_ring1                     :  1;
     unsigned      cfg_parity_type_ring0                     :  1;
     unsigned      cfg_parity_err_en_ring2                   :  1;
     unsigned      cfg_parity_err_en_ring1                   :  1;
     unsigned      cfg_parity_err_en_ring0                   :  1;
#else    /* Little Endian */
     unsigned      cfg_parity_err_en_ring0                   :  1;
     unsigned      cfg_parity_err_en_ring1                   :  1;
     unsigned      cfg_parity_err_en_ring2                   :  1;
     unsigned      cfg_parity_type_ring0                     :  1;
     unsigned      cfg_parity_type_ring1                     :  1;
     unsigned      cfg_parity_type_ring2                     :  1;
     unsigned      cfg_par_err_rst_en                        :  1;
     unsigned      multibit_ecc_detect_en                    :  1;
     unsigned      singlebit_ecc_detect_en                   :  1;
     unsigned      singlebit_ecc_correct_en                  :  1;
     unsigned      reserved0                                 : 22;
#endif
} ncp_ncap_cfg_ring_parity_reg_t;

/*! @struct ncp_ncap_cnal_control_reg_t
 *  @brief NCAP CFG Master's CNAL Control Register
 *  @details This register defines cnal_soft_reset bit
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cnal_control_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cnal_soft_reset: if set by sw, hw clears it when reset
 *        done
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cnal_control_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      cnal_soft_reset                           :  1;
#else    /* Little Endian */
     unsigned      cnal_soft_reset                           :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_cnal_control_reg_t;

/*! @struct ncp_ncap_cfg_ring_dbg_stat0_reg_t
 *  @brief NCAP CFG Master Debug Status Register0
 *  @details This register holds some internal signals for Debug purpose
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_dbg_stat0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmd_out </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CFG cmd_out </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param data_out </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> CFG data_out </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rcfg_wcdar </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> read into CDAR </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rcfg_wbuff </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> read into Data BUFF </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rd_data_cnt </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> read data count </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rd_data_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> read data done indication </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param data_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> data done indication </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param timed_out </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> ACK time out indication </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param timer_state </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> timer state machine's state </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param state </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> main state machine's state </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_dbg_stat0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmd_out                                   :  3;
     unsigned      data_out                                  :  8;
     unsigned      rcfg_wcdar                                :  1;
     unsigned      rcfg_wbuff                                :  1;
     unsigned      rd_data_cnt                               :  9;
     unsigned      rd_data_done                              :  1;
     unsigned      data_done                                 :  1;
     unsigned      timed_out                                 :  1;
     unsigned      timer_state                               :  3;
     unsigned      state                                     :  4;
#else    /* Little Endian */
     unsigned      state                                     :  4;
     unsigned      timer_state                               :  3;
     unsigned      timed_out                                 :  1;
     unsigned      data_done                                 :  1;
     unsigned      rd_data_done                              :  1;
     unsigned      rd_data_cnt                               :  9;
     unsigned      rcfg_wbuff                                :  1;
     unsigned      rcfg_wcdar                                :  1;
     unsigned      data_out                                  :  8;
     unsigned      cmd_out                                   :  3;
#endif
} ncp_ncap_cfg_ring_dbg_stat0_reg_t;

/*! @struct ncp_ncap_cfg_ring_dbg_stat1_reg_t
 *  @brief NCAP CFG Master Debug Status Register1
 *  @details This register holds some internal signals for Debug purpose
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_dbg_stat1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ring0_parity_in </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CFG0_par_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring1_parity_in </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CFG1_par_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring2_parity_in </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CFG2_par_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd_in </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> CFG_cmd_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param data_in </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CFG data_in </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_dbg_stat1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ring0_parity_in                           :  1;
     unsigned      ring1_parity_in                           :  1;
     unsigned      ring2_parity_in                           :  1;
     unsigned      cmd_in                                    :  3;
     unsigned      data_in                                   : 26;
#else    /* Little Endian */
     unsigned      data_in                                   : 26;
     unsigned      cmd_in                                    :  3;
     unsigned      ring2_parity_in                           :  1;
     unsigned      ring1_parity_in                           :  1;
     unsigned      ring0_parity_in                           :  1;
#endif
} ncp_ncap_cfg_ring_dbg_stat1_reg_t;

/*! @struct ncp_ncap_int_param_grp_reg_t
 *  @brief Group INT PARAMS Register
 *  @details This register defines interrupt related parameters for a given group
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_int_param_grp_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param wtask </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> how many task arrivals needed to be waited before
 *        generating a task arrival interrupt
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param wtime </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> time in sysclk periods to be waited after the first
 *        task arrived before generating a task arrival interrupt
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_int_param_grp_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      wtask                                     :  4;
     unsigned      wtime                                     : 12;
#else    /* Little Endian */
     unsigned      wtime                                     : 12;
     unsigned      wtask                                     :  4;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_int_param_grp_reg_t;

/*! @struct ncp_ncap_opm_int_stat_reg_0_t
 *  @brief oPCQ Manager Int Stat/Syndrome Reg 0
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_int_stat_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_wr_err_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ memory write error oPCQ number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_rd_err_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ memory read error oPCQ number. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_int_stat_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 17;
     unsigned      opcq_mem_wr_err_resp                      :  2;
     unsigned      opcq_mem_wr_err_opcq_num                  :  5;
     unsigned      reserved1                                 :  1;
     unsigned      opcq_mem_rd_err_resp                      :  2;
     unsigned      opcq_mem_rd_err_opcq_num                  :  5;
#else    /* Little Endian */
     unsigned      opcq_mem_rd_err_opcq_num                  :  5;
     unsigned      opcq_mem_rd_err_resp                      :  2;
     unsigned      reserved1                                 :  1;
     unsigned      opcq_mem_wr_err_opcq_num                  :  5;
     unsigned      opcq_mem_wr_err_resp                      :  2;
     unsigned      reserved0                                 : 17;
#endif
} ncp_ncap_opm_int_stat_reg_0_t;

/*! @struct ncp_ncap_opm_int_stat_reg_1_t
 *  @brief oPCQ Manager Int Stat/Syndrome Reg 1
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_int_stat_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task data overflow oPCQ number </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task data underflow oPCQ number </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_int_stat_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      otask_data_overflow_opcq_num              :  5;
     unsigned      reserved1                                 :  3;
     unsigned      otask_data_underflow_opcq_num             :  5;
#else    /* Little Endian */
     unsigned      otask_data_underflow_opcq_num             :  5;
     unsigned      reserved1                                 :  3;
     unsigned      otask_data_overflow_opcq_num              :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_ncap_opm_int_stat_reg_1_t;

/*! @struct ncp_ncap_ipm_int_stat_reg_t
 *  @brief iPCQ Manager Int Stat/Syndrome
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_int_stat_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_drop_ipcq_err_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ entry drop iPCQ error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mem_wr_err_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ memory write error group number. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_int_stat_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 21;
     unsigned      ipcq_entry_drop_ipcq_err_grp_num          :  3;
     unsigned      reserved1                                 :  2;
     unsigned      ipcq_mem_wr_err_resp                      :  2;
     unsigned      reserved2                                 :  1;
     unsigned      ipcq_mem_wr_err_grp_num                   :  3;
#else    /* Little Endian */
     unsigned      ipcq_mem_wr_err_grp_num                   :  3;
     unsigned      reserved2                                 :  1;
     unsigned      ipcq_mem_wr_err_resp                      :  2;
     unsigned      reserved1                                 :  2;
     unsigned      ipcq_entry_drop_ipcq_err_grp_num          :  3;
     unsigned      reserved0                                 : 21;
#endif
} ncp_ncap_ipm_int_stat_reg_t;

/*! @struct ncp_ncap_npgit_int_stat0_reg_t
 *  @brief NCAP PCQ Group Index Table Interrupt Status 0
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_int_stat0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 18 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> NPGIT memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_err_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory read error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> NPGIT memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_err_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NPGIT memory write error group number. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_int_stat0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 18;
     unsigned      npgit_mem_rd_err_resp                     :  2;
     unsigned      reserved1                                 :  1;
     unsigned      npgit_mem_rd_err_grp_num                  :  3;
     unsigned      reserved2                                 :  2;
     unsigned      npgit_mem_wr_err_resp                     :  2;
     unsigned      reserved3                                 :  1;
     unsigned      npgit_mem_wr_err_grp_num                  :  3;
#else    /* Little Endian */
     unsigned      npgit_mem_wr_err_grp_num                  :  3;
     unsigned      reserved3                                 :  1;
     unsigned      npgit_mem_wr_err_resp                     :  2;
     unsigned      reserved2                                 :  2;
     unsigned      npgit_mem_rd_err_grp_num                  :  3;
     unsigned      reserved1                                 :  1;
     unsigned      npgit_mem_rd_err_resp                     :  2;
     unsigned      reserved0                                 : 18;
#endif
} ncp_ncap_npgit_int_stat0_reg_t;

/*! @struct ncp_ncap_npgit_int_stat1_reg_t
 *  @brief NCAP PCQ Group Index Table Interrupt Status 1
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_int_stat1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_er_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NPGIG memory error address. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_er_syn </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NPGIG memory error syndrome. Bits 15:0 correspond
 *        to indexes 0 to 15 of the NCAP PGIT memory. A set
 *        bit indicates a parity error.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_int_stat1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 11;
     unsigned      npgit_mem_er_addr                         :  5;
     unsigned      npgit_mem_er_syn                          : 16;
#else    /* Little Endian */
     unsigned      npgit_mem_er_syn                          : 16;
     unsigned      npgit_mem_er_addr                         :  5;
     unsigned      reserved0                                 : 11;
#endif
} ncp_ncap_npgit_int_stat1_reg_t;

/*! @struct ncp_ncap_mpm_int_stat_reg_t
 *  @brief mPCQ Manager Int Stat/Syndrome
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_int_stat_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> mPCQ memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_mem_wr_err_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ memory write error group number. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_int_stat_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      mpcq_mem_wr_err_resp                      :  2;
     unsigned      reserved1                                 :  1;
     unsigned      mpcq_mem_wr_err_grp_num                   :  3;
#else    /* Little Endian */
     unsigned      mpcq_mem_wr_err_grp_num                   :  3;
     unsigned      reserved1                                 :  1;
     unsigned      mpcq_mem_wr_err_resp                      :  2;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_mpm_int_stat_reg_t;

/*! @struct ncp_ncap_cpm_int_stat_reg_t
 *  @brief Configuration Ring Master Node Int Stat/Syndrome
 *  @details Provides additional syndrome information related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_int_stat_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> eng_cnal_if_int_grp_num. When eng_cnal_if_int_is_pio
 *        is clear, and at least one of the grp_interrupt_status_table.status_r2.eng_cnal_if_grp_int
 *        bits is set, this field indicates for which group
 *        number the cnal_if_status register contains error
 *        data.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_is_pio </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> eng_cnal_if interrupt is for pio mode. When this bit
 *        and the grp_interrupt_status_table.status_r3.eng_cnal_if_pio_int
 *        bit are both set, the cnal_if_status register contains
 *        error data for that interrupt.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cfg_ring_err_int_grp_num. When cfg_ring_err_int_is_pio
 *        is clear, and at least one of the grp_interrupt_status_table.status_r2.cfg_ring_err_grp_int
 *        bits is set, this field indicates for which group
 *        number the cfg_ring_error_stat_r|0..1| registers contain
 *        error data.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_is_pio </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cfg_ring_err interrupt is for pio mode. When this
 *        bit and the grp_interrupt_status_table.status_r3.cfg_ring_err_pio_int
 *        bit are both set, the cfg_ring_error_stat_r|0..1|
 *        registers contain error data for that interrupt.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_err_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ memory read error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CPM memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPM memory read error response code. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_int_stat_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      eng_cnal_if_int_grp_num                   :  3;
     unsigned      eng_cnal_if_int_is_pio                    :  1;
     unsigned      reserved1                                 :  4;
     unsigned      cfg_ring_err_int_grp_num                  :  3;
     unsigned      cfg_ring_err_int_is_pio                   :  1;
     unsigned      reserved2                                 :  2;
     unsigned      cpcq_mem_rd_err_resp                      :  2;
     unsigned      reserved3                                 :  1;
     unsigned      cpcq_mem_rd_err_group_num                 :  3;
     unsigned      reserved4                                 :  2;
     unsigned      cpm_mem_wr_err_resp                       :  2;
     unsigned      reserved5                                 :  2;
     unsigned      cpm_mem_rd_err_resp                       :  2;
#else    /* Little Endian */
     unsigned      cpm_mem_rd_err_resp                       :  2;
     unsigned      reserved5                                 :  2;
     unsigned      cpm_mem_wr_err_resp                       :  2;
     unsigned      reserved4                                 :  2;
     unsigned      cpcq_mem_rd_err_group_num                 :  3;
     unsigned      reserved3                                 :  1;
     unsigned      cpcq_mem_rd_err_resp                      :  2;
     unsigned      reserved2                                 :  2;
     unsigned      cfg_ring_err_int_is_pio                   :  1;
     unsigned      cfg_ring_err_int_grp_num                  :  3;
     unsigned      reserved1                                 :  4;
     unsigned      eng_cnal_if_int_is_pio                    :  1;
     unsigned      eng_cnal_if_int_grp_num                   :  3;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_cpm_int_stat_reg_t;

/*! @struct ncp_ncap_mme_input_fifo_hwm_reg_t
 *  @brief MME Input FIFO High Water Mark
 *  @details The depth at which the MME FIFO asserst backpressure to the MME block.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_input_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_input_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME input FIFO high water mark. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_input_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      mme_input_fifo_hwm                        :  5;
#else    /* Little Endian */
     unsigned      mme_input_fifo_hwm                        :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_mme_input_fifo_hwm_reg_t;

/*! @struct ncp_ncap_cfg_ring_ack_timer_cnt_reg_t
 *  @brief CFG RING ACK Timer Register
 *  @details if enabled, this counter defines a Time-Out value for ACK responses
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_ack_timer_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_timeout </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cfg_ring_ack_timer_timeout_value </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_ack_timer_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      cfg_ring_ack_timer_timeout;
} ncp_ncap_cfg_ring_ack_timer_cnt_reg_t;

/*! @struct ncp_ncap_scratch_reg_t
 *  @brief Scratch Register
 *  @details This register is a 32-bit scratch register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_scratch_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param scratch_field </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Scratch field that can be used to store any 32-bit
 *        value.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_scratch_reg_t
 *
 */
 
typedef struct
{
     unsigned  int             scratch_field;
} ncp_ncap_scratch_reg_t;

/*! @struct ncp_ncap_mem_init_done_reg_t
 *  @brief Memory Initialization Done
 *  @details This register initializes ECC protected memory.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_init_done_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param do_mem_init </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Do memory initialization. When set, the opm_cpu_vpp_xlat_table
 *        memory, opm_vpp_base_addr_table memory, ipm_cpu_vpp_xlat_table
 *        memory, ipm_vpp_cpu_xlat_table memory, opm_return_ptr_fifo_xlat_table
 *        memory, and opm_return_ptr_fifo_vpp_base_addr_table
 *        memory are initialized to 0, and the rec_virt_pipe_ctrl_table
 *        memory is initialized to all ones. This bit clears
 *        itself one cycle after being set.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_init_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Memory initialization done. When set, the opm_cpu_vpp_xlat_table
 *        memory, opm_vpp_base_addr_table memory, ipm_cpu_vpp_xlat_table
 *        memory, ipm_vpp_cpu_xlat_table memory, opm_return_ptr_fifo_xlat_table
 *        memory, and opm_return_ptr_fifo_vpp_base_addr_table
 *        memory have all been initialized to 0, and the rec_virt_pipe_ctrl_table
 *        memory has been initialized to all ones, following
 *        the setting of the do_mem_init bit of this register.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_init_done_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      do_mem_init                               :  1;
     unsigned      mem_init_done                             :  1;
#else    /* Little Endian */
     unsigned      mem_init_done                             :  1;
     unsigned      do_mem_init                               :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_mem_init_done_reg_t;

/*! @struct ncp_ncap_pgitm_load_cpu_grp_indexes_reg_t
 *  @brief PGIT Monitor Load CPU Indexes Register
 *  @details Forces the PGIT monitor to load the PPGITs from memory on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgitm_load_cpu_grp_indexes_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param load_cpu_index_grp </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Load cpu PGIT indexes. Each bit corresponds to a PCQ
 *        group. After a bit is set, it is cleared by hardware
 *        when the load is complete.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgitm_load_cpu_grp_indexes_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      load_cpu_index_grp                        :  8;
#else    /* Little Endian */
     unsigned      load_cpu_index_grp                        :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_pgitm_load_cpu_grp_indexes_reg_t;

/*! @struct ncp_ncap_pgitm_init_grp_indexes_reg_t
 *  @brief PGIT Monitor Initialize Group Indexes Register
 *  @details Forces the PGIT monitor to initialize all the NCAP's copies of the consumer and produce PCQ pointers to 0 on a group basis.  This makes all of the PCQs in a group empty.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgitm_init_grp_indexes_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param init_index_grp </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Initialize PCQ indexes to 0. Each bit corresponds
 *        to a PCQ group. After a bit is set, it is cleared
 *        by hardware when the initialization is complete.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgitm_init_grp_indexes_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      init_index_grp                            :  8;
#else    /* Little Endian */
     unsigned      init_index_grp                            :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_pgitm_init_grp_indexes_reg_t;

/*! @struct ncp_ncap_pgit_grp_load_timer_reg_t
 *  @brief PGIT Group Load Timer Value to Load CPU Indexes
 *  @details This value is used to set the delay for the timer for the PGIT monitor to load CPU Indexes when there are no hardware or software pokes.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_cpu_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the cpu timer to expire </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_grp_load_timer_reg_t
 *
 */
 
typedef struct
{
     unsigned  int        set_timer_cpu_load;
} ncp_ncap_pgit_grp_load_timer_reg_t;

/*! @struct ncp_ncap_delay_grp_load_timer_reg_t
 *  @brief PGIT Poke Shorten Delay Value to Load CPU Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT monitor to load CPU Indexes when a hardware poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_delay_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the ncap timer to expire </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_delay_grp_load_timer_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_load;
} ncp_ncap_delay_grp_load_timer_reg_t;

/*! @struct ncp_ncap_swpoke_delay_grp_load_timer_reg_t
 *  @brief PGIT Software Poke Shorten Delay Value to Load CPU Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT monitor to load CPU Indexes when a software poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_swpoke_delay_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the ncap timer to expire </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_swpoke_delay_grp_load_timer_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_load;
} ncp_ncap_swpoke_delay_grp_load_timer_reg_t;

/*! @struct ncp_ncap_ipcq_etne_delay_grp_load_timer_reg_t
 *  @brief PGIT iPCQ Empty to not Empty Poke Shorten Delay Value to Load CPU Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT monitor to upload NCAP Indexes when a poke occurs because an iPCQ in a group went from empty to not empty.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_etne_delay_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the ncap timer to expire </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_etne_delay_grp_load_timer_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_load;
} ncp_ncap_ipcq_etne_delay_grp_load_timer_reg_t;

/*! @struct ncp_ncap_pgit_grp_upload_timer_reg_t
 *  @brief PGIT Group UpLoad Timer Value to Upload NCAP Indexes
 *  @details This value is used to set the delay for the timer for the PGIT monitor to upload NCAP Indexes when there are no hardware pokes.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_grp_upload_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_ncap_upload </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the ncap timer to expire </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_grp_upload_timer_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      set_timer_ncap_upload;
} ncp_ncap_pgit_grp_upload_timer_reg_t;

/*! @struct ncp_ncap_delay_grp_upload_timer_reg_t
 *  @brief PGIT Poke Shorten Delay Value to Upload NCAP Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT monitor to upload NCAP Indexes when a hardware poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_delay_grp_upload_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_upload </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the ncap timer to expire </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_delay_grp_upload_timer_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_upload;
} ncp_ncap_delay_grp_upload_timer_reg_t;

/*! @struct ncp_ncap_itask_arrival_poke_grp_cnt_compare_reg_t
 *  @brief Input Task Arrival Poke Group Count Compare Register
 *  @details This register defines a count value for input tasks received for a given group that will trigger a poke to the PGIT monitor upload and load timers.  The poke is disabled when the count is set to 0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_arrival_poke_grp_cnt_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_cmp_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This field is compared to an internal counter that
 *        tracks the number of itasks received to  determine
 *        when to do a poke of the PGIT monitor  load and
 *        upload timers.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_arrival_poke_grp_cnt_compare_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      cnt_cmp_value                             :  8;
#else    /* Little Endian */
     unsigned      cnt_cmp_value                             :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_itask_arrival_poke_grp_cnt_compare_reg_t;

/*! @struct ncp_ncap_opcq_and_cpcq_entry_grp_cnt_compare_reg_t
 *  @brief oPCQ and cPCQ Entry Group Count Compare Register
 *  @details This register defines a count value for oPCQ and cPCQ entries processed for a given group that will trigger a poke to the PGIT monitor upload and load timers.  The poke is disabled when the count is set to 0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_and_cpcq_entry_grp_cnt_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_cmp_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This field is compared to an internal counter that
 *        tracks the number of oPCQ and cPCQ entries processed
 *        to determine when to do a poke of the PGIT monitor
 *        load and upload timers.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_and_cpcq_entry_grp_cnt_compare_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      cnt_cmp_value                             :  8;
#else    /* Little Endian */
     unsigned      cnt_cmp_value                             :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_opcq_and_cpcq_entry_grp_cnt_compare_reg_t;

/*! @struct ncp_ncap_opcq_entry_grp_cnt_compare_reg_t
 *  @brief oPCQ Entry Group Count Compare Register
 *  @details This register defines a count value for oPCQ entries processed for a given group that will trigger a poke to the PGIT monitor upload and load timers.  The poke is disabled when the count is set to 0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_entry_grp_cnt_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_cmp_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This field is compared to an internal counter that
 *        tracks the number of otasks processed to determine
 *        when to do a poke of the PGIT monitor load and upload
 *        timers.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_entry_grp_cnt_compare_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      cnt_cmp_value                             :  8;
#else    /* Little Endian */
     unsigned      cnt_cmp_value                             :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_opcq_entry_grp_cnt_compare_reg_t;

/*! @struct ncp_ncap_hw_poke_and_timer_enable_reg_t
 *  @brief Hardware Poke and Timer Enable
 *  @details Enables timers and timer pokes for the iPCQ and oPCQ
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_hw_poke_and_timer_enable_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_hw_poke_and_timer_enable_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
#else    /* Little Endian */
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_hw_poke_and_timer_enable_reg_t;

/*! @struct ncp_ncap_hw_poke_and_timer_enable_reg_woclr_t
 *  @brief Hardware Poke and Timer Enable Write One to Clear
 *  @details This is an alias of the hw_poke_and_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_hw_poke_and_timer_enable_reg_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_hw_poke_and_timer_enable_reg_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
#else    /* Little Endian */
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_hw_poke_and_timer_enable_reg_woclr_t;

/*! @struct ncp_ncap_hw_poke_and_timer_enable_reg_woset_t
 *  @brief Hardware Poke and Timer Enable Write One to Set
 *  @details This is an alias of the hw_poke_and_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_hw_poke_and_timer_enable_reg_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_hw_poke_and_timer_enable_reg_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
#else    /* Little Endian */
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_hw_poke_and_timer_enable_reg_woset_t;

/*! @struct ncp_ncap_hw_poke_flags_reg_t
 *  @brief Hardware Upload Poke Flags
 *  @details Flags that set during a hardware upload poke.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_hw_poke_flags_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp_upload_flag </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware group upload poke flags. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_hw_poke_flags_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      hardware_grp_upload_flag                  :  8;
#else    /* Little Endian */
     unsigned      hardware_grp_upload_flag                  :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_hw_poke_flags_reg_t;

/*! @struct ncp_ncap_grp_load_poke_enable_reg_t
 *  @brief Group Load Poke Enable
 *  @details Enables load pokes on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_load_poke_enable_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_poke_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables load pokes for the timers that force NPGIT
 *        loads of the cpu managed PGITs from memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_load_poke_enable_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_load_poke_en                          :  8;
#else    /* Little Endian */
     unsigned      grp_load_poke_en                          :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_load_poke_enable_reg_t;

/*! @struct ncp_ncap_grp_load_poke_enable_reg_woclr_t
 *  @brief Group Load Poke Enable Write One to Clear
 *  @details This is an alias of the grp_load_poke_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_load_poke_enable_reg_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_poke_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables load pokes for the timers that force NPGIT
 *        loads of the cpu managed PGITs from memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_load_poke_enable_reg_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_load_poke_en                          :  8;
#else    /* Little Endian */
     unsigned      grp_load_poke_en                          :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_load_poke_enable_reg_woclr_t;

/*! @struct ncp_ncap_grp_load_poke_enable_reg_woset_t
 *  @brief Group Load Poke Enable Write One to Set
 *  @details This is an alias of the grp_load_poke_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_load_poke_enable_reg_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_poke_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables load pokes for the timers that force NPGIT
 *        loads of the cpu managed PGITs from memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_load_poke_enable_reg_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_load_poke_en                          :  8;
#else    /* Little Endian */
     unsigned      grp_load_poke_en                          :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_load_poke_enable_reg_woset_t;

/*! @struct ncp_ncap_grp_load_timer_enable_reg_t
 *  @brief Group Load Timer Enable
 *  @details Enables load timers on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_load_timer_enable_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_timer_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT loads of the cpu
 *        managed PGITs from memory. Each bit corresponds to
 *        a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_load_timer_enable_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_load_timer_en                         :  8;
#else    /* Little Endian */
     unsigned      grp_load_timer_en                         :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_load_timer_enable_reg_t;

/*! @struct ncp_ncap_grp_load_timer_enable_reg_woclr_t
 *  @brief Group Load Timer Enable Write One to Clear
 *  @details This is an alias of the grp_load_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_load_timer_enable_reg_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_timer_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT loads of the cpu
 *        managed PGITs from memory. Each bit corresponds to
 *        a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_load_timer_enable_reg_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_load_timer_en                         :  8;
#else    /* Little Endian */
     unsigned      grp_load_timer_en                         :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_load_timer_enable_reg_woclr_t;

/*! @struct ncp_ncap_grp_load_timer_enable_reg_woset_t
 *  @brief Group Load Timer Enable Write One to Set
 *  @details This is an alias of the grp_load_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_load_timer_enable_reg_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_timer_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT loads of the cpu
 *        managed PGITs from memory. Each bit corresponds to
 *        a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_load_timer_enable_reg_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_load_timer_en                         :  8;
#else    /* Little Endian */
     unsigned      grp_load_timer_en                         :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_load_timer_enable_reg_woset_t;

/*! @struct ncp_ncap_grp_upload_poke_enable_reg_t
 *  @brief Group Upload Poke Enable
 *  @details Enables upload pokes on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_upload_poke_enable_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_poke_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables upload pokes for the timers that force NPGIT
 *        uploads of the ncap managed PGITs to memory. Each
 *        bit corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_upload_poke_enable_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_upload_poke_en                        :  8;
#else    /* Little Endian */
     unsigned      grp_upload_poke_en                        :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_upload_poke_enable_reg_t;

/*! @struct ncp_ncap_grp_upload_poke_enable_reg_woclr_t
 *  @brief Group Upload Poke Enable Write One to Clear
 *  @details This is an alias of the grp_upload_poke_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_upload_poke_enable_reg_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_poke_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables upload pokes for the timers that force NPGIT
 *        uploads of the ncap managed PGITs to memory. Each
 *        bit corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_upload_poke_enable_reg_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_upload_poke_en                        :  8;
#else    /* Little Endian */
     unsigned      grp_upload_poke_en                        :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_upload_poke_enable_reg_woclr_t;

/*! @struct ncp_ncap_grp_upload_poke_enable_reg_woset_t
 *  @brief Group Upload Poke Enable Write One to Set
 *  @details This is an alias of the grp_upload_poke_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_upload_poke_enable_reg_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_poke_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables upload pokes for the timers that force NPGIT
 *        uploads of the ncap managed PGITs to memory. Each
 *        bit corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_upload_poke_enable_reg_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_upload_poke_en                        :  8;
#else    /* Little Endian */
     unsigned      grp_upload_poke_en                        :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_upload_poke_enable_reg_woset_t;

/*! @struct ncp_ncap_grp_upload_timer_enable_reg_t
 *  @brief Group Upload Timer Enable
 *  @details Enables upload timers on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_upload_timer_enable_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_timer_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT uploads of the
 *        ncap managed PGITs to memory. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_upload_timer_enable_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_upload_timer_en                       :  8;
#else    /* Little Endian */
     unsigned      grp_upload_timer_en                       :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_upload_timer_enable_reg_t;

/*! @struct ncp_ncap_grp_upload_timer_enable_reg_woclr_t
 *  @brief Group Upload Timer Enable Write One to Clear
 *  @details This is an alias of the grp_upload_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_upload_timer_enable_reg_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_timer_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT uploads of the
 *        ncap managed PGITs to memory. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_upload_timer_enable_reg_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_upload_timer_en                       :  8;
#else    /* Little Endian */
     unsigned      grp_upload_timer_en                       :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_upload_timer_enable_reg_woclr_t;

/*! @struct ncp_ncap_grp_upload_timer_enable_reg_woset_t
 *  @brief Group Upload Timer Enable Write One to Set
 *  @details This is an alias of the grp_upload_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_upload_timer_enable_reg_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_timer_en </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT uploads of the
 *        ncap managed PGITs to memory. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_upload_timer_enable_reg_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      grp_upload_timer_en                       :  8;
#else    /* Little Endian */
     unsigned      grp_upload_timer_en                       :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_grp_upload_timer_enable_reg_woset_t;

/*! @struct ncp_ncap_num_of_cfg_nodes_reg_t
 *  @brief Number of CFG Rings
 *  @details keeps the number of CFG nodes on each CFG Ring
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_of_cfg_nodes_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_ring2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_ring1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_ring0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_ring0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_of_cfg_nodes_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      num_nodes_ring2                           :  8;
     unsigned      num_nodes_ring1                           :  8;
     unsigned      num_nodes_ring0                           :  8;
#else    /* Little Endian */
     unsigned      num_nodes_ring0                           :  8;
     unsigned      num_nodes_ring1                           :  8;
     unsigned      num_nodes_ring2                           :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_num_of_cfg_nodes_reg_t;

/*! @struct ncp_ncap_cfg_pio_cdr0_reg_t
 *  @brief PIO Mode Command Data Register 0
 *  @details PIO Mode CFG command descrption register 0
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_pio_cdr0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param start_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Start/Done, set to 1 to initiate a PIO operation,
 *        cleared by hw when done
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param sysmem_access_type </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Defines sysmem/cache access type for SM and CSM commands
 *        sysmem_access_type = 4'b0010; // Cacheable access,
 *        alloc cache , typically used for Regular Sysmem commands
 *        sysmem_access_type = 4'b1111; // Cacheable ATOMIC
 *        access, alloc cache , typically used for Coherent
 *        Sysmem commands
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Local bit that defines Node's Own Address Space </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param status </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Execution Status : 00= inactive 01= ongoing executiondarkreddarkgreen </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param byte_swap_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Byte Swap Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_cmpl_int_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Interrupt Enable on CFG Command Completion </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd_type </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> CPU CFG Command Type, encoded as: blue </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dbs </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Data Buffer Size: length of Data Buffer in Bytes 0
 *        means 1 Byte
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_pio_cdr0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      start_done                                :  1;
     unsigned      reserved0                                 :  2;
     unsigned      sysmem_access_type                        :  4;
     unsigned      local_bit                                 :  1;
     unsigned      status                                    :  2;
     unsigned      byte_swap_enable                          :  1;
     unsigned      cfg_cmpl_int_enable                       :  1;
     unsigned      cmd_type                                  :  4;
     unsigned      dbs                                       : 16;
#else    /* Little Endian */
     unsigned      dbs                                       : 16;
     unsigned      cmd_type                                  :  4;
     unsigned      cfg_cmpl_int_enable                       :  1;
     unsigned      byte_swap_enable                          :  1;
     unsigned      status                                    :  2;
     unsigned      local_bit                                 :  1;
     unsigned      sysmem_access_type                        :  4;
     unsigned      reserved0                                 :  2;
     unsigned      start_done                                :  1;
#endif
} ncp_ncap_cfg_pio_cdr0_reg_t;

/*! @struct ncp_ncap_cfg_pio_cdr1_reg_t
 *  @brief PIO Mode Command Data Register 1
 *  @details PIO Mode CFG command descrption register 1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_pio_cdr1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param target_address </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target Address, For CS*
 *        and SM* Commands : System Memory Address Lower bits
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_pio_cdr1_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            target_address;
} ncp_ncap_cfg_pio_cdr1_reg_t;

/*! @struct ncp_ncap_cfg_pio_cdr2_reg_t
 *  @brief PIO Mode Command Data Register 2
 *  @details PIO Mode CFG command descrption register 2
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_pio_cdr2_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param va </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> For CR* Commands : unused, For CS* and SM* Commands
 *        : unused
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_node_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target Node ID, For CS*
 *        and SM* Commands : unused
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id_address_upper </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target ID, For CS* and
 *        SM* Commands : System Memory Virtual Address Upper
 *        bits 35:32 (upper 4 bits not used)
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_pio_cdr2_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      va                                        : 16;
     unsigned      target_node_id                            :  8;
     unsigned      target_id_address_upper                   :  8;
#else    /* Little Endian */
     unsigned      target_id_address_upper                   :  8;
     unsigned      target_node_id                            :  8;
     unsigned      va                                        : 16;
#endif
} ncp_ncap_cfg_pio_cdr2_reg_t;

/*! @struct ncp_ncap_cfg_pio_cdr3_reg_t
 *  @brief PIO Mode Command Data Register 3
 *  @details PIO Mode CFG command descrption register 3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_pio_cdr3_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : unused, For CS* and SM* Commands
 *        : System memory Pool ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_pio_cdr3_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      spare                                     :  2;
     unsigned      reserved1                                 :  3;
     unsigned      pool_id                                   :  5;
#else    /* Little Endian */
     unsigned      pool_id                                   :  5;
     unsigned      reserved1                                 :  3;
     unsigned      spare                                     :  2;
     unsigned      reserved0                                 : 22;
#endif
} ncp_ncap_cfg_pio_cdr3_reg_t;

/*! @struct ncp_ncap_cfg_ring_error_stat_reg0_t
 *  @brief CFG Ring Command Error Status Register 0
 *  @details CFG Ring Command Execution error status register 0
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_error_stat_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param target_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Target_Error_detected </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Node_Error_detected </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_err_type_bit_3_2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Node Error_Type[3:2] when node error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param time_out_err_or_node_err_type_bit1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> TimeOut Error indication at target error or Node Error_Type_Bit[1] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param decode_err_or_node_err_type_bit0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Decode Error indication at target error or Node Error_Type_Bit[0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Local Bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param instruction </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CFG Ring instruction </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param inst_len </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Instruction lenght </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring_id </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Ring ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_id </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Target Node ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Target ID </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_error_stat_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      target_error                              :  1;
     unsigned      node_error                                :  1;
     unsigned      node_err_type_bit_3_2                     :  2;
     unsigned      time_out_err_or_node_err_type_bit1        :  1;
     unsigned      decode_err_or_node_err_type_bit0          :  1;
     unsigned      local_bit                                 :  1;
     unsigned      instruction                               :  3;
     unsigned      inst_len                                  :  6;
     unsigned      ring_id                                   :  2;
     unsigned      node_id                                   :  6;
     unsigned      target_id                                 :  8;
#else    /* Little Endian */
     unsigned      target_id                                 :  8;
     unsigned      node_id                                   :  6;
     unsigned      ring_id                                   :  2;
     unsigned      inst_len                                  :  6;
     unsigned      instruction                               :  3;
     unsigned      local_bit                                 :  1;
     unsigned      decode_err_or_node_err_type_bit0          :  1;
     unsigned      time_out_err_or_node_err_type_bit1        :  1;
     unsigned      node_err_type_bit_3_2                     :  2;
     unsigned      node_error                                :  1;
     unsigned      target_error                              :  1;
#endif
} ncp_ncap_cfg_ring_error_stat_reg0_t;

/*! @struct ncp_ncap_cfg_ring_error_stat_reg1_t
 *  @brief CFG Ring Command Error Status Register 1
 *  @details CFG Ring Command Execution error status register 1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_error_stat_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param wrong_ack_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Wrong ACK received error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param acktimeout_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> ACK Time-Out Error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param unclaimed_header_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Unclaimed Header Error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Parity Error Ring0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Parity Error Ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Parity Error Ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Local Bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param instruction </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CFG Ring instruction </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param inst_len </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Instruction length </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring_id </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Ring ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_id </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Target Node ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Target ID </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_error_stat_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      wrong_ack_err                             :  1;
     unsigned      acktimeout_err                            :  1;
     unsigned      unclaimed_header_err                      :  1;
     unsigned      parity_err_ring0                          :  1;
     unsigned      parity_err_ring1                          :  1;
     unsigned      parity_err_ring2                          :  1;
     unsigned      local_bit                                 :  1;
     unsigned      instruction                               :  3;
     unsigned      inst_len                                  :  6;
     unsigned      ring_id                                   :  2;
     unsigned      node_id                                   :  6;
     unsigned      target_id                                 :  8;
#else    /* Little Endian */
     unsigned      target_id                                 :  8;
     unsigned      node_id                                   :  6;
     unsigned      ring_id                                   :  2;
     unsigned      inst_len                                  :  6;
     unsigned      instruction                               :  3;
     unsigned      local_bit                                 :  1;
     unsigned      parity_err_ring2                          :  1;
     unsigned      parity_err_ring1                          :  1;
     unsigned      parity_err_ring0                          :  1;
     unsigned      unclaimed_header_err                      :  1;
     unsigned      acktimeout_err                            :  1;
     unsigned      wrong_ack_err                             :  1;
#endif
} ncp_ncap_cfg_ring_error_stat_reg1_t;

/*! @struct ncp_ncap_cfg_ring_node_status_reg_t
 *  @brief CFG Ring Node Status Register
 *  @details This register holds the value returned when status is asked, write 1 to bit16 of NCAP Interrupt Register at F000 to clear
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ring_node_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param node_status </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Node Status </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ring_node_status_reg_t
 *
 */
 
typedef struct
{
     unsigned  int               node_status;
} ncp_ncap_cfg_ring_node_status_reg_t;

/*! @struct ncp_ncap_cnal_if_status_reg_t
 *  @brief CNAL Interface SysMem Read/Write Status Register
 *  @details This register holds the value returned when CNAL I/F status is asked
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cnal_if_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_eng_cwd_ready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> CMSI Write Data Ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_eng_cwr_ready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CMSI Write Request Ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_eng_crr_ready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> CMSI Read Request Ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_read_transaction_state </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> CNAL Interface Read transaction state </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_write_transaction_state </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CNAL Interface Write transaction state </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param read_resp_err_code </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CNAL Interface Read Response error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param write_resp_err_code </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CNAL Interface Write Response error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_single_l_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> CNAL Interface lower word ECC Singlebit error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_single_u_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CNAL Interface upper word ECC Singlebit error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_multiple_l_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> CNAL Interface lower word ECC Multibit error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_multiple_u_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CNAL Interface upper word ECC Multibit error </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cnal_if_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      cnal_eng_cwd_ready                        :  1;
     unsigned      cnal_eng_cwr_ready                        :  1;
     unsigned      cnal_eng_crr_ready                        :  1;
     unsigned      cnal_read_transaction_state               :  7;
     unsigned      cnal_write_transaction_state              :  6;
     unsigned      read_resp_err_code                        :  2;
     unsigned      write_resp_err_code                       :  2;
     unsigned      ecc_single_l_err                          :  1;
     unsigned      ecc_single_u_err                          :  1;
     unsigned      ecc_multiple_l_err                        :  1;
     unsigned      ecc_multiple_u_err                        :  1;
#else    /* Little Endian */
     unsigned      ecc_multiple_u_err                        :  1;
     unsigned      ecc_multiple_l_err                        :  1;
     unsigned      ecc_single_u_err                          :  1;
     unsigned      ecc_single_l_err                          :  1;
     unsigned      write_resp_err_code                       :  2;
     unsigned      read_resp_err_code                        :  2;
     unsigned      cnal_write_transaction_state              :  6;
     unsigned      cnal_read_transaction_state               :  7;
     unsigned      cnal_eng_crr_ready                        :  1;
     unsigned      cnal_eng_cwr_ready                        :  1;
     unsigned      cnal_eng_cwd_ready                        :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_cnal_if_status_reg_t;

/*! @struct ncp_ncap_pcq_grp_reg0_t
 *  @brief PCQ Group Register0
 *  @details PCQ Group Base Initialization Register 2
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_grp_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCAP PCQ Group Index Table Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_grp_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      ncap_pgit_vi_upper                        :  4;
#else    /* Little Endian */
     unsigned      ncap_pgit_vi_upper                        :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_pcq_grp_reg0_t;

/*! @struct ncp_ncap_pcq_grp_reg1_t
 *  @brief PCQ Group Register1
 *  @details PCQ Group Base Initialization Register3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_grp_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_vi_lower </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> NCAP PCQ Group Index Table Virtual Index lower bits[31:6] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param zeros </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 6 Zeros in the lower 6 bits of the BAR </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_grp_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ncap_pgit_vi_lower                        : 26;
     unsigned      zeros                                     :  6;
#else    /* Little Endian */
     unsigned      zeros                                     :  6;
     unsigned      ncap_pgit_vi_lower                        : 26;
#endif
} ncp_ncap_pcq_grp_reg1_t;

/*! @struct ncp_ncap_pcq_grp_reg2_t
 *  @brief PCQ Group Register2
 *  @details PCQ Group Base Initialization Register 4
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_grp_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_pgit_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPU PCQ Group Index Table Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_grp_reg2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      cpu_pgit_vi_upper                         :  4;
#else    /* Little Endian */
     unsigned      cpu_pgit_vi_upper                         :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_pcq_grp_reg2_t;

/*! @struct ncp_ncap_pcq_grp_reg3_t
 *  @brief PCQ Group Register3
 *  @details PCQ Group Base Initialization Register 5
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_grp_reg3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_pgit_vi_lower </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CPU PCQ Group Index Table Virtual Index lower bits[31:6] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param zeros </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 6 Zeros in the lower 6 bits of the BAR </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_grp_reg3_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cpu_pgit_vi_lower                         : 26;
     unsigned      zeros                                     :  6;
#else    /* Little Endian */
     unsigned      zeros                                     :  6;
     unsigned      cpu_pgit_vi_lower                         : 26;
#endif
} ncp_ncap_pcq_grp_reg3_t;

/*! @struct ncp_ncap_pcq_grp_reg4_t
 *  @brief PCQ Group Register4
 *  @details PCQ Group Base Initialization Register1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_grp_reg4_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 20 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param le </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Little endian. When set, PCQ entries are stored with
 *        the the 8 bytes of each double-word flipped to apear
 *        little endian.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Memory pool ID </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_grp_reg4_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 20;
     unsigned      le                                        :  1;
     unsigned      reserved1                                 :  6;
     unsigned      pool_id                                   :  5;
#else    /* Little Endian */
     unsigned      pool_id                                   :  5;
     unsigned      reserved1                                 :  6;
     unsigned      le                                        :  1;
     unsigned      reserved0                                 : 20;
#endif
} ncp_ncap_pcq_grp_reg4_t;

/*! @struct ncp_ncap_PCQ_desc_reg0_t
 *  @brief PCQ descriptor Register0
 *  @details Register 0 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grn </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group number. Indicates to which PCQ group the queue
 *        belongs. Even though the reset value is shown as undefined,
 *        the actual reset value is set to divide the PCQs evenly
 *        between the PCQ groups in ascending order. The rdl
 *        is coded this way to allow for the creation of a register
 *        array instead of individual registers.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved1                                 : 21;
     unsigned      grn                                       :  3;
     unsigned      reserved0                                 :  8;
#else    /* Little Endian */
     unsigned      reserved0                                 :  8;
     unsigned      grn                                       :  3;
     unsigned      reserved1                                 : 21;
#endif
} ncp_ncap_PCQ_desc_reg0_t;

/*! @struct ncp_ncap_PCQ_desc_mme_reg0_t
 *  @brief mPCQ descriptor Register0
 *  @details Register 0 of the mPCQ Queue descriptor.  Since each consecutive four mPCQs is associated with the four sizes of the same memory pool, writing this register for any of the four configures them to the same values for all four.  This ensures that the four queues are in the same group and use the same memory pool.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_mme_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grn </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group number. Indicates to which PCQ group the queue
 *        belongs. Even though the reset value is shown as undefined,
 *        the actual reset value is set to divide the PCQs evenly
 *        between the PCQ groups in ascending order. The rdl
 *        is coded this way to allow for the creation of a register
 *        array instead of individual registers.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param m_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME pool ID. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_mme_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 21;
     unsigned      grn                                       :  3;
     unsigned      reserved1                                 :  3;
     unsigned      m_pool_id                                 :  5;
#else    /* Little Endian */
     unsigned      m_pool_id                                 :  5;
     unsigned      reserved1                                 :  3;
     unsigned      grn                                       :  3;
     unsigned      reserved0                                 : 21;
#endif
} ncp_ncap_PCQ_desc_mme_reg0_t;

/*! @struct ncp_ncap_PCQ_desc_mme_reg1_t
 *  @brief mPCQ descriptor Register1
 *  @details Register 1 of the mPCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_mme_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param number_of_queue_entries </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> The size of the queue in number of queue entries.
 *        If an attempt is made to write a value greater than
 *        128 to this field, the result is 128. The value must
 *        also be set based on the value of PCQ_desc_r2.mpcq_num_bufs_per_req
 *        as follows: 0x0 or 0x1 - multiple of 2, 0x2 - multiple
 *        of 4, 0x3 - multiple of 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param enable_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Enable. 0 - queue is disabled, 1 - queue is enabled </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Queue memory pool ID. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_mme_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      number_of_queue_entries                   :  8;
     unsigned      reserved1                                 :  5;
     unsigned      enable_bit                                :  1;
     unsigned      reserved2                                 :  5;
     unsigned      q_pool_id                                 :  5;
#else    /* Little Endian */
     unsigned      q_pool_id                                 :  5;
     unsigned      reserved2                                 :  5;
     unsigned      enable_bit                                :  1;
     unsigned      reserved1                                 :  5;
     unsigned      number_of_queue_entries                   :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_PCQ_desc_mme_reg1_t;

/*! @struct ncp_ncap_PCQ_desc_mme_reg2_t
 *  @brief mPCQ descriptor Register2
 *  @details Register 2 of the mPCQ Queue descriptor.  The values of mpcq_almost_empty_depth and mpcq_almost_full_depth must be set such that mpcq_almost_full_depth > mpcq_almost_empty_depth.  When a queue is almost empty, the free space must be at least the value defined by mpcq_num_bufs_per_req.  A queue must go almost full when the free space is less than the value defined by mpcq_num_bufs_per_req.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_mme_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_almost_full_depth </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> mPCQ almost full depth. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_almost_empty_depth </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> mPCQ almost empty depth. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_num_bufs_per_req </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> mPCQ number of buffers per request. 0x0 or 0x1 - 2,
 *        0x2 - 4, 0x3 - 8
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_mme_reg2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      mpcq_almost_full_depth                    :  8;
     unsigned      mpcq_almost_empty_depth                   :  8;
     unsigned      reserved0                                 :  6;
     unsigned      mpcq_num_bufs_per_req                     :  2;
     unsigned      reserved1                                 :  4;
     unsigned      q_vi_upper                                :  4;
#else    /* Little Endian */
     unsigned      q_vi_upper                                :  4;
     unsigned      reserved1                                 :  4;
     unsigned      mpcq_num_bufs_per_req                     :  2;
     unsigned      reserved0                                 :  6;
     unsigned      mpcq_almost_empty_depth                   :  8;
     unsigned      mpcq_almost_full_depth                    :  8;
#endif
} ncp_ncap_PCQ_desc_mme_reg2_t;

/*! @struct ncp_ncap_PCQ_desc_mme_reg3_t
 *  @brief mPCQ descriptor Register3
 *  @details Register 3 of the mPCQ Queue descriptor.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_mme_reg3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_lower </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index lower bits[31:0]. The
 *        setting of this virtual index must be byte aligned
 *        based on the value of PCQ_desc_r2.mpcq_num_bufs_per_req
 *        as follows: 0x0 or 0x1 - 16-byte aligned, 0x2 - 32-byte
 *        aligned, 0x3 - 64-byte aligned.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_mme_reg3_t
 *
 */
 
typedef struct
{
     unsigned  int                q_vi_lower;
} ncp_ncap_PCQ_desc_mme_reg3_t;

/*! @struct ncp_ncap_PCQ_desc_reg1_t
 *  @brief PCQ descriptor Register1
 *  @details Register 1 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param number_of_queue_entries </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> The size of the queue in number of queue entries.
 *        If an attempt is made to write a value greater than
 *        128 to this field, the result is 128.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param enable_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Enable. 0 - queue is disabled, 1 - queue is enabled </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Queue memory pool ID. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      number_of_queue_entries                   :  8;
     unsigned      reserved1                                 :  5;
     unsigned      enable_bit                                :  1;
     unsigned      reserved2                                 :  5;
     unsigned      q_pool_id                                 :  5;
#else    /* Little Endian */
     unsigned      q_pool_id                                 :  5;
     unsigned      reserved2                                 :  5;
     unsigned      enable_bit                                :  1;
     unsigned      reserved1                                 :  5;
     unsigned      number_of_queue_entries                   :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_PCQ_desc_reg1_t;

/*! @struct ncp_ncap_PCQ_desc_atfc_reg1_t
 *  @brief PCQ descriptor Register1
 *  @details Register 1 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_atfc_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param number_of_queue_entries </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> The size of the queue in number of queue entries.
 *        If an attempt is made to write a value greater than
 *        128 to this field, the result is 128.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param atfc </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Auto task flow completion. 0 - disabled, 1 - enabled.
 *        NOTE: this field is only visible and configurable
 *        when the pcq_descr_enhanced register is set. Its reset
 *        value is 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param enable_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Enable. 0 - queue is disabled, 1 - queue is enabled </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Queue memory pool ID. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_atfc_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      number_of_queue_entries                   :  8;
     unsigned      reserved1                                 :  4;
     unsigned      atfc                                      :  1;
     unsigned      enable_bit                                :  1;
     unsigned      reserved2                                 :  5;
     unsigned      q_pool_id                                 :  5;
#else    /* Little Endian */
     unsigned      q_pool_id                                 :  5;
     unsigned      reserved2                                 :  5;
     unsigned      enable_bit                                :  1;
     unsigned      atfc                                      :  1;
     unsigned      reserved1                                 :  4;
     unsigned      number_of_queue_entries                   :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_PCQ_desc_atfc_reg1_t;

/*! @struct ncp_ncap_PCQ_desc_reg2_t
 *  @brief PCQ descriptor Register2
 *  @details Register 2 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_reg2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      q_vi_upper                                :  4;
#else    /* Little Endian */
     unsigned      q_vi_upper                                :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_PCQ_desc_reg2_t;

/*! @struct ncp_ncap_PCQ_desc_reg3_t
 *  @brief PCQ descriptor Register3
 *  @details Register 3 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_reg3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_lower </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index lower bits[31:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_reg3_t
 *
 */
 
typedef struct
{
     unsigned  int                q_vi_lower;
} ncp_ncap_PCQ_desc_reg3_t;

/*! @struct ncp_ncap_PCQ_desc_atfc_reg2_t
 *  @brief PCQ descriptor Register2
 *  @details Register 2 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_atfc_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 20 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Auto task flow completion queue completion bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_cpa </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Auto task flow completion queue consumer pointer advanced
 *        bit. NOTE: this field is only visible and configurable
 *        when the pcq_descr_enhanced register is set. Its reset
 *        value is 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_atfc_reg2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 20;
     unsigned      apcq_cmplt                                :  1;
     unsigned      apcq_cpa                                  :  1;
     unsigned      reserved1                                 :  6;
     unsigned      q_vi_upper                                :  4;
#else    /* Little Endian */
     unsigned      q_vi_upper                                :  4;
     unsigned      reserved1                                 :  6;
     unsigned      apcq_cpa                                  :  1;
     unsigned      apcq_cmplt                                :  1;
     unsigned      reserved0                                 : 20;
#endif
} ncp_ncap_PCQ_desc_atfc_reg2_t;

/*! @struct ncp_ncap_PCQ_desc_opcq_reg2_t
 *  @brief PCQ descriptor Register2
 *  @details Register 2 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_desc_opcq_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 18 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cbit_overide </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Completion bit override. NOTE: this field is only
 *        visible and configurable when the pcq_descr_enhanced
 *        register is set. When set, it prevents the completion
 *        bit in an opcq entry from being forced clear if the
 *        PCQ group has auto task flow completion enabled in
 *        the iPCQ/aPCQ descriptor table. Its reset value is
 *        0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpa_overide </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Consumer pointer advanced bit override. NOTE: this
 *        field is only visible, and configurable when the pcq_descr_enhanced
 *        register is set. When set, it prevents the consumer
 *        pointer advanced bit in an opcq entry from being forced
 *        clear if the PCQ group has auto task flow completion
 *        enabled in the iPCQ/aPCQ descriptor table. Its reset
 *        value is 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_desc_opcq_reg2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 18;
     unsigned      cbit_overide                              :  1;
     unsigned      cpa_overide                               :  1;
     unsigned      reserved1                                 :  8;
     unsigned      q_vi_upper                                :  4;
#else    /* Little Endian */
     unsigned      q_vi_upper                                :  4;
     unsigned      reserved1                                 :  8;
     unsigned      cpa_overide                               :  1;
     unsigned      cbit_overide                              :  1;
     unsigned      reserved0                                 : 18;
#endif
} ncp_ncap_PCQ_desc_opcq_reg2_t;

/*! @struct ncp_ncap_PCQ_stat_reg0_t
 *  @brief PCQ Status Register0
 *  @details Register 0 of the PCQ Status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_stat_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> CPU Index </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_index </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCAP Index </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_stat_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      cpu_index                                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      ncap_index                                :  8;
#else    /* Little Endian */
     unsigned      ncap_index                                :  8;
     unsigned      reserved1                                 :  8;
     unsigned      cpu_index                                 :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_PCQ_stat_reg0_t;

/*! @struct ncp_ncap_PCQ_stat_reg1_t
 *  @brief PCQ Status Register1
 *  @details Register 1 of the PCQ Status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_stat_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> PCQ overflow. When this bit is set, the pcq_integrity_chk_int
 *        bit is set in the grp_interrupt_status_table.status_r3
 *        register. Disabling the PCQ's enable_bit removes the
 *        signal that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index_increased_toggle_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> CPU index increased with toggle bit flip. The most
 *        significant bit of the PCQ's CPU index must toggle
 *        each time the index wraps. This bit sets if that bit
 *        flips when the index increases (before a wrap). When
 *        this bit is set, the pcq_integrity_chk_int bit is
 *        set in the grp_interrupt_status_table.status_r3 register.
 *        Disabling the PCQ's enable_bit removes the signal
 *        that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index_wrap_no_toggle_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> CPU index wrapped with no toggle bit flip. The most
 *        significant bit of the PCQ's CPU index must toggle
 *        each time the index wraps. This bit sets if that does
 *        not occur. When this bit is set, the pcq_integrity_chk_int
 *        bit is set in the grp_interrupt_status_table.status_r3
 *        register. Disabling the PCQ's enable_bit removes the
 *        signal that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_index_too_large </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> NCAP index too large. The index is >= programmed number_of_queue_entries
 *        of the PCQ. This only occurs if the number_of_queue_entries
 *        is changed after the PCQ has been enabled. When this
 *        bit is set, the pcq_integrity_chk_int bit is set in
 *        the grp_interrupt_status_table.status_r3 register.
 *        Disabling the PCQ's enable_bit removes the signal
 *        that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index_too_large </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> CPU index too large. The index is >= programmed number_of_queue_entries
 *        of the PCQ. When this bit is set, the pcq_integrity_chk_int
 *        bit is set in the grp_interrupt_status_table.status_r3
 *        register. Disabling the PCQ's enable_bit removes the
 *        signal that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param almost_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> almost_full </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> full </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> empty </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param depth </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> depth </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_stat_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      pcq_ovfl                                  :  1;
     unsigned      cpu_index_increased_toggle_flip           :  1;
     unsigned      cpu_index_wrap_no_toggle_flip             :  1;
     unsigned      ncap_index_too_large                      :  1;
     unsigned      cpu_index_too_large                       :  1;
     unsigned      reserved1                                 :  5;
     unsigned      almost_full                               :  1;
     unsigned      full                                      :  1;
     unsigned      empty                                     :  1;
     unsigned      reserved2                                 :  8;
     unsigned      depth                                     :  8;
#else    /* Little Endian */
     unsigned      depth                                     :  8;
     unsigned      reserved2                                 :  8;
     unsigned      empty                                     :  1;
     unsigned      full                                      :  1;
     unsigned      almost_full                               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      cpu_index_too_large                       :  1;
     unsigned      ncap_index_too_large                      :  1;
     unsigned      cpu_index_wrap_no_toggle_flip             :  1;
     unsigned      cpu_index_increased_toggle_flip           :  1;
     unsigned      pcq_ovfl                                  :  1;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_PCQ_stat_reg1_t;

/*! @struct ncp_ncap_PCQ_prod_stat_reg1_t
 *  @brief PCQ Status Register1
 *  @details Register 1 of the PCQ Status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_PCQ_prod_stat_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index_increased_toggle_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> CPU index increased with toggle bit flip. The most
 *        significant bit of the PCQ's CPU index must toggle
 *        each time the index wraps. This bit sets if that bit
 *        flips when the index increases (before a wrap). When
 *        this bit is set, the pcq_integrity_chk_int bit is
 *        set in the grp_interrupt_status_table.status_r3 register.
 *        Disabling the PCQ's enable_bit removes the signal
 *        that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index_wrap_no_toggle_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> CPU index wrapped with no toggle bit flip. The most
 *        significant bit of the PCQ's CPU index must toggle
 *        each time the index wraps. This bit sets if that does
 *        not occur. When this bit is set, the pcq_integrity_chk_int
 *        bit is set in the grp_interrupt_status_table.status_r3
 *        register. Disabling the PCQ's enable_bit removes the
 *        signal that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_index_too_large </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> NCAP index too large. The index is >= programmed number_of_queue_entries
 *        of the PCQ. This only occurs if the number_of_queue_entries
 *        is changed after the PCQ has been enabled. When this
 *        bit is set, the pcq_integrity_chk_int bit is set in
 *        the grp_interrupt_status_table.status_r3 register.
 *        Disabling the PCQ's enable_bit removes the signal
 *        that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index_too_large </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> CPU index too large. The index is >= programmed number_of_queue_entries
 *        of the PCQ. When this bit is set, the pcq_integrity_chk_int
 *        bit is set in the grp_interrupt_status_table.status_r3
 *        register. Disabling the PCQ's enable_bit removes the
 *        signal that sets the pcq_integrity_chk_int bit. Re-enabling
 *        the PCQ's enable_bit clears this bit.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param almost_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> almost_full </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> full </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> empty </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param depth </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> depth </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_PCQ_prod_stat_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      cpu_index_increased_toggle_flip           :  1;
     unsigned      cpu_index_wrap_no_toggle_flip             :  1;
     unsigned      ncap_index_too_large                      :  1;
     unsigned      cpu_index_too_large                       :  1;
     unsigned      reserved1                                 :  5;
     unsigned      almost_full                               :  1;
     unsigned      full                                      :  1;
     unsigned      empty                                     :  1;
     unsigned      reserved2                                 :  8;
     unsigned      depth                                     :  8;
#else    /* Little Endian */
     unsigned      depth                                     :  8;
     unsigned      reserved2                                 :  8;
     unsigned      empty                                     :  1;
     unsigned      full                                      :  1;
     unsigned      almost_full                               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      cpu_index_too_large                       :  1;
     unsigned      ncap_index_too_large                      :  1;
     unsigned      cpu_index_wrap_no_toggle_flip             :  1;
     unsigned      cpu_index_increased_toggle_flip           :  1;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_PCQ_prod_stat_reg1_t;

/*! @struct ncp_ncap_rcv_buff_pool_size_reg_a_t
 *  @brief NCAP Receive Buffer Pool Size
 *  @details Receive buffer pool sizes 0 and 1.  Indicates the size in bytes of the buffers for size 0 and size 1 of the corresponding buffer pool.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rcv_buff_pool_size_reg_a_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Size 0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Size 1 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rcv_buff_pool_size_reg_a_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      rbuff_size_0                              : 16;
     unsigned      rbuff_size_1                              : 16;
#else    /* Little Endian */
     unsigned      rbuff_size_1                              : 16;
     unsigned      rbuff_size_0                              : 16;
#endif
} ncp_ncap_rcv_buff_pool_size_reg_a_t;

/*! @struct ncp_ncap_rcv_buff_pool_size_reg_b_t
 *  @brief NCAP Receive Buffer Pool Size
 *  @details Receive buffer pool sizes 2 and 3.  Indicates the size in bytes of the buffers for size 2 and size 3 of the corresponding buffer pool.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rcv_buff_pool_size_reg_b_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Size 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Size 3 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rcv_buff_pool_size_reg_b_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      rbuff_size_2                              : 16;
     unsigned      rbuff_size_3                              : 16;
#else    /* Little Endian */
     unsigned      rbuff_size_3                              : 16;
     unsigned      rbuff_size_2                              : 16;
#endif
} ncp_ncap_rcv_buff_pool_size_reg_b_t;

/*! @struct ncp_ncap_cdar_entry_t
 *  @brief PIO mode data word
 *  @details CDAR local memory for PIO mode
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cdar_entry_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param pio_mode_word </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PIO mode word entry </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cdar_entry_t
 *
 */
 
typedef struct
{
     unsigned  int             pio_mode_word;
} ncp_ncap_cdar_entry_t;

/*! @struct ncp_ncap_cdar_entry_last_word_t
 *  @brief PIO mode last data word
 *  @details CDAR local memory word 129 for PIO mode
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cdar_entry_last_word_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param pio_mode_word_129 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PIO mode word 129 entry </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cdar_entry_last_word_t
 *
 */
 
typedef struct
{
     unsigned  int         pio_mode_word_129;
} ncp_ncap_cdar_entry_last_word_t;

/*! @struct ncp_ncap_ipcq_entry_drop_count_ipcq_er_t
 *  @brief PCQ Entry Drop Count iPCQ Error
 *  @details Counts the number of iPCQ entries dropped due to an iPCQ error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_entry_drop_count_ipcq_er_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_cnt_ipcq_er </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ errors include queue disabled, bad queue indexes
 *        (c or n index >= queue depth), queue full, and itask
 *        error bit set in received task.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_entry_drop_count_ipcq_er_t
 *
 */
 
typedef struct
{
     unsigned  int      itask_drop_cnt_ipcq_er;
} ncp_ncap_ipcq_entry_drop_count_ipcq_er_t;

/*! @struct ncp_ncap_itask_drop_count_no_buffer_t
 *  @brief Input Task Drop Count No Buffer
 *  @details Counts the number of input tasks dropped due to no receive buffer being available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_drop_count_no_buffer_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_cnt_no_buf </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of inut tasks dropped because no receive buffer
 *        was available
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_drop_count_no_buffer_t
 *
 */
 
typedef struct
{
     unsigned  int      itask_drop_cnt_no_buf;
} ncp_ncap_itask_drop_count_no_buffer_t;

/*! @struct ncp_ncap_otask_length_compare_reg_t
 *  @brief Ouput Task Length Compare Register
 *  @details Used in conjucnction with the otask_length_capture register to detect when an output task has a length >= the otask_length_compare_value field of this register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_length_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_len_compare_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Output task length compare enable. When this bit is
 *        set, output task length compare is enabled
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_length_compare_value </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task length compare value. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_length_compare_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_len_compare_en                      :  1;
     unsigned      reserved0                                 : 14;
     unsigned      otask_length_compare_value                : 17;
#else    /* Little Endian */
     unsigned      otask_length_compare_value                : 17;
     unsigned      reserved0                                 : 14;
     unsigned      otask_len_compare_en                      :  1;
#endif
} ncp_ncap_otask_length_compare_reg_t;

/*! @struct ncp_ncap_otask_length_capture_reg_t
 *  @brief Ouput Task Length Capture Register
 *  @details Used in conjunction with the otask_length_compare_reg.  If the otask_length_compare_reg otask_len_compare_en bit is set, the otask_len_exceeded bit of this register is clear, and the length of the current output task being sent by the NCAP is >= to the otask_length_compare_reg otask_length_compare_value field, then the otask_len_exceeded bit of this register is set, and the otask_length_capt_value field of this register is set to the length of the output task.  Once the otask_len_exceeded bit is set, comparing is stopped until the otask_len_exceeded bit is cleared by software
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_length_capture_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_len_exceeded </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Output task length exceeded. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_length_capt_value </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task length captured value. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_length_capture_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_len_exceeded                        :  1;
     unsigned      reserved0                                 : 14;
     unsigned      otask_length_capt_value                   : 17;
#else    /* Little Endian */
     unsigned      otask_length_capt_value                   : 17;
     unsigned      reserved0                                 : 14;
     unsigned      otask_len_exceeded                        :  1;
#endif
} ncp_ncap_otask_length_capture_reg_t;

/*! @struct ncp_ncap_otask_opcq_backpressure_t
 *  @brief Output Task oPCQ Backpressure
 *  @details Indicates when backpressure is asserted by the destinations fed by the oPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_opcq_backpressure_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_dest_bp </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to an output task destination.
 *        Software can monitor this register to determine when
 *        backpressure is being applied by the corresponding
 *        destination.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_opcq_backpressure_t
 *
 */
 
typedef struct
{
     unsigned  int             otask_dest_bp;
} ncp_ncap_otask_opcq_backpressure_t;

/*! @struct ncp_ncap_rcv_buf_pool_tsi_bp_t
 *  @brief Receive Buffer Pool Input Task Backpressure
 *  @details Indicates when backpressure is asserted to the task start interface for the corresponding iPCQ because no receive buffers are available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rcv_buf_pool_tsi_bp_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_ipcq_bp </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to an iPCQ, and indicates when
 *        bacpressure is applied to the task start interface
 *        for that iPCQ because no receive buffers are available
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rcv_buf_pool_tsi_bp_t
 *
 */
 
typedef struct
{
     unsigned  int         rbp_depth_ipcq_bp;
} ncp_ncap_rcv_buf_pool_tsi_bp_t;

/*! @struct ncp_ncap_tfc_count_reg_t
 *  @brief Task Flow Completion Counters
 *  @details Register 0 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_tfc_count_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param xmit_complete_counter </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Xmit Complete Counter </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param completion_counter </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Completion Counter </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_tfc_count_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      xmit_complete_counter                     : 16;
     unsigned      completion_counter                        : 16;
#else    /* Little Endian */
     unsigned      completion_counter                        : 16;
     unsigned      xmit_complete_counter                     : 16;
#endif
} ncp_ncap_tfc_count_reg_t;

/*! @struct ncp_ncap_mpb_depths_reg0_t
 *  @brief MME Pool Buffer FIFO Depths Register0
 *  @details MME Pool Buffer FIFO Depths for Size0 and Size1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_depths_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size0 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size0[12:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size1[11:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_depths_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      mpb_depth_size0                           : 13;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_depth_size1                           : 12;
#else    /* Little Endian */
     unsigned      mpb_depth_size1                           : 12;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_depth_size0                           : 13;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_mpb_depths_reg0_t;

/*! @struct ncp_ncap_mpb_depths_reg1_t
 *  @brief MME Pool Buffer FIFO Depths Register1
 *  @details MME Pool Buffer FIFO Depths for Size2 and Size3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_depths_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size2 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size2[10:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size3 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size3[10:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_depths_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      mpb_depth_size2                           : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_depth_size3                           : 11;
#else    /* Little Endian */
     unsigned      mpb_depth_size3                           : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_depth_size2                           : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_ncap_mpb_depths_reg1_t;

/*! @struct ncp_ncap_rbp_itask_bp_en_reg_t
 *  @brief Receive Buffer Pool Input Task Backpressure Enable
 *  @details Used in conjunction with rbp_itask_bp_incld_bsiz_reg. Enables NCAP to TIL input task backpressure on a per iPCQ basis when receive buffers are not available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rbp_itask_bp_en_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_itask_bp_en </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to an iPCQ. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rbp_itask_bp_en_reg_t
 *
 */
 
typedef struct
{
     unsigned  int           rbp_itask_bp_en;
} ncp_ncap_rbp_itask_bp_en_reg_t;

/*! @struct ncp_ncap_rbp_itask_bp_incld_bsiz_reg_t
 *  @brief Receive Buffer Pool Input Task Backpressure Included Buffer Size
 *  @details Used in conjunction with rbp_itask_bp_en_reg. Selects buffer sizes to be included to generate backpressure.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rbp_itask_bp_incld_bsiz_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_itask_bp_incld_bsiz </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to a receive buffer pool size.
 *        At least one bit must be set for receive buffer pool
 *        NCAP to TIL input task backpressure to be asserted
 *        for any iPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rbp_itask_bp_incld_bsiz_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      rbp_itask_bp_incld_bsiz                   :  4;
#else    /* Little Endian */
     unsigned      rbp_itask_bp_incld_bsiz                   :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_rbp_itask_bp_incld_bsiz_reg_t;

/*! @struct ncp_ncap_pio_lock_reg_t
 *  @brief NCAP PIO Lock Register
 *  @details Provides a semaphore mechanism for multiprocessor sharing of the configuration interface in PIO mode.  Address bits 6:2 form the ID address which indicates the ID of the processor accessing this register.  A processor reads this register to acquire control.  Reading a 0 indicates that the processor has control, and the register bit selected by the ID address is set.  Reading other than 0 means that the interface is not available.  The processor in control must write anything to its ID address to clear the register to allow control to pass to another processor.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pio_lock_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param proc_id </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Only one bit will ever be set at a time. Indicates
 *        ID of processor that has control of configuration
 *        interface.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pio_lock_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                   proc_id;
} ncp_ncap_pio_lock_reg_t;

/*! @struct ncp_ncap_pio_lock_cown_reg_t
 *  @brief NCAP PIO Lock Current Owner Register
 *  @details This register provides the ability to read the ncap_pio_lock register without engaging the semaphore mechanism.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pio_lock_cown_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param proc_id </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Only one bit will ever be set at a time. Indicates
 *        ID of processor that has control of configuration
 *        interface.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pio_lock_cown_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                   proc_id;
} ncp_ncap_pio_lock_cown_reg_t;

/*! @struct ncp_ncap_otbp_vi_reg0_t
 *  @brief Output Task Backpressure Virtual Index Register0
 *  @details Upper 4 bits of virtual index where output task backpressure is written into memory.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otbp_vi_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Memory select. 0 - system memory, 1 - AXI memory </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Memory pool ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output Task Backpressure Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otbp_vi_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved1                                 :  3;
     unsigned      pool_id                                   :  5;
     unsigned      reserved2                                 : 12;
     unsigned      otbp_vi_upper                             :  4;
#else    /* Little Endian */
     unsigned      otbp_vi_upper                             :  4;
     unsigned      reserved2                                 : 12;
     unsigned      pool_id                                   :  5;
     unsigned      reserved1                                 :  3;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_otbp_vi_reg0_t;

/*! @struct ncp_ncap_otbp_vi_reg1_t
 *  @brief Output Task Backpressure Virtual Index Register1
 *  @details Lower 32 bits of virtual index where output task backpressure is written into memory.  Bits 1:0 are forced to 0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otbp_vi_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_vi_lower </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output Task Backpressure Virtual Index lower bits[31:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 32 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otbp_vi_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otbp_vi_lower                             : 30;
     unsigned      reserved0                                 :  2;
#else    /* Little Endian */
     unsigned      reserved0                                 :  2;
     unsigned      otbp_vi_lower                             : 30;
#endif
} ncp_ncap_otbp_vi_reg1_t;

/*! @struct ncp_ncap_software_pgit_load_poke_reg_t
 *  @brief PGIT Software Load Poke Register
 *  @details CPU can write to this register to force the shortening of the delay (using delay_grp_load_timer register) for the current cycle of the timer for the PGIT to load CPU Indexes.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_software_pgit_load_poke_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param software_load_poke_grp </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Poke the PGIT CPU index load timers. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_software_pgit_load_poke_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      software_load_poke_grp                    :  8;
#else    /* Little Endian */
     unsigned      software_load_poke_grp                    :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_software_pgit_load_poke_reg_t;

/*! @struct ncp_ncap_software_pgit_load_poke_woset_reg_t
 *  @brief PGIT Software Load Poke Register
 *  @details This is an alias of the pgit_software_load_poke_reg register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_software_pgit_load_poke_woset_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param software_load_poke_grp </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Poke the PGIT CPU index load timers. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_software_pgit_load_poke_woset_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      software_load_poke_grp                    :  8;
#else    /* Little Endian */
     unsigned      software_load_poke_grp                    :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_software_pgit_load_poke_woset_reg_t;

/*! @struct ncp_ncap_hw_load_poke_flags_reg_t
 *  @brief Hardware Load Poke Flags
 *  @details Flags that set during a hardware load poke.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_hw_load_poke_flags_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp_load_flag </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware group load poke flags. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_hw_load_poke_flags_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      hardware_grp_load_flag                    :  8;
#else    /* Little Endian */
     unsigned      hardware_grp_load_flag                    :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_hw_load_poke_flags_reg_t;

/*! @struct ncp_ncap_overall_int_stat_reg_t
 *  @brief Overall Interrupt Status Register
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table and the grp_interrupt_enable_table are both set.  Any such pairing causes one of the interrupt pins to be asserted if enabled.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_overall_int_stat_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param non_grp_int_grp_int_reg_1_or_2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> At least one non-group interrupt status and enable
 *        bit pair = 'b11 in grp_interrupt_status/enable_table...status/en_r|1..2|
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> At least one group 5 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> At least one group 4 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> At least one group 3 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> At least one group 2 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> At least one group 1 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> At least one group 0 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_int_reg0_int </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> These bits correspond to the interrupt status and
 *        enable bit pairs in grp_interrupt_status/enable_table...status/en_r0.
 *        Each bit is set for every corresponding status and
 *        enable pair that = 'b11. These interrupts are service
 *        interrupts that indicate input task arrival, output
 *        task delivery, etc.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_overall_int_stat_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      non_grp_int_grp_int_reg_1_or_2            :  1;
     unsigned      grp5_int_grp_int_reg1                     :  1;
     unsigned      grp4_int_grp_int_reg1                     :  1;
     unsigned      grp3_int_grp_int_reg1                     :  1;
     unsigned      grp2_int_grp_int_reg1                     :  1;
     unsigned      grp1_int_grp_int_reg1                     :  1;
     unsigned      grp0_int_grp_int_reg1                     :  1;
     unsigned      grp_int_reg0_int                          : 25;
#else    /* Little Endian */
     unsigned      grp_int_reg0_int                          : 25;
     unsigned      grp0_int_grp_int_reg1                     :  1;
     unsigned      grp1_int_grp_int_reg1                     :  1;
     unsigned      grp2_int_grp_int_reg1                     :  1;
     unsigned      grp3_int_grp_int_reg1                     :  1;
     unsigned      grp4_int_grp_int_reg1                     :  1;
     unsigned      grp5_int_grp_int_reg1                     :  1;
     unsigned      non_grp_int_grp_int_reg_1_or_2            :  1;
#endif
} ncp_ncap_overall_int_stat_reg_t;

/*! @struct ncp_ncap_gic_ctrl_reg_t
 *  @brief GIC Interrupt Control Register
 *  @details Provides control for the state of some of the interrupt outputs that connect to the GIC (generic interrupt controller).
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_gic_ctrl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hw_int_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware Alarm Interrupt Enable. This bit enables
 *        the GIC hardware interrupt output ncap_hw_int[0].
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_gic_ctrl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      hw_int_en                                 :  1;
#else    /* Little Endian */
     unsigned      hw_int_en                                 :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_gic_ctrl_reg_t;

/*! @struct ncp_ncap_gic_ctrl_reg_woclr_t
 *  @brief GIC Interrupt Control Register
 *  @details This is an alias of the gic_ctrl register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_gic_ctrl_reg_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hw_int_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware Alarm Interrupt Enable. This bit enables
 *        the GIC hardware interrupt output ncap_hw_int[0].
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_gic_ctrl_reg_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      hw_int_en                                 :  1;
#else    /* Little Endian */
     unsigned      hw_int_en                                 :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_gic_ctrl_reg_woclr_t;

/*! @struct ncp_ncap_gic_ctrl_reg_woset_t
 *  @brief GIC Interrupt Control Register
 *  @details This is an alias of the gic_ctrl register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_gic_ctrl_reg_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hw_int_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware Alarm Interrupt Enable. This bit enables
 *        the GIC hardware interrupt output ncap_hw_int[0].
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_gic_ctrl_reg_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      hw_int_en                                 :  1;
#else    /* Little Endian */
     unsigned      hw_int_en                                 :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_gic_ctrl_reg_woset_t;

/*! @struct ncp_ncap_int_output_mode_reg_t
 *  @brief Interrupt Output Mode
 *  @details Programs the mode (level_triggered, or edge_triggered) for GIC interrupt pins ncap_mpic_int[15:0]. When in edge_triggered mode, the length of the pulse is programmed by the edget_int_pl register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_int_output_mode_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Mode. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_int_output_mode_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      mode                                      :  1;
#else    /* Little Endian */
     unsigned      mode                                      :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_int_output_mode_reg_t;

/*! @struct ncp_ncap_edget_int_pl_reg_t
 *  @brief Edge Triggered Interrupt Pulse Length
 *  @details Programs the length in number of clock cycles of the pulse on the PCQ group service interrupt pins (ncap_mpic_int[15:0]) when the int_output_mode register is set to edge_triggered mode.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_edget_int_pl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param edget_int_pl </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Edge Triggered Interrupt Pulse Length. Sets the length
 *        in number of clock cycles of the pulse on the PCQ
 *        group service interrupt pins (ncap_mpic_int[15:0])
 *        when the int_output_mode register is set to edge_triggered
 *        mode. If set to 0, the pulse length is 1 clock cycle.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_edget_int_pl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      edget_int_pl                              :  4;
#else    /* Little Endian */
     unsigned      edget_int_pl                              :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_edget_int_pl_reg_t;

/*! @struct ncp_ncap_status_reg0_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status. The status maps directly to interrupt pins ncap_mpic_int[15:0].
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_status_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_status_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_status_reg0_t;

/*! @struct ncp_ncap_en_reg0_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_en_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_en_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_en_reg0_t;

/*! @struct ncp_ncap_en_reg0_woclr_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r0 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_en_reg0_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_en_reg0_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_en_reg0_woclr_t;

/*! @struct ncp_ncap_en_reg0_woset_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r0 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_en_reg0_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_en_reg0_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_en_reg0_woset_t;

/*! @struct ncp_ncap_force_reg0_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status Register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status Register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_force_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Force </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_force_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_force_reg0_t;

/*! @struct ncp_ncap_status_reg1_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status. The status maps to interrupt pin ncap_hw_int[0].
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_status_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ie_mii_hlb_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> iPCQ Manager iPCQ entry message input interface head
 *        of line blocked Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_smon_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> NCAP system monitor interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> NCAP iPCQ manager NLINK error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NCAP oPCQ manager NLINK error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> NCAP mPCQ manager NLINK error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_mem_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> NCAP PGIT memory error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NCAP CAAL interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_integrity_chk_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> PCQ integrity check interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ manager fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ manager fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ manager fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> mPCQ manager fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ manager fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> mPCQ entry write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ppgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> PPGIT memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq memory read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq memory write error Status </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_status_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
#else    /* Little Endian */
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_status_reg1_t;

/*! @struct ncp_ncap_en_reg1_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_en_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ie_mii_hlb_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> iPCQ Manager iPCQ entry message input interface head
 *        of line blocked Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_smon_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> NCAP system monitor interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> NCAP iPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NCAP oPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> NCAP mPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_mem_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> NCAP PGIT memory error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NCAP CAAL interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_integrity_chk_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> PCQ integrity check interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> mPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> mPCQ entry write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ppgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> PPGIT memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq memory write error Enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_en_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
#else    /* Little Endian */
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_en_reg1_t;

/*! @struct ncp_ncap_en_reg1_woclr_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r3 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_en_reg1_woclr_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ie_mii_hlb_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> iPCQ Manager iPCQ entry message input interface head
 *        of line blocked Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_smon_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> NCAP system monitor interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> NCAP iPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NCAP oPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> NCAP mPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_mem_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> NCAP PGIT memory error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NCAP CAAL interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_integrity_chk_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> PCQ integrity check interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> mPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> mPCQ entry write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ppgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> PPGIT memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq memory write error Enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_en_reg1_woclr_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
#else    /* Little Endian */
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_en_reg1_woclr_t;

/*! @struct ncp_ncap_en_reg1_woset_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r3 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_en_reg1_woset_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ie_mii_hlb_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> iPCQ Manager iPCQ entry message input interface head
 *        of line blocked Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_smon_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> NCAP system monitor interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> NCAP iPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NCAP oPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> NCAP mPCQ manager NLINK error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_mem_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> NCAP PGIT memory error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NCAP CAAL interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_integrity_chk_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> PCQ integrity check interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ manager fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> mPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> mPCQ entry write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ppgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> PPGIT memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq memory write error Enable </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_en_reg1_woset_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
#else    /* Little Endian */
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_en_reg1_woset_t;

/*! @struct ncp_ncap_force_reg1_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status Register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status Register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_force_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ie_mii_hlb_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> iPCQ Manager iPCQ entry message input interface head
 *        of line blocked Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_smon_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> NCAP system monitor interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> NCAP iPCQ manager NLINK error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NCAP oPCQ manager NLINK error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> NCAP mPCQ manager NLINK error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_mem_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> NCAP PGIT memory error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NCAP CAAL interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_integrity_chk_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> PCQ integrity check interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ manager fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ manager fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ manager fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> mPCQ manager fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ manager fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> mPCQ entry write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ppgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> PPGIT memory read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq memory read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq memory write error Force </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_force_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
#else    /* Little Endian */
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_force_reg1_t;

/*! @struct ncp_ncap_driving_int_status_reg0_t
 *  @brief Driving Interrupt Status Register 0
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table.status_r0, grp_interrupt_enable_table.en_r0, and int_output_mode are causing interrupt pins to be driven high.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_driving_int_status_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_driving_int_status_reg0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      reserved1                                 :  8;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_driving_int_status_reg0_t;

/*! @struct ncp_ncap_driving_int_status_reg1_t
 *  @brief Driving Interrupt Status Register 1
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table.status_r1, grp_interrupt_enable_table.en_r1, and gic_ctrl are causing interrupt pin ncap_hw_int[0] to be driven high.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_driving_int_status_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ie_mii_hlb_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> iPCQ Manager iPCQ entry message input interface head
 *        of line blocked Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_smon_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> NCAP system monitor interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> NCAP iPCQ manager NLINK error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NCAP oPCQ manager NLINK error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpm_nlink_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> NCAP mPCQ manager NLINK error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_mem_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> NCAP PGIT memory error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> NCAP CAAL interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_integrity_chk_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> PCQ integrity check interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ manager fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ manager fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ manager fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> mPCQ manager fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ manager fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> mPCQ entry write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ppgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> PPGIT memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq memory read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq memory write error Status </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_driving_int_status_reg1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
#else    /* Little Endian */
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      ppgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      mpcq_entry_wr_er_int                      :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ipm_fifo_overflow_underflow_int           :  1;
     unsigned      opm_fifo_overflow_underflow_int           :  1;
     unsigned      mpm_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ipm_fifo_par_err_int                      :  1;
     unsigned      opm_fifo_par_err_int                      :  1;
     unsigned      mpm_fifo_par_err_int                      :  1;
     unsigned      pcq_integrity_chk_int                     :  1;
     unsigned      ncap_caal_int                             :  1;
     unsigned      ncap_pgit_mem_err_int                     :  1;
     unsigned      ncap_mpm_nlink_er_int                     :  1;
     unsigned      ncap_opm_nlink_er_int                     :  1;
     unsigned      ncap_ipm_nlink_er_int                     :  1;
     unsigned      ncap_smon_int                             :  1;
     unsigned      ipm_ie_mii_hlb_int                        :  1;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_driving_int_status_reg1_t;

/*! @struct ncp_ncap_opm_fifo_full_empty_status_reg_0_t
 *  @brief oPCQ Manager FIFO Full Empty Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_full_empty_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_full_empty_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_reng_srbf_fifo_full_empty_pair15     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair14     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair13     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair12     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair11     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair0      :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_srbf_fifo_full_empty_pair0      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair11     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair12     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair13     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair14     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair15     :  2;
#endif
} ncp_ncap_opm_fifo_full_empty_status_reg_0_t;

/*! @struct ncp_ncap_opm_fifo_full_empty_status_reg_1_t
 *  @brief oPCQ Manager FIFO Full Empty Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_full_empty_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_full_empty_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_reng_arbf_fifo_full_empty_pair15     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair14     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair13     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair12     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair11     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair0      :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_arbf_fifo_full_empty_pair0      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair11     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair12     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair13     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair14     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair15     :  2;
#endif
} ncp_ncap_opm_fifo_full_empty_status_reg_1_t;

/*! @struct ncp_ncap_opm_fifo_full_empty_status_reg_2_t
 *  @brief oPCQ Manager FIFO Full Empty Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_full_empty_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_full_empty_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_reng_srbf_fifo_full_empty_pair15    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair14    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair13    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair12    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair11    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair0     :  2;
#else    /* Little Endian */
     unsigned      otask_reng_srbf_fifo_full_empty_pair0     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair11    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair12    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair13    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair14    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair15    :  2;
#endif
} ncp_ncap_opm_fifo_full_empty_status_reg_2_t;

/*! @struct ncp_ncap_opm_fifo_full_empty_status_reg_3_t
 *  @brief oPCQ Manager FIFO Full Empty Status Register 3
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_full_empty_status_reg_3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_full_empty_status_reg_3_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_reng_arbf_fifo_full_empty_pair15    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair14    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair13    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair12    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair11    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair0     :  2;
#else    /* Little Endian */
     unsigned      otask_reng_arbf_fifo_full_empty_pair0     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair11    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair12    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair13    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair14    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair15    :  2;
#endif
} ncp_ncap_opm_fifo_full_empty_status_reg_3_t;

/*! @struct ncp_ncap_opm_fifo_full_empty_status_reg_4_t
 *  @brief oPCQ Manager FIFO Full Empty Status Register 4
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_full_empty_status_reg_4_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output data buffer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ index FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_update_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ index update FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT read FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT write FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Pointer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine request FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine request FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_full_empty_status_reg_4_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      odb_fifo_full_empty_pair                  :  2;
     unsigned      opcq_index_fifo_full_empty_pair           :  2;
     unsigned      opcq_index_update_fifo_full_empty_pair    :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      opcq_entry_fifo_full_empty_pair           :  2;
     unsigned      ptr_fifo_full_empty_pair                  :  2;
     unsigned      otask_reng_req_fifo_full_empty_pair       :  2;
     unsigned      opcq_reng_req_fifo_full_empty_pair        :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_req_fifo_full_empty_pair        :  2;
     unsigned      otask_reng_req_fifo_full_empty_pair       :  2;
     unsigned      ptr_fifo_full_empty_pair                  :  2;
     unsigned      opcq_entry_fifo_full_empty_pair           :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      opcq_index_update_fifo_full_empty_pair    :  2;
     unsigned      opcq_index_fifo_full_empty_pair           :  2;
     unsigned      odb_fifo_full_empty_pair                  :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_ncap_opm_fifo_full_empty_status_reg_4_t;

/*! @struct ncp_ncap_ipm_fifo_full_empty_status_reg_0_t
 *  @brief iPCQ Manager FIFO Full Empty Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_full_empty_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_full_empty_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reng_srbf_fifo_full_empty_pair15          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair14          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair13          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair12          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair12          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair13          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair14          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair15          :  2;
#endif
} ncp_ncap_ipm_fifo_full_empty_status_reg_0_t;

/*! @struct ncp_ncap_ipm_fifo_full_empty_status_reg_1_t
 *  @brief iPCQ Manager FIFO Full Empty Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_full_empty_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_full_empty_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reng_arbf_fifo_full_empty_pair15          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair14          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair13          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair12          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair12          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair13          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair14          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair15          :  2;
#endif
} ncp_ncap_ipm_fifo_full_empty_status_reg_1_t;

/*! @struct ncp_ncap_ipm_fifo_full_empty_status_reg_2_t
 *  @brief iPCQ Manager FIFO Full Empty Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_full_empty_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param debug_data_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Debug data FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Input task data buffer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ptr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Input task pointer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Task contents read interface FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Input task header FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Input task queue ID FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Input task delete task ID FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT read FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> PGIT write FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO full empty status pair. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_full_empty_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      debug_data_fifo_full_empty_pair           :  2;
     unsigned      idb_fifo_full_empty_pair                  :  2;
     unsigned      itask_ptr_fifo_full_empty_pair            :  2;
     unsigned      tcri_data_fifo_full_empty_pair            :  2;
     unsigned      itask_header_fifo_full_empty_pair         :  2;
     unsigned      itask_qid_fifo_full_empty_pair            :  2;
     unsigned      itask_delete_tid_fifo_full_empty_pair     :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      reng_req_fifo_full_empty_pair             :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      itask_delete_tid_fifo_full_empty_pair     :  2;
     unsigned      itask_qid_fifo_full_empty_pair            :  2;
     unsigned      itask_header_fifo_full_empty_pair         :  2;
     unsigned      tcri_data_fifo_full_empty_pair            :  2;
     unsigned      itask_ptr_fifo_full_empty_pair            :  2;
     unsigned      idb_fifo_full_empty_pair                  :  2;
     unsigned      debug_data_fifo_full_empty_pair           :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_ipm_fifo_full_empty_status_reg_2_t;

/*! @struct ncp_ncap_npgit_fifo_full_empty_status_reg_0_t
 *  @brief NCAP PCQ Group Index Table FIFO Full Empty Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_full_empty_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_full_empty_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_npgit_fifo_full_empty_status_reg_0_t;

/*! @struct ncp_ncap_npgit_fifo_full_empty_status_reg_1_t
 *  @brief NCAP PCQ Group Index Table FIFO Full Empty Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_full_empty_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_full_empty_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_npgit_fifo_full_empty_status_reg_1_t;

/*! @struct ncp_ncap_npgit_fifo_full_empty_status_reg_2_t
 *  @brief NCAP PCQ Group Index Table FIFO Full Empty Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_full_empty_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO full empty status pair. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_full_empty_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      reng_req_fifo_full_empty_pair             :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_npgit_fifo_full_empty_status_reg_2_t;

/*! @struct ncp_ncap_mpb_input_fifo_full_empty_status_reg_t
 *  @brief MME Pool Buffer Input FIFO Full Empty Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_input_fifo_full_empty_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME input FIFO full empty status pair. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_input_fifo_full_empty_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      mpb_input_fifo_full_empty_pair            :  2;
#else    /* Little Endian */
     unsigned      mpb_input_fifo_full_empty_pair            :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_mpb_input_fifo_full_empty_status_reg_t;

/*! @struct ncp_ncap_cpm_fifo_full_empty_status_reg_t
 *  @brief Congiguration Ring Master Node FIFO Full Empty Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_fifo_full_empty_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> PGIT read FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> PGIT write FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_weng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> CPM Write engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_weng_wdb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> CPM Write engine write data buffer FIFO full empty
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CPM Read engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CPM Read engine AXI memory reorder buffer FIFO full
 *        empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CPM Read engine AXI memory reorder buffer FIFO full
 *        empty status pair 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CPM Read engine system memory reorder buffer FIFO
 *        full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPM Read engine system memory reorder buffer FIFO
 *        full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_fifo_full_empty_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      cpm_weng_req_fifo_full_empty_pair         :  2;
     unsigned      cpm_weng_wdb_fifo_full_empty_pair         :  2;
     unsigned      cpm_reng_req_fifo_full_empty_pair         :  2;
     unsigned      cpm_reng_arbf_fifo_full_empty_pair1       :  2;
     unsigned      cpm_reng_arbf_fifo_full_empty_pair0       :  2;
     unsigned      cpm_reng_srbf_fifo_full_empty_pair1       :  2;
     unsigned      cpm_reng_srbf_fifo_full_empty_pair0       :  2;
#else    /* Little Endian */
     unsigned      cpm_reng_srbf_fifo_full_empty_pair0       :  2;
     unsigned      cpm_reng_srbf_fifo_full_empty_pair1       :  2;
     unsigned      cpm_reng_arbf_fifo_full_empty_pair0       :  2;
     unsigned      cpm_reng_arbf_fifo_full_empty_pair1       :  2;
     unsigned      cpm_reng_req_fifo_full_empty_pair         :  2;
     unsigned      cpm_weng_wdb_fifo_full_empty_pair         :  2;
     unsigned      cpm_weng_req_fifo_full_empty_pair         :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_ncap_cpm_fifo_full_empty_status_reg_t;

/*! @struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_0_t
 *  @brief oPCQ Manager FIFO Overflow Underflow Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_overflow_underflow_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair15  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair15  :  2;
#endif
} ncp_ncap_opm_fifo_overflow_underflow_status_reg_0_t;

/*! @struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_1_t
 *  @brief oPCQ Manager FIFO Overflow Underflow Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_overflow_underflow_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair15  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair15  :  2;
#endif
} ncp_ncap_opm_fifo_overflow_underflow_status_reg_1_t;

/*! @struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_2_t
 *  @brief oPCQ Manager FIFO Overflow Underflow Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_overflow_underflow_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair15  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair15  :  2;
#endif
} ncp_ncap_opm_fifo_overflow_underflow_status_reg_2_t;

/*! @struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_3_t
 *  @brief oPCQ Manager FIFO Overflow Underflow Status Register 3
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_overflow_underflow_status_reg_3_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair15  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair15  :  2;
#endif
} ncp_ncap_opm_fifo_overflow_underflow_status_reg_3_t;

/*! @struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_4_t
 *  @brief oPCQ Manager FIFO Overflow Underflow Status Register 4
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_overflow_underflow_status_reg_4_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output data buffer FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ index FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_update_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ index update FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT read FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT write FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Pointer FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine request FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine request FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_overflow_underflow_status_reg_4_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      odb_fifo_overflow_underflow_pair          :  2;
     unsigned      opcq_index_fifo_overflow_underflow_pair   :  2;
     unsigned      opcq_index_update_fifo_overflow_underflow_pair  :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      opcq_entry_fifo_overflow_underflow_pair   :  2;
     unsigned      ptr_fifo_overflow_underflow_pair          :  2;
     unsigned      otask_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      opcq_reng_req_fifo_overflow_underflow_pair  :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      otask_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      ptr_fifo_overflow_underflow_pair          :  2;
     unsigned      opcq_entry_fifo_overflow_underflow_pair   :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      opcq_index_update_fifo_overflow_underflow_pair  :  2;
     unsigned      opcq_index_fifo_overflow_underflow_pair   :  2;
     unsigned      odb_fifo_overflow_underflow_pair          :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_ncap_opm_fifo_overflow_underflow_status_reg_4_t;

/*! @struct ncp_ncap_ipm_fifo_overflow_underflow_status_reg_0_t
 *  @brief iPCQ Manager FIFO Overflow Underflow Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_overflow_underflow_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_overflow_underflow_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reng_srbf_fifo_overflow_underflow_pair15  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair15  :  2;
#endif
} ncp_ncap_ipm_fifo_overflow_underflow_status_reg_0_t;

/*! @struct ncp_ncap_ipm_fifo_overflow_underflow_status_reg_1_t
 *  @brief iPCQ Manager FIFO Overflow Underflow Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_overflow_underflow_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 15.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 14.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 13.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 12.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_overflow_underflow_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reng_arbf_fifo_overflow_underflow_pair15  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair12  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair13  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair14  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair15  :  2;
#endif
} ncp_ncap_ipm_fifo_overflow_underflow_status_reg_1_t;

/*! @struct ncp_ncap_ipm_fifo_overflow_underflow_status_reg_2_t
 *  @brief iPCQ Manager FIFO Overflow Underflow Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_overflow_underflow_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param debug_data_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Debug data FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Input task dta buffer FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ptr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Input task pointer FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Task contents read interface FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Input task header FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Input task queue ID FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Input task delete task ID FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT read FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> PGIT write FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_overflow_underflow_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      debug_data_fifo_overflow_underflow_pair   :  2;
     unsigned      idb_fifo_overflow_underflow_pair          :  2;
     unsigned      itask_ptr_fifo_overflow_underflow_pair    :  2;
     unsigned      tcri_data_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_header_fifo_overflow_underflow_pair  :  2;
     unsigned      itask_qid_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_delete_tid_fifo_overflow_underflow_pair  :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      itask_delete_tid_fifo_overflow_underflow_pair  :  2;
     unsigned      itask_qid_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_header_fifo_overflow_underflow_pair  :  2;
     unsigned      tcri_data_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_ptr_fifo_overflow_underflow_pair    :  2;
     unsigned      idb_fifo_overflow_underflow_pair          :  2;
     unsigned      debug_data_fifo_overflow_underflow_pair   :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_ipm_fifo_overflow_underflow_status_reg_2_t;

/*! @struct ncp_ncap_npgit_fifo_overflow_underflow_status_reg_0_t
 *  @brief NCAP PCQ Group Index Table FIFO Overflow Underflow Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_overflow_underflow_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_overflow_underflow_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_npgit_fifo_overflow_underflow_status_reg_0_t;

/*! @struct ncp_ncap_npgit_fifo_overflow_underflow_status_reg_1_t
 *  @brief NCAP PCQ Group Index Table FIFO Overflow Underflow Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_overflow_underflow_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_overflow_underflow_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_npgit_fifo_overflow_underflow_status_reg_1_t;

/*! @struct ncp_ncap_npgit_fifo_overflow_underflow_status_reg_2_t
 *  @brief NCAP PCQ Group Index Table FIFO Overflow Underflow Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_overflow_underflow_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_overflow_underflow_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_npgit_fifo_overflow_underflow_status_reg_2_t;

/*! @struct ncp_ncap_mpb_input_fifo_overflow_underflow_status_reg_t
 *  @brief MME Pool Buffer Input FIFO Overflow Underflow Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_input_fifo_overflow_underflow_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME input FIFO overflow underflow status pair. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_input_fifo_overflow_underflow_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      mpb_input_fifo_overflow_underflow_pair    :  2;
#else    /* Little Endian */
     unsigned      mpb_input_fifo_overflow_underflow_pair    :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_mpb_input_fifo_overflow_underflow_status_reg_t;

/*! @struct ncp_ncap_cpm_fifo_overflow_underflow_status_reg_t
 *  @brief Congiguration Ring Master Node FIFO Overflow Underflow Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_fifo_overflow_underflow_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> PGIT read FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> PGIT write FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_weng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> CPM Write engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_weng_wdb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> CPM Write engine write data buffer FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CPM Read engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CPM Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CPM Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CPM Read engine system memory reorder buffer FIFO
 *        overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPM Read engine system memory reorder buffer FIFO
 *        overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_fifo_overflow_underflow_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      cpm_weng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      cpm_weng_wdb_fifo_overflow_underflow_pair  :  2;
     unsigned      cpm_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      cpm_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cpm_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      cpm_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cpm_reng_srbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      cpm_reng_srbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      cpm_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cpm_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      cpm_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cpm_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      cpm_weng_wdb_fifo_overflow_underflow_pair  :  2;
     unsigned      cpm_weng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_ncap_cpm_fifo_overflow_underflow_status_reg_t;

/*! @struct ncp_ncap_opm_fifo_par_err_status_reg_0_t
 *  @brief oPCQ Manager FIFO Parity Error Status Register 0
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_par_err_status_reg_0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry read engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        parity error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO parity error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_par_err_status_reg_0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      opcq_reng_req_fifo_par_err_status         :  1;
     unsigned      opcq_reng_arbf_fifo_par_err_status        : 12;
     unsigned      opcq_reng_srbf_fifo_par_err_status        : 12;
#else    /* Little Endian */
     unsigned      opcq_reng_srbf_fifo_par_err_status        : 12;
     unsigned      opcq_reng_arbf_fifo_par_err_status        : 12;
     unsigned      opcq_reng_req_fifo_par_err_status         :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_opm_fifo_par_err_status_reg_0_t;

/*! @struct ncp_ncap_opm_fifo_par_err_status_reg_1_t
 *  @brief oPCQ Manager FIFO Parity Error Status Register 1
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_par_err_status_reg_1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Output task read engine request FIFO parity error
 *        flag.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO parity error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO parity error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_par_err_status_reg_1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      otask_reng_req_fifo_par_err_status        :  1;
     unsigned      otask_reng_arbf_fifo_par_err_status       : 12;
     unsigned      otask_reng_srbf_fifo_par_err_status       : 12;
#else    /* Little Endian */
     unsigned      otask_reng_srbf_fifo_par_err_status       : 12;
     unsigned      otask_reng_arbf_fifo_par_err_status       : 12;
     unsigned      otask_reng_req_fifo_par_err_status        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_opm_fifo_par_err_status_reg_1_t;

/*! @struct ncp_ncap_opm_fifo_par_err_status_reg_2_t
 *  @brief oPCQ Manager FIFO Parity Error Status Register 2
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_fifo_par_err_status_reg_2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ entry FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Pointer FIFO parity error flag. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_fifo_par_err_status_reg_2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opcq_entry_fifo_par_err_status            :  1;
     unsigned      ptr_fifo_par_err_status                   :  1;
#else    /* Little Endian */
     unsigned      ptr_fifo_par_err_status                   :  1;
     unsigned      opcq_entry_fifo_par_err_status            :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_opm_fifo_par_err_status_reg_2_t;

/*! @struct ncp_ncap_ipm_fifo_par_err_status_reg_t
 *  @brief iPCQ Manager FIFO Parity Error Status
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_fifo_par_err_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Input task pointer FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Write engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Write engine write data buffer FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_fifo_par_err_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      ptr_fifo_par_err_status                   :  1;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_srbf_fifo_par_err_status             : 12;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_par_err_status             : 12;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      ptr_fifo_par_err_status                   :  1;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_ipm_fifo_par_err_status_reg_t;

/*! @struct ncp_ncap_npgit_fifo_par_err_status_reg_t
 *  @brief NCAP PCQ Group Index Table FIFO Parity Error Status
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_npgit_fifo_par_err_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Write engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Write engine write data buffer FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_npgit_fifo_par_err_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_srbf_fifo_par_err_status             : 12;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_par_err_status             : 12;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      reserved0                                 :  5;
#endif
} ncp_ncap_npgit_fifo_par_err_status_reg_t;

/*! @struct ncp_ncap_mpb_input_fifo_par_err_status_reg_t
 *  @brief MME Pool Buffer Input FIFO Parity Error Status
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_input_fifo_par_err_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer input FIFO parity error flag. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_input_fifo_par_err_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      mpb_input_fifo_par_err_status             :  1;
#else    /* Little Endian */
     unsigned      mpb_input_fifo_par_err_status             :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_mpb_input_fifo_par_err_status_reg_t;

/*! @struct ncp_ncap_cpm_fifo_par_err_status_reg_t
 *  @brief Congiguration Ring Master Node FIFO Parity Error Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_fifo_par_err_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_weng_req_fifo_par_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CPM Write engine request FIFO parity error status. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_weng_wdb_fifo_par_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> CPM Write engine write data buffer FIFO parity error
 *        status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_req_fifo_par_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CPM Read engine request FIFO parity error status. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_arbf_fifo_par_err1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> CPM Read engine AXI memory reorder buffer FIFO parity
 *        error status 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_arbf_fifo_par_err0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CPM Read engine AXI memory reorder buffer FIFO parity
 *        error status 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_srbf_fifo_par_err1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> CPM Read engine system memory reorder buffer FIFO
 *        parity error status 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_reng_srbf_fifo_par_err0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPM Read engine system memory reorder buffer FIFO
 *        parity error status 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_fifo_par_err_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      cpm_weng_req_fifo_par_err                 :  1;
     unsigned      cpm_weng_wdb_fifo_par_err                 :  1;
     unsigned      cpm_reng_req_fifo_par_err                 :  1;
     unsigned      cpm_reng_arbf_fifo_par_err1               :  1;
     unsigned      cpm_reng_arbf_fifo_par_err0               :  1;
     unsigned      cpm_reng_srbf_fifo_par_err1               :  1;
     unsigned      cpm_reng_srbf_fifo_par_err0               :  1;
#else    /* Little Endian */
     unsigned      cpm_reng_srbf_fifo_par_err0               :  1;
     unsigned      cpm_reng_srbf_fifo_par_err1               :  1;
     unsigned      cpm_reng_arbf_fifo_par_err0               :  1;
     unsigned      cpm_reng_arbf_fifo_par_err1               :  1;
     unsigned      cpm_reng_req_fifo_par_err                 :  1;
     unsigned      cpm_weng_wdb_fifo_par_err                 :  1;
     unsigned      cpm_weng_req_fifo_par_err                 :  1;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_cpm_fifo_par_err_status_reg_t;

/*! @struct ncp_ncap_tfc_unordered_mode_reg_t
 *  @brief Task Flow Completion Unordered Mode Register
 *  @details Enables task flow completion to operate in unordered mode.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_tfc_unordered_mode_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_unordered_mode_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Task flow completion unordered mode enable. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_tfc_unordered_mode_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      tfc_unordered_mode_en                     :  1;
#else    /* Little Endian */
     unsigned      tfc_unordered_mode_en                     :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_tfc_unordered_mode_reg_t;

/*! @struct ncp_ncap_max_outstanding_mem_ops_reg_t
 *  @brief Maximum Outstanding Memory Operations
 *  @details This register sets the maximum number of outstanding memory read and write operations allowed for many of the NCAP's data types.  The value in each field is set to one less than the desired number of outstanding operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_max_outstanding_mem_ops_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_ipcq_entry_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Maximum number of outstanding iPCQ entry write operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_npgit_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Maximum number of outstanding NCAP PCQ group index
 *        table write operations allowed (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_npgit_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Maximum number of outstanding NCAP PCQ group index
 *        table read operations allowed (0 = 1, 1 = 2, 2 = 3,
 *        etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_mpcq_entry_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum number of outstanding mPCQ entry write operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_opcq_entry_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Maximum number of outstanding oPCQ entry read operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_max_outstanding_mem_ops_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      max_outstanding_ipcq_entry_wops           :  4;
     unsigned      max_outstanding_npgit_wops                :  4;
     unsigned      max_outstanding_npgit_rops                :  4;
     unsigned      max_outstanding_mpcq_entry_wops           :  4;
     unsigned      reserved1                                 :  4;
     unsigned      max_outstanding_opcq_entry_rops           :  4;
#else    /* Little Endian */
     unsigned      max_outstanding_opcq_entry_rops           :  4;
     unsigned      reserved1                                 :  4;
     unsigned      max_outstanding_mpcq_entry_wops           :  4;
     unsigned      max_outstanding_npgit_rops                :  4;
     unsigned      max_outstanding_npgit_wops                :  4;
     unsigned      max_outstanding_ipcq_entry_wops           :  4;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_max_outstanding_mem_ops_reg_t;

/*! @struct ncp_ncap_mem_op_counter_ctl_reg_t
 *  @brief Memory Operation Counter Control Register
 *  @details Controls the Memory Operation Counters
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter_ctl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Memory select. Determines whether the memory operation
 *        counters monitor system memory or AXI memory. 0 -
 *        system memory, 1 - AXI memory
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param clk_cnt_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Indicates when the clock counter has overflowed (1:
 *        Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt3_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Indicates when memory operation counter 3 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt2_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Indicates when memory operation counter 2 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt1_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Indicates when memory operation counter 1 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt0_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Indicates when memory operation counter 0 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt3_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Memory operation counter 3 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt2_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Memory operation counter 2 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt1_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Memory operation counter 1 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt0_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Memory operation counter 0 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_lat_mode </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Counter latency mode. Puts the memory operation counters
 *        in latency mode, and selects a type of access. When
 *        in latency mode, memory operation counter0 contains
 *        the minimum latency seen, memory operation counter1
 *        contains the maximum latency seen, and memory operation
 *        counter2 contains the total latency seen. memory operation
 *        counter3 contains the number of transactions seen
 *        for ID 0 of the selected type of access, except for
 *        the three types of ready low latency. For ready
 *        low latency, counter3 counts the number of times ready
 *        is low when valid first went high (like non-latency
 *        mode).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Spare bits. They can be written and read, but are
 *        currently unconnected.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_halt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> If set, halt all memory operation counters when any
 *        counter overflows (>2**48-1). Note that the overflow
 *        indication for each counter is available as the *_ovfl
 *        bits of this register
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enable all memory operation counters (1: run, 0: stop). </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter_ctl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  2;
     unsigned      mem_sel                                   :  1;
     unsigned      clk_cnt_ovfl                              :  1;
     unsigned      cnt3_ovfl                                 :  1;
     unsigned      cnt2_ovfl                                 :  1;
     unsigned      cnt1_ovfl                                 :  1;
     unsigned      cnt0_ovfl                                 :  1;
     unsigned      cnt3_sel                                  :  4;
     unsigned      cnt2_sel                                  :  4;
     unsigned      cnt1_sel                                  :  4;
     unsigned      cnt0_sel                                  :  4;
     unsigned      cnt_lat_mode                              :  4;
     unsigned      spare                                     :  2;
     unsigned      cnt_halt                                  :  1;
     unsigned      cnt_enable                                :  1;
#else    /* Little Endian */
     unsigned      cnt_enable                                :  1;
     unsigned      cnt_halt                                  :  1;
     unsigned      spare                                     :  2;
     unsigned      cnt_lat_mode                              :  4;
     unsigned      cnt0_sel                                  :  4;
     unsigned      cnt1_sel                                  :  4;
     unsigned      cnt2_sel                                  :  4;
     unsigned      cnt3_sel                                  :  4;
     unsigned      cnt0_ovfl                                 :  1;
     unsigned      cnt1_ovfl                                 :  1;
     unsigned      cnt2_ovfl                                 :  1;
     unsigned      cnt3_ovfl                                 :  1;
     unsigned      clk_cnt_ovfl                              :  1;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved0                                 :  2;
#endif
} ncp_ncap_mem_op_counter_ctl_reg_t;

/*! @struct ncp_ncap_clk_counter_ls_reg_t
 *  @brief Clock Counter LS Register
 *  @details Contains the lower 32 bits of the 48b clock counter value.  It is used by internal logic when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_clk_counter_ls_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current clock count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_clk_counter_ls_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_ncap_clk_counter_ls_reg_t;

/*! @struct ncp_ncap_clk_counter_ms_reg_t
 *  @brief Clock Counter MS Register
 *  @details Contains the upper 16 bits of the 48b clock counter value.  It is used by internal logic when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_clk_counter_ms_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current clock count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_clk_counter_ms_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_clk_counter_ms_reg_t;

/*! @struct ncp_ncap_mem_op_counter0_ls_reg_t
 *  @brief Memory Operation Counter0 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter0 value.  Contains the minimum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter0_ls_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter0 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter0_ls_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_ncap_mem_op_counter0_ls_reg_t;

/*! @struct ncp_ncap_mem_op_counter1_ls_reg_t
 *  @brief Memory Operation Counter1 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter1 value.  Contains the maximum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter1_ls_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter1 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter1_ls_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_ncap_mem_op_counter1_ls_reg_t;

/*! @struct ncp_ncap_mem_op_counter2_ls_reg_t
 *  @brief Memory Operation Counter2 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter2 value.  Contains the total latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter2_ls_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter2 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter2_ls_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_ncap_mem_op_counter2_ls_reg_t;

/*! @struct ncp_ncap_mem_op_counter3_ls_reg_t
 *  @brief Memory Operation Counter3 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter3 value.  Contains the number of transactions seen for ID 0 of the selected type of access when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter3_ls_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter3 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter3_ls_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_ncap_mem_op_counter3_ls_reg_t;

/*! @struct ncp_ncap_mem_op_counter0_ms_reg_t
 *  @brief Memory Operation Counter0 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter0 value.  Contains the minimum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter0_ms_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter0 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter0_ms_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mem_op_counter0_ms_reg_t;

/*! @struct ncp_ncap_mem_op_counter1_ms_reg_t
 *  @brief Memory Operation Counter1 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter1 value.  Contains the maximum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter1_ms_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter1 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter1_ms_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mem_op_counter1_ms_reg_t;

/*! @struct ncp_ncap_mem_op_counter2_ms_reg_t
 *  @brief Memory Operation Counter2 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter2 value.  Contains the total latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter2_ms_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter2 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter2_ms_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mem_op_counter2_ms_reg_t;

/*! @struct ncp_ncap_mem_op_counter3_ms_reg_t
 *  @brief Memory Operation Counter3 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter3 value.  Contains the number of transactions seen for ID 0 of the selected type of access when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_op_counter3_ms_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter3 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_op_counter3_ms_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mem_op_counter3_ms_reg_t;

/*! @struct ncp_ncap_mem_outstanding_rop_count0_reg_t
 *  @brief Memory Outstanding Read Operation Counter0
 *  @details Contains counts for the number of outstanding memory read operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_rop_count0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpcq_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Outstanding cPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otask_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding output task data read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Outstanding oPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_apcq_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding aPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpm_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Outstanding cPCQ manager read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding PCQ group index table read operations </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_rop_count0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      outstanding_cpcq_rops                     :  4;
     unsigned      outstanding_otask_rops                    :  4;
     unsigned      outstanding_opcq_rops                     :  4;
     unsigned      outstanding_apcq_rops                     :  4;
     unsigned      outstanding_cpm_rops                      :  4;
     unsigned      outstanding_pgit_rops                     :  4;
#else    /* Little Endian */
     unsigned      outstanding_pgit_rops                     :  4;
     unsigned      outstanding_cpm_rops                      :  4;
     unsigned      outstanding_apcq_rops                     :  4;
     unsigned      outstanding_opcq_rops                     :  4;
     unsigned      outstanding_otask_rops                    :  4;
     unsigned      outstanding_cpcq_rops                     :  4;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mem_outstanding_rop_count0_reg_t;

/*! @struct ncp_ncap_mem_outstanding_rop_count1_reg_t
 *  @brief Memory Outstanding Read Operation Counter1
 *  @details Contains counts for the total number of outstanding memory read operations for all of the data types in mem_outstanding_rop_count0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_rop_count1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_rops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding read operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_rops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding read operations </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_rop_count1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_rops_hwm                      : 16;
     unsigned      outstanding_rops                          : 16;
#else    /* Little Endian */
     unsigned      outstanding_rops                          : 16;
     unsigned      outstanding_rops_hwm                      : 16;
#endif
} ncp_ncap_mem_outstanding_rop_count1_reg_t;

/*! @struct ncp_ncap_mem_outstanding_rop_count2_reg_t
 *  @brief Memory Outstanding Read Operation Counter2
 *  @details Contains a count for the total number of outstanding memory read operations.  It also contains a high water mark field that records the maximum number of outstanding read operations observed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_rop_count2_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_rops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding total read operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_rops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding total read operations </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_rop_count2_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_total_rops_hwm                : 16;
     unsigned      outstanding_total_rops                    : 16;
#else    /* Little Endian */
     unsigned      outstanding_total_rops                    : 16;
     unsigned      outstanding_total_rops_hwm                : 16;
#endif
} ncp_ncap_mem_outstanding_rop_count2_reg_t;

/*! @struct ncp_ncap_mem_outstanding_rdata_count0_reg_t
 *  @brief Memory Outstanding Read Data Counter0
 *  @details Contains counts for the number of outstanding memory read data quadwords for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_rdata_count0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for oPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_apcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for aPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpm_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for the
 *        cPCQ manager
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for the
 *        PCQ group index table
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_rdata_count0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_opcq_rdata                    :  8;
     unsigned      outstanding_apcq_rdata                    :  8;
     unsigned      outstanding_cpm_rdata                     :  8;
     unsigned      outstanding_pgit_rdata                    :  8;
#else    /* Little Endian */
     unsigned      outstanding_pgit_rdata                    :  8;
     unsigned      outstanding_cpm_rdata                     :  8;
     unsigned      outstanding_apcq_rdata                    :  8;
     unsigned      outstanding_opcq_rdata                    :  8;
#endif
} ncp_ncap_mem_outstanding_rdata_count0_reg_t;

/*! @struct ncp_ncap_mem_outstanding_rdata_count1_reg_t
 *  @brief Memory Outstanding Read Data Counter1
 *  @details Contains counts for the number of outstanding memory read data quadwords for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_rdata_count1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for cPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otask_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for output
 *        task data
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_rdata_count1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      outstanding_cpcq_rdata                    :  8;
     unsigned      outstanding_otask_rdata                   :  8;
#else    /* Little Endian */
     unsigned      outstanding_otask_rdata                   :  8;
     unsigned      outstanding_cpcq_rdata                    :  8;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mem_outstanding_rdata_count1_reg_t;

/*! @struct ncp_ncap_mem_outstanding_wop_count0_reg_t
 *  @brief Memory Outstanding Write Operation Counter0
 *  @details Contains counts for the number of outstanding memory write operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_wop_count0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Outstanding oPCQ entry write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_itask_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding input task data and iPCQ entry write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpm_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Outstanding cPCQ manager write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding PCQ group index table write operations </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_wop_count0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      outstanding_opcq_wops                     :  4;
     unsigned      outstanding_itask_wops                    :  4;
     unsigned      outstanding_cpm_wops                      :  4;
     unsigned      outstanding_pgit_wops                     :  4;
#else    /* Little Endian */
     unsigned      outstanding_pgit_wops                     :  4;
     unsigned      outstanding_cpm_wops                      :  4;
     unsigned      outstanding_itask_wops                    :  4;
     unsigned      outstanding_opcq_wops                     :  4;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mem_outstanding_wop_count0_reg_t;

/*! @struct ncp_ncap_mem_outstanding_wop_count1_reg_t
 *  @brief Memory Outstanding Write Operation Counter1
 *  @details Contains a count for the total number of outstanding memory write operations.  It also contains a high water mark field that records the maximum number of outstanding write operations observed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_outstanding_wop_count1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_wops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding total write operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_wops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding total write operations </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_outstanding_wop_count1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_total_wops_hwm                : 16;
     unsigned      outstanding_total_wops                    : 16;
#else    /* Little Endian */
     unsigned      outstanding_total_wops                    : 16;
     unsigned      outstanding_total_wops_hwm                : 16;
#endif
} ncp_ncap_mem_outstanding_wop_count1_reg_t;

/*! @struct ncp_ncap_mem_valid_ready_reg_t
 *  @brief Memory Valid Ready
 *  @details Shows the state of all of the memory valid and ready signals
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mem_valid_ready_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Memory write response valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Memory write response ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Memory data write valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Memory data write ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Memory address write valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Memory address write ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_rvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Memory data read valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_rready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Memory data read ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_arvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Memory address read valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_arready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Memory address read ready </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mem_valid_ready_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      mem_bvalid                                :  1;
     unsigned      mem_bready                                :  1;
     unsigned      mem_wvalid                                :  1;
     unsigned      mem_wready                                :  1;
     unsigned      mem_awvalid                               :  1;
     unsigned      mem_awready                               :  1;
     unsigned      mem_rvalid                                :  1;
     unsigned      mem_rready                                :  1;
     unsigned      mem_arvalid                               :  1;
     unsigned      mem_arready                               :  1;
#else    /* Little Endian */
     unsigned      mem_arready                               :  1;
     unsigned      mem_arvalid                               :  1;
     unsigned      mem_rready                                :  1;
     unsigned      mem_rvalid                                :  1;
     unsigned      mem_awready                               :  1;
     unsigned      mem_awvalid                               :  1;
     unsigned      mem_wready                                :  1;
     unsigned      mem_wvalid                                :  1;
     unsigned      mem_bready                                :  1;
     unsigned      mem_bvalid                                :  1;
     unsigned      reserved0                                 : 22;
#endif
} ncp_ncap_mem_valid_ready_reg_t;

/*! @struct ncp_ncap_mpb_fifo_range_reg_size0_t
 *  @brief MME Pool Buffer FIFO Range Size0
 *  @details MME Pool Buffer FIFO start and end range pointers for size 0.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_fifo_range_reg_size0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_fifo_range_reg_size0_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      mpb_fifo_range_start_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_fifo_range_end_size0                  : 12;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size0                  : 12;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_fifo_range_start_size0                : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_mpb_fifo_range_reg_size0_t;

/*! @struct ncp_ncap_mpb_fifo_range_reg_size1_t
 *  @brief MME Pool Buffer FIFO Range Size1
 *  @details MME Pool Buffer FIFO start and end range pointers for size 1.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_fifo_range_reg_size1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_fifo_range_reg_size1_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      mpb_fifo_range_start_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_fifo_range_end_size1                  : 11;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size1                  : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_fifo_range_start_size1                : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_ncap_mpb_fifo_range_reg_size1_t;

/*! @struct ncp_ncap_mpb_fifo_range_reg_size2_t
 *  @brief MME Pool Buffer FIFO Range Size2
 *  @details MME Pool Buffer FIFO start and end range pointers for size 2.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_fifo_range_reg_size2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_fifo_range_reg_size2_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      mpb_fifo_range_start_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_end_size2                  : 10;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size2                  : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_start_size2                : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_ncap_mpb_fifo_range_reg_size2_t;

/*! @struct ncp_ncap_mpb_fifo_range_reg_size3_t
 *  @brief MME Pool Buffer FIFO Range Size3
 *  @details MME Pool Buffer FIFO start and end range pointers for size 3.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_fifo_range_reg_size3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_fifo_range_reg_size3_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      mpb_fifo_range_start_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_end_size3                  : 10;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size3                  : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_start_size3                : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_ncap_mpb_fifo_range_reg_size3_t;

/*! @struct ncp_ncap_smon_muxa_muxb_sel_reg_t
 *  @brief SMON mux a mux b select
 *  @details Used to multiplex multi-bit fields into the NCAP's SMON.  Since the SMON counts two things at a time, there are two select fields, a and b.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_smon_muxa_muxb_sel_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxb_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> SMON mux b mode. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxb_sel </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> SMON mux b select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxa_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> SMON mux a mode. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxa_sel </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> SMON mux a select. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_smon_muxa_muxb_sel_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      smon_muxb_mode                            :  2;
     unsigned      smon_muxb_sel                             : 14;
     unsigned      smon_muxa_mode                            :  2;
     unsigned      smon_muxa_sel                             : 14;
#else    /* Little Endian */
     unsigned      smon_muxa_sel                             : 14;
     unsigned      smon_muxa_mode                            :  2;
     unsigned      smon_muxb_sel                             : 14;
     unsigned      smon_muxb_mode                            :  2;
#endif
} ncp_ncap_smon_muxa_muxb_sel_reg_t;

/*! @struct ncp_ncap_smon1_muxa_muxb_sel_reg_t
 *  @brief SMON1 mux a mux b select
 *  @details Used to multiplex multi-bit fields into the NCAP's SMON1.  Since the SMON1 counts two things at a time, there are two select fields, a and b.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_smon1_muxa_muxb_sel_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param smon1_muxb_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> SMON1 mux b mode. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon1_muxb_sel </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> SMON1 mux b select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon1_muxa_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> SMON1 mux a mode. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon1_muxa_sel </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> SMON1 mux a select. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_smon1_muxa_muxb_sel_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      smon1_muxb_mode                           :  2;
     unsigned      smon1_muxb_sel                            : 14;
     unsigned      smon1_muxa_mode                           :  2;
     unsigned      smon1_muxa_sel                            : 14;
#else    /* Little Endian */
     unsigned      smon1_muxa_sel                            : 14;
     unsigned      smon1_muxa_mode                           :  2;
     unsigned      smon1_muxb_sel                            : 14;
     unsigned      smon1_muxb_mode                           :  2;
#endif
} ncp_ncap_smon1_muxa_muxb_sel_reg_t;

/*! @struct ncp_ncap_num_opc_queues_reg_t
 *  @brief NCAP Number Output Task Producer Consumer Queues
 *  @details Total number of NCAP oPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_opc_queues_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_opc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCAP oPCQs. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_opc_queues_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_num_opc_queues;
} ncp_ncap_num_opc_queues_reg_t;

/*! @struct ncp_ncap_num_cpc_queues_reg_t
 *  @brief NCAP Number Configuration Producer Consumer Queues
 *  @details Total number of NCAP cPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_cpc_queues_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_cpc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCAP cPCQs. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_cpc_queues_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_num_cpc_queues;
} ncp_ncap_num_cpc_queues_reg_t;

/*! @struct ncp_ncap_num_ipc_queues_reg_t
 *  @brief NCAP Number Input Task Producer Consumer Queues
 *  @details Total number of NCAP iPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_ipc_queues_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_ipc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCAP iPCQs. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_ipc_queues_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_num_ipc_queues;
} ncp_ncap_num_ipc_queues_reg_t;

/*! @struct ncp_ncap_num_mpc_queues_reg_t
 *  @brief NCAP Number MME Producer Consumer Queues
 *  @details Total number of NCAP mPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_mpc_queues_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_mpc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCAP mPCQs divided by 4. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_mpc_queues_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_num_mpc_queues;
} ncp_ncap_num_mpc_queues_reg_t;

/*! @struct ncp_ncap_num_pcq_groups_reg_t
 *  @brief NCAP Number of PCQ Groups
 *  @details Number of producer consumer queue groups.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_pcq_groups_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_pcq_groups </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of producer consumer queue groups. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_pcq_groups_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_num_pcq_groups;
} ncp_ncap_num_pcq_groups_reg_t;

/*! @struct ncp_ncap_num_cpu_interrupts_reg_t
 *  @brief NCAP Number of CPU Interrupts
 *  @details Number of CPU interrupt pins.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_cpu_interrupts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_cpu_interrupts </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of CPU interrupt pins. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_cpu_interrupts_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_num_cpu_interrupts;
} ncp_ncap_num_cpu_interrupts_reg_t;

/*! @struct ncp_ncap_num_hw_interrupts_reg_t
 *  @brief NCAP Number of Hardware Interrupts
 *  @details Number of hardware interrupt pins.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_hw_interrupts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_hw_interrupts </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of hardware interrupt pins. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_hw_interrupts_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_num_hw_interrupts;
} ncp_ncap_num_hw_interrupts_reg_t;

/*! @struct ncp_ncap_caal_num_rids_reg_t
 *  @brief NCAP CAAL Number of Read IDs
 *  @details Number of CAAL read IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_caal_num_rids_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_num_rids </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of CAAL read IDs. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_caal_num_rids_reg_t
 *
 */
 
typedef struct
{
     unsigned  int        ncap_caal_num_rids;
} ncp_ncap_caal_num_rids_reg_t;

/*! @struct ncp_ncap_acp_num_rids_width_reg_t
 *  @brief NCAP ACP Number of Read IDs Width
 *  @details NCAP ACP number of read IDs width.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_acp_num_rids_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_acp_num_rids_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCAP ACP number of read IDs width. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_acp_num_rids_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_acp_num_rids_width;
} ncp_ncap_acp_num_rids_width_reg_t;

/*! @struct ncp_ncap_caal_num_wids_reg_t
 *  @brief NCAP CAAL Number of Write IDs
 *  @details Number of CAAL write IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_caal_num_wids_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_caal_num_wids </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of CAAL write IDs. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_caal_num_wids_reg_t
 *
 */
 
typedef struct
{
     unsigned  int        ncap_caal_num_wids;
} ncp_ncap_caal_num_wids_reg_t;

/*! @struct ncp_ncap_acp_num_wids_width_reg_t
 *  @brief NCAP ACP Number of Write IDs Width
 *  @details NCAP ACP number of write IDs width.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_acp_num_wids_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_acp_num_wids_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCAP ACP number of write IDs width. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_acp_num_wids_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_acp_num_wids_width;
} ncp_ncap_acp_num_wids_width_reg_t;

/*! @struct ncp_ncap_acp_addr_width_reg_t
 *  @brief NCAP ACP Address Width
 *  @details Width of NCAP ACP address.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_acp_addr_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_acp_addr_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCAP ACP number of write IDs width. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_acp_addr_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_acp_addr_width;
} ncp_ncap_acp_addr_width_reg_t;

/*! @struct ncp_ncap_opcq_nlink_credits_reg_t
 *  @brief NCAP oPCQ NLINK Credits
 *  @details Number of oPCQ NLINK credits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_nlink_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_opcq_nlink_credits </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> The number of NLINK credits allocated for oPCQ entries
 *        and auto task flow completion messages.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_nlink_credits_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_opcq_nlink_credits;
} ncp_ncap_opcq_nlink_credits_reg_t;

/*! @struct ncp_ncap_ipcq_nlink_credits_reg_t
 *  @brief NCAP iPCQ NLINK Credits
 *  @details Number of iPCQ NLINK credits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_nlink_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_ipcq_nlink_credits </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> The number of NLINK credits allocated for iPCQ entries. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_nlink_credits_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_ipcq_nlink_credits;
} ncp_ncap_ipcq_nlink_credits_reg_t;

/*! @struct ncp_ncap_mpcq_nlink_credits_reg_t
 *  @brief NCAP mPCQ NLINK Credits
 *  @details Number of mPCQ NLINK credits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_nlink_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_mpcq_nlink_credits </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> The number of NLINK credits allocated for mPCQ buffer
 *        requests.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_nlink_credits_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      ncap_mpcq_nlink_credits;
} ncp_ncap_mpcq_nlink_credits_reg_t;

/*! @struct ncp_ncap_num_pcq_groups_reg_t
 *  @brief Number of PCQ Groups
 *  @details Number of producer consumer queue groups.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_pcq_groups_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_pcq_groups </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of producer consumer queue groups. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_pcq_groups_reg_t
 *
 */
 
#if 0
typedef struct
{
     unsigned  int            num_pcq_groups;
} ncp_ncap_num_pcq_groups_reg_t;
#endif

/*! @struct ncp_ncap_num_pcq_groups_width_reg_t
 *  @brief Number of PCQ Groups Width
 *  @details Number of bits required to represent the number of pcq groups.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_pcq_groups_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_pcq_groups_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits required to represent the number of
 *        pcq groups.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_pcq_groups_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      num_pcq_groups_width;
} ncp_ncap_num_pcq_groups_width_reg_t;

/*! @struct ncp_ncap_vi_width_reg_t
 *  @brief Virtual Index Width
 *  @details Width of virtual index addresses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_vi_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param vi_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of virtual index addresses. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_vi_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                  vi_width;
} ncp_ncap_vi_width_reg_t;

/*! @struct ncp_ncap_poolid_width_reg_t
 *  @brief Pool ID Width
 *  @details Width of pool ID field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_poolid_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param poolid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of pool ID field. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_poolid_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int              poolid_width;
} ncp_ncap_poolid_width_reg_t;

/*! @struct ncp_ncap_ncapd_options_reg_t
 *  @brief NCAPD Options
 *  @details Turns on NCAPD options
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ncapd_options_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncapd_options </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Turns on NCAPD options when non-zero. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ncapd_options_reg_t
 *
 */
 
typedef struct
{
     unsigned  int             ncapd_options;
} ncp_ncap_ncapd_options_reg_t;

/*! @struct ncp_ncap_num_mem_pools_reg_t
 *  @brief Number of Memory Pools
 *  @details Number of memory pools.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_mem_pools_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_mem_pools </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of memory pools. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_mem_pools_reg_t
 *
 */
 
typedef struct
{
     unsigned  int             num_mem_pools;
} ncp_ncap_num_mem_pools_reg_t;

/*! @struct ncp_ncap_num_mem_pools_width_reg_t
 *  @brief Number of Memory Pools Width
 *  @details Number of bits required to represent the number of memory pools.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_mem_pools_width_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_mem_pools_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits required to represent the number of
 *        memory pools.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_mem_pools_width_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       num_mem_pools_width;
} ncp_ncap_num_mem_pools_width_reg_t;

/*! @struct ncp_ncap_num_rbuf_pools_reg_t
 *  @brief NCAP Number Receive Buffer Pools
 *  @details Total number of NCAP receive buffer pools.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_num_rbuf_pools_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_num_rbuf_pools </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCAP receive buffer pools. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_num_rbuf_pools_reg_t
 *
 */
 
typedef struct
{
     unsigned  int       ncap_num_rbuf_pools;
} ncp_ncap_num_rbuf_pools_reg_t;

/*! @struct ncp_ncap_ecc_test_9ecc_reg_t
 *  @brief ECC Test
 *  @details This register provides the ability to create errors in ECC protected memory in order to verify the detection and correction logic.  This register is for testing purposes only.  It should remain clear during normal operation.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ecc_test_9ecc_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> ECC invert. This is an inversion mask that is used
 *        to invert ECC bits written to memory when enabled
 *        by the ECC invert enable bit of this register. Set
 *        one bit to cause a single bit error, two bits to cause
 *        a double bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ECC invert enable. Enables ECC inversion using the
 *        ecc_invert field of this register.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dis_ecc_correct </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Disable ECC correction. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ecc_test_9ecc_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      ecc_invert                                :  9;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved2                                 :  7;
     unsigned      dis_ecc_correct                           :  1;
#else    /* Little Endian */
     unsigned      dis_ecc_correct                           :  1;
     unsigned      reserved2                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert                                :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_ecc_test_9ecc_reg_t;

/*! @struct ncp_ncap_rvct_ecc_test_reg_t
 *  @brief ECC Test
 *  @details This register provides the ability to create errors in ECC protected memory in order to verify the detection and correction logic.  This register is for testing purposes only.  It should remain clear during normal operation.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rvct_ecc_test_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> ECC invert. This is an inversion mask that is used
 *        to invert ECC bits written to memory when enabled
 *        by the ECC invert enable bit of this register. Set
 *        one bit to cause a single bit error, two bits to cause
 *        a double bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ECC invert enable. Enables ECC inversion using the
 *        ecc_invert field of this register.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dis_ecc_correct </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Disable ECC correction. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rvct_ecc_test_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ecc_invert                                :  7;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved2                                 :  7;
     unsigned      dis_ecc_correct                           :  1;
#else    /* Little Endian */
     unsigned      dis_ecc_correct                           :  1;
     unsigned      reserved2                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert                                :  7;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_rvct_ecc_test_reg_t;

/*! @struct ncp_ncap_rvct_reg_t
 *  @brief Receive Virtual Pipeline Control Table
 *  @details This table uses the input task template ID as an index to provide an 8-bit mask that corresponds to VPP pool IDs 0 to 7.  If the mask bit corresponding to the input task pool ID is set, then the itask is allowed to be passed by pointer reference (no copy).  Each entry in the table contains four masks which are selected by the two LSBs of the template ID.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rvct_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> VPP mask template ID 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> VPP mask template ID 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> VPP mask template ID 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> VPP mask template ID 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rvct_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      vpp_mask_tmplt_id_3                       :  8;
     unsigned      vpp_mask_tmplt_id_2                       :  8;
     unsigned      vpp_mask_tmplt_id_1                       :  8;
     unsigned      vpp_mask_tmplt_id_0                       :  8;
#else    /* Little Endian */
     unsigned      vpp_mask_tmplt_id_0                       :  8;
     unsigned      vpp_mask_tmplt_id_1                       :  8;
     unsigned      vpp_mask_tmplt_id_2                       :  8;
     unsigned      vpp_mask_tmplt_id_3                       :  8;
#endif
} ncp_ncap_rvct_reg_t;

/*! @struct ncp_ncap_ipm_ttype_reg_t
 *  @brief iPCQ Manager CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done by the iPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ttype_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager CAAL write ttype. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager CAAL read ttype. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ttype_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      ipm_caal_w_ttype                          :  5;
     unsigned      reserved1                                 :  2;
     unsigned      ipm_caal_r_ttype                          :  6;
#else    /* Little Endian */
     unsigned      ipm_caal_r_ttype                          :  6;
     unsigned      reserved1                                 :  2;
     unsigned      ipm_caal_w_ttype                          :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_ncap_ipm_ttype_reg_t;

/*! @struct ncp_ncap_opm_ttype_reg_t
 *  @brief oPCQ Manager CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done by the oPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_ttype_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ manager CAAL write ttype. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ manager CAAL read ttype. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_ttype_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      opm_caal_w_ttype                          :  5;
     unsigned      reserved1                                 :  2;
     unsigned      opm_caal_r_ttype                          :  6;
#else    /* Little Endian */
     unsigned      opm_caal_r_ttype                          :  6;
     unsigned      reserved1                                 :  2;
     unsigned      opm_caal_w_ttype                          :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_ncap_opm_ttype_reg_t;

/*! @struct ncp_ncap_cpm_ttype_reg_t
 *  @brief cPCQ Manager CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done by the cPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_ttype_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ manager CAAL write ttype. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ manager CAAL read ttype. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_ttype_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      cpm_caal_w_ttype                          :  5;
     unsigned      reserved1                                 :  2;
     unsigned      cpm_caal_r_ttype                          :  6;
#else    /* Little Endian */
     unsigned      cpm_caal_r_ttype                          :  6;
     unsigned      reserved1                                 :  2;
     unsigned      cpm_caal_w_ttype                          :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_ncap_cpm_ttype_reg_t;

/*! @struct ncp_ncap_mpm_ttype_reg_t
 *  @brief mPCQ Manager CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done by the mPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_ttype_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> mPCQ manager CAAL write ttype. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ manager CAAL read ttype. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_ttype_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      mpm_caal_w_ttype                          :  5;
     unsigned      reserved1                                 :  2;
     unsigned      mpm_caal_r_ttype                          :  6;
#else    /* Little Endian */
     unsigned      mpm_caal_r_ttype                          :  6;
     unsigned      reserved1                                 :  2;
     unsigned      mpm_caal_w_ttype                          :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_ncap_mpm_ttype_reg_t;

/*! @struct ncp_ncap_pgitm_ttype_reg_t
 *  @brief PGIT Monitor CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done by the PGIT monitor.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgitm_ttype_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitm_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT monitor CAAL write ttype. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitm_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PGIT monitor CAAL read ttype. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgitm_ttype_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      pgitm_caal_w_ttype                        :  5;
     unsigned      reserved1                                 :  2;
     unsigned      pgitm_caal_r_ttype                        :  6;
#else    /* Little Endian */
     unsigned      pgitm_caal_r_ttype                        :  6;
     unsigned      reserved1                                 :  2;
     unsigned      pgitm_caal_w_ttype                        :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_ncap_pgitm_ttype_reg_t;

/*! @struct ncp_ncap_grp_rst_reg_t
 *  @brief Group Reset
 *  @details Provides the ability to reset all of the PCQ logic in the NCAP for a single group.  Once the grp_rst bit is set, it should not be cleared until all of the ..._grp_rst_cmplt bits in this register are set.  Upon completion, the enable_bits in all of the pcq_desc_.pcq.PCQ_desc_r1 regiters are turned off for all PCQs in the group.  All of the PCQ read/write indexes (see pcq_stat_.pcq.PCQ_stat_r0 registers) are cleared.  The enable bits for the group in the grp_load_timer_enable and grp_upload_timer_enable register are cleared.  Any memory buffers that were in the mPCQs are lost.  All other configuration registers of the group remain unchanged.  IMPORTANT: Software must clear both the ncap and cpu managed PGITs in memory for the group that was reset before re-enabling the group load/upload timers and the PCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_grp_rst_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitm_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> PGIT Monitor Group Reset Complete. If this bit does
 *        not set after grp_rst is set, refer to the pgitm_grp_rst_status
 *        register for more information.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> mPCQ Manager Group Reset Complete. If this bit does
 *        not set after grp_rst is set, refer to the mpm_grp_rst_status
 *        register for more information.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> oPCQ Manager Group Reset Complete. If this bit does
 *        not set after grp_rst is set, refer to the opm_grp_rst_status
 *        register for more information.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> iPCQ Manager Group Reset Complete. WARNING: this bit
 *        will not stay set if the NCA is sending iPCQ entries
 *        to the group being reset; therefore, the NCA should
 *        stop sending iPCQ entries to the group being reset
 *        before grp_rst is turned on. If this bit does not
 *        set after grp_rst is set, refer to the ipm_grp_rst_status
 *        register for more information.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group reset. When set, all PCQ logic for the selected
 *        group is reset. Once set, this bit should not be cleared
 *        until all of the ..._grp_rst_cmplt bits in this register
 *        are set.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group number of the group being reset. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_grp_rst_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      pgitm_grp_rst_cmplt                       :  1;
     unsigned      mpm_grp_rst_cmplt                         :  1;
     unsigned      opm_grp_rst_cmplt                         :  1;
     unsigned      ipm_grp_rst_cmplt                         :  1;
     unsigned      reserved1                                 : 15;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved2                                 :  5;
     unsigned      grp_num                                   :  3;
#else    /* Little Endian */
     unsigned      grp_num                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved1                                 : 15;
     unsigned      ipm_grp_rst_cmplt                         :  1;
     unsigned      opm_grp_rst_cmplt                         :  1;
     unsigned      mpm_grp_rst_cmplt                         :  1;
     unsigned      pgitm_grp_rst_cmplt                       :  1;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_grp_rst_reg_t;

/*! @struct ncp_ncap_pcq_descr_enhanced_reg_t
 *  @brief PCQ Descriptor Table Enhanced
 *  @details Makes additional fields in the PCQ desriptor tables visible and configurable.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_descr_enhanced_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_descr_enhanced </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ descriptor table enhanced. When set, the atfc
 *        and apcq_cpa bits in the iPCQ/aPCQ, and the cbit_overide
 *        and cpa_overide bits in the oPCQ are visible and configurable.
 *        It also enables the opm_opcq_entry_cpa_er_cnt register.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_descr_enhanced_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      pcq_descr_enhanced                        :  1;
#else    /* Little Endian */
     unsigned      pcq_descr_enhanced                        :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_pcq_descr_enhanced_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size0_reg_t
 *  @brief MME Buffer Fetch Enable Size 0
 *  @details Provides a fetch enable bit for each of the size 0 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 0 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size0_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size0                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size0                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size0_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size0_woclr_reg_t
 *  @brief MME Buffer Fetch Enable Size 0 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size0 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size0_woclr_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 0 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size0_woclr_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size0                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size0                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size0_woclr_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size0_woset_reg_t
 *  @brief MME Buffer Fetch Enable Size 0 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size0 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size0_woset_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 0 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size0_woset_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size0                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size0                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size0_woset_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size1_reg_t
 *  @brief MME Buffer Fetch Enable Size 1
 *  @details Provides a fetch enable bit for each of the size 1 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 1 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size1                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size1                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size1_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size1_woclr_reg_t
 *  @brief MME Buffer Fetch Enable Size 1 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size1 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size1_woclr_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 1 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size1_woclr_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size1                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size1                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size1_woclr_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size1_woset_reg_t
 *  @brief MME Buffer Fetch Enable Size 1 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size1 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size1_woset_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 1 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size1_woset_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size1                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size1                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size1_woset_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size2_reg_t
 *  @brief MME Buffer Fetch Enable Size 2
 *  @details Provides a fetch enable bit for each of the size 2 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size2_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 2 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size2_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size2                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size2                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size2_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size2_woclr_reg_t
 *  @brief MME Buffer Fetch Enable Size 2 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size2 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size2_woclr_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 2 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size2_woclr_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size2                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size2                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size2_woclr_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size2_woset_reg_t
 *  @brief MME Buffer Fetch Enable Size 2 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size2 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size2_woset_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 2 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size2_woset_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size2                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size2                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size2_woset_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size3_reg_t
 *  @brief MME Buffer Fetch Enable Size 3
 *  @details Provides a fetch enable bit for each of the size 3 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size3_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 3 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size3_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size3                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size3                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size3_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size3_woclr_reg_t
 *  @brief MME Buffer Fetch Enable Size 3 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size3 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size3_woclr_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 3 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size3_woclr_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size3                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size3                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size3_woclr_reg_t;

/*! @struct ncp_ncap_mme_buf_fetch_en_size3_woset_reg_t
 *  @brief MME Buffer Fetch Enable Size 3 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size3 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_buf_fetch_en_size3_woset_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 3 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_buf_fetch_en_size3_woset_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size3                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size3                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_buf_fetch_en_size3_woset_reg_t;

/*! @struct ncp_ncap_mme_ctl_reg_t
 *  @brief MME Control
 *  @details Includes fields to turn on pointer recovery and set the number of outstanding pointer requests to the MME for each {poolID, size} pair.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_ctl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_pool_req_stall_cnt_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> VPP pool request stall count value. At reset, and
 *        when a nack is received for pointer requests for VPP
 *        pools (poolID < 8), requests go into a stall mode
 *        on a {poolID, size} pair basis. This limits the number
 *        of outstanding requests to one, and sets the minimum
 *        time between requests to the number of clock cycles
 *        indicated by this field. Once a pointer is received
 *        from the MME, stall mode turns off.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_fill_reqs_per_fifo_recover_ptr_mode_m1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Maximum number fill requests per FIFO on recover mode
 *        minus one. Sets the maximum number of outstanding
 *        pointer requests to the MME for each {poolID, size}
 *        pair when in recover pointer mode. (0 = 1, 1 = 2,
 *        2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_fill_reqs_per_fifo_m1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum number fill requests per FIFO minus one. Sets
 *        the maximum number of outstanding pointer requests
 *        to the MME for each {poolID, size} pair when not in
 *        recover pointer mode. (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param disable_mme_req_hprior </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Disable MME request high priority. Normally, buffers
 *        coming from the MME have priority over all others
 *        for access to the MME FIFOs. This bit disables that
 *        priority and makes it round robin.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hysteresis_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Hysteresis Enable. Enables hysteresis for FIFO filling.
 *        Hysteresis is also enabled when the recover_ptr_mode
 *        bit of this register is set.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param recover_ptr_mode </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Recover pointer mode. When set, the MME FIFO will
 *        recover pointers being returned by the oPCQ manager
 *        instead of passing them to the MME if room is available.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_ctl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      vpp_pool_req_stall_cnt_value              :  8;
     unsigned      max_num_fill_reqs_per_fifo_recover_ptr_mode_m1  :  4;
     unsigned      max_num_fill_reqs_per_fifo_m1             :  4;
     unsigned      reserved1                                 :  5;
     unsigned      disable_mme_req_hprior                    :  1;
     unsigned      hysteresis_en                             :  1;
     unsigned      recover_ptr_mode                          :  1;
#else    /* Little Endian */
     unsigned      recover_ptr_mode                          :  1;
     unsigned      hysteresis_en                             :  1;
     unsigned      disable_mme_req_hprior                    :  1;
     unsigned      reserved1                                 :  5;
     unsigned      max_num_fill_reqs_per_fifo_m1             :  4;
     unsigned      max_num_fill_reqs_per_fifo_recover_ptr_mode_m1  :  4;
     unsigned      vpp_pool_req_stall_cnt_value              :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_mme_ctl_reg_t;

/*! @struct ncp_ncap_opm_vpp_pool_size_chk_en_reg_t
 *  @brief oPCQ Manager VPP Pool Size Check Enable
 *  @details Enables the oPCQ manager to check and derive the size of a VPP pool buffer being returned to the MME.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_vpp_pool_size_chk_en_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_vpp_pool_size_chk_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> When 0, the size (256, 2k, 16k, or 64k) of a VPP pool
 *        buffer being returned to the MME is supplied from
 *        an oPCQ entry. When 1, the buffer size is derived
 *        using the VPP Pool Base Address Tables.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_vpp_pool_size_chk_en_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      opm_vpp_pool_size_chk_en                  :  1;
#else    /* Little Endian */
     unsigned      opm_vpp_pool_size_chk_en                  :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_opm_vpp_pool_size_chk_en_reg_t;

/*! @struct ncp_ncap_pcq_completely_full_en_reg_t
 *  @brief PCQ Completely Full Enable
 *  @details Enables PCQs to become completely full instead of being full when there is one free location in the PCQ.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_completely_full_en_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_completely_full_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> When 0, a PCQ is full when only one queue entry is
 *        free. When 1, a PCQ is full when no queue entries
 *        are free. In this mode, the most significant bit of
 *        each PCQ's index in the PGITs is the toggle bit which
 *        must toggle each time the index wraps. Thus, each
 *        PCQ can only hold half as much as when this bit is
 *        clear.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_completely_full_en_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      pcq_completely_full_en                    :  1;
#else    /* Little Endian */
     unsigned      pcq_completely_full_en                    :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_pcq_completely_full_en_reg_t;

/*! @struct ncp_ncap_force_input_task_copy_reg_t
 *  @brief Force Input Task Copy
 *  @details Forces all input tasks to be copied.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_force_input_task_copy_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param force_input_task_copy </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> When 1, forces all input tasks to be copied. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_force_input_task_copy_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      force_input_task_copy                     :  1;
#else    /* Little Endian */
     unsigned      force_input_task_copy                     :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_force_input_task_copy_reg_t;

/*! @struct ncp_ncap_force_output_task_copy_reg_t
 *  @brief Force Output Task Copy
 *  @details Forces all output tasks to be copied.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_force_output_task_copy_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param force_output_task_copy </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> When 1, forces all output tasks to be copied. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_force_output_task_copy_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      force_output_task_copy                    :  1;
#else    /* Little Endian */
     unsigned      force_output_task_copy                    :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_force_output_task_copy_reg_t;

/*! @struct ncp_ncap_xlat_err_reg_t
 *  @brief Translation Error Status
 *  @details This register contains the addresss and error indications for detected translation errors in the ipm_cpu_vpp_xlat_table, ipm_vpp_cpu_xlat_table, and opm_cpu_vpp_xlat_table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlat_err_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_xlat_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> oPCQ manager cpu to vpp translation table result greater
 *        than maximum allowed address value error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_xlat_less_than_base </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ manager cpu to vpp translation table result less
 *        than pool base error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_xlat_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> oPCQ manager cpu to vpp translation table underflow
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ manager vpp to cpu translation table translation
 *        error address. The address in the table where the
 *        error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_vpp_cpu_xlat_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> iPCQ manager vpp to cpu translation table result greater
 *        than maximum allowed address value error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_vpp_cpu_xlat_overflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> iPCQ manager vpp to cpu translation table overflow
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_vpp_cpu_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table translation
 *        error address. The address in the table where the
 *        error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_xlat_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table result greater
 *        than maximum allowed address value error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_xlat_less_than_base </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table result less
 *        than pool base error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_xlat_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table underflow
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table translation
 *        error address. The address in the table where the
 *        error occured.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlat_err_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      opm_cpu_vpp_xlat_gr_max_dynamic           :  1;
     unsigned      opm_cpu_vpp_xlat_less_than_base           :  1;
     unsigned      opm_cpu_vpp_xlat_underflow                :  1;
     unsigned      opm_cpu_vpp_xlat_err_addr                 :  5;
     unsigned      ipm_vpp_cpu_xlat_gr_max_dynamic           :  1;
     unsigned      ipm_vpp_cpu_xlat_overflow                 :  1;
     unsigned      reserved1                                 :  1;
     unsigned      ipm_vpp_cpu_xlat_err_addr                 :  5;
     unsigned      ipm_cpu_vpp_xlat_gr_max_dynamic           :  1;
     unsigned      ipm_cpu_vpp_xlat_less_than_base           :  1;
     unsigned      ipm_cpu_vpp_xlat_underflow                :  1;
     unsigned      ipm_cpu_vpp_xlat_err_addr                 :  5;
#else    /* Little Endian */
     unsigned      ipm_cpu_vpp_xlat_err_addr                 :  5;
     unsigned      ipm_cpu_vpp_xlat_underflow                :  1;
     unsigned      ipm_cpu_vpp_xlat_less_than_base           :  1;
     unsigned      ipm_cpu_vpp_xlat_gr_max_dynamic           :  1;
     unsigned      ipm_vpp_cpu_xlat_err_addr                 :  5;
     unsigned      reserved1                                 :  1;
     unsigned      ipm_vpp_cpu_xlat_overflow                 :  1;
     unsigned      ipm_vpp_cpu_xlat_gr_max_dynamic           :  1;
     unsigned      opm_cpu_vpp_xlat_err_addr                 :  5;
     unsigned      opm_cpu_vpp_xlat_underflow                :  1;
     unsigned      opm_cpu_vpp_xlat_less_than_base           :  1;
     unsigned      opm_cpu_vpp_xlat_gr_max_dynamic           :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_xlat_err_reg_t;

/*! @struct ncp_ncap_xlat_err_1_reg_t
 *  @brief Translation Error Status 1
 *  @details This register contains the addresss and error indications for detected translation errors in the opm_return_ptr_fifo_xlat_table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlat_err_1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_xlat_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo translation table
 *        result greater than maximum allowed address value
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_xlat_less_than_base </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo translation table
 *        result less than pool base error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_xlat_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo translation table
 *        underflow error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo translation table
 *        translation error address. The address in the table
 *        where the error occured.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlat_err_1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      opm_return_ptr_fifo_xlat_gr_max_dynamic   :  1;
     unsigned      opm_return_ptr_fifo_xlat_less_than_base   :  1;
     unsigned      opm_return_ptr_fifo_xlat_underflow        :  1;
     unsigned      opm_return_ptr_fifo_xlat_err_addr         :  5;
#else    /* Little Endian */
     unsigned      opm_return_ptr_fifo_xlat_err_addr         :  5;
     unsigned      opm_return_ptr_fifo_xlat_underflow        :  1;
     unsigned      opm_return_ptr_fifo_xlat_less_than_base   :  1;
     unsigned      opm_return_ptr_fifo_xlat_gr_max_dynamic   :  1;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_xlat_err_1_reg_t;

/*! @struct ncp_ncap_ecc_err_reg_t
 *  @brief ECC Error Status
 *  @details This register contains the addresss and single/double bit error indications for detected ECC errors in the ipm_cpu_vpp_xlat_table, ipm_vpp_cpu_xlat_table, and opm_cpu_vpp_xlat_table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ecc_err_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Receive virtual pipeline control table double-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Receive virtual pipeline control table single-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_ecc_err_addr </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Receive virtual pipeline control table ECC error address.
 *        The address in the table where the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> oPCQ manager cpu to vpp translation table double-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ manager cpu to vpp translation table single-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpu_vpp_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ manager cpu to vpp translation table ECC error
 *        address. The address in the table where the error
 *        occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_vpp_cpu_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> iPCQ manager vpp to cpu translation table double-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_vpp_cpu_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> iPCQ manager vpp to cpu translation table single-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_vpp_cpu_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ manager vpp to cpu translation table ECC error
 *        address. The address in the table where the error
 *        occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table double-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table single-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_cpu_vpp_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager cpu to vpp translation table ECC error
 *        address. The address in the table where the error
 *        occured.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ecc_err_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      rvct_dbe                                  :  1;
     unsigned      rvct_sbe                                  :  1;
     unsigned      rvct_ecc_err_addr                         :  6;
     unsigned      opm_cpu_vpp_dbe                           :  1;
     unsigned      opm_cpu_vpp_sbe                           :  1;
     unsigned      reserved0                                 :  1;
     unsigned      opm_cpu_vpp_ecc_err_addr                  :  5;
     unsigned      ipm_vpp_cpu_dbe                           :  1;
     unsigned      ipm_vpp_cpu_sbe                           :  1;
     unsigned      reserved1                                 :  1;
     unsigned      ipm_vpp_cpu_ecc_err_addr                  :  5;
     unsigned      ipm_cpu_vpp_dbe                           :  1;
     unsigned      ipm_cpu_vpp_sbe                           :  1;
     unsigned      reserved2                                 :  1;
     unsigned      ipm_cpu_vpp_ecc_err_addr                  :  5;
#else    /* Little Endian */
     unsigned      ipm_cpu_vpp_ecc_err_addr                  :  5;
     unsigned      reserved2                                 :  1;
     unsigned      ipm_cpu_vpp_sbe                           :  1;
     unsigned      ipm_cpu_vpp_dbe                           :  1;
     unsigned      ipm_vpp_cpu_ecc_err_addr                  :  5;
     unsigned      reserved1                                 :  1;
     unsigned      ipm_vpp_cpu_sbe                           :  1;
     unsigned      ipm_vpp_cpu_dbe                           :  1;
     unsigned      opm_cpu_vpp_ecc_err_addr                  :  5;
     unsigned      reserved0                                 :  1;
     unsigned      opm_cpu_vpp_sbe                           :  1;
     unsigned      opm_cpu_vpp_dbe                           :  1;
     unsigned      rvct_ecc_err_addr                         :  6;
     unsigned      rvct_sbe                                  :  1;
     unsigned      rvct_dbe                                  :  1;
#endif
} ncp_ncap_ecc_err_reg_t;

/*! @struct ncp_ncap_ecc_err_1_reg_t
 *  @brief ECC Error Status 1
 *  @details This register contains the addresss and single/double bit error indications for detected ECC errors in the opm_vpp_base_addr_table, opm_return_ptr_fifo_xlat_table, and opm_return_ptr_fifo_vpp_base_addr_table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ecc_err_1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_vpp_base_addr_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo VPP base address
 *        table double-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_vpp_base_addr_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo VPP base address
 *        table single-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_vpp_base_addr_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo VPP base address
 *        table ECC error address. The address in the table
 *        where the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_retrun_ptr_fifo_xlat_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo tranlsation table
 *        double-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_retrun_ptr_fifo_xlat_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo tranlsation table
 *        single-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_retrun_ptr_fifo_xlat_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ manager return pointer fifo translation table
 *        ECC error address. The address in the table where
 *        the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_vpp_base_addr_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ manager VPP base address table double-bit error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_vpp_base_addr_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ manager VPP base address table single-bit error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_vpp_base_addr_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ manager VPP base address table ECC error address.
 *        The address in the table where the error occured.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ecc_err_1_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      opm_return_ptr_fifo_vpp_base_addr_dbe     :  1;
     unsigned      opm_return_ptr_fifo_vpp_base_addr_sbe     :  1;
     unsigned      reserved1                                 :  1;
     unsigned      opm_return_ptr_fifo_vpp_base_addr_ecc_err_addr  :  5;
     unsigned      opm_retrun_ptr_fifo_xlat_dbe              :  1;
     unsigned      opm_retrun_ptr_fifo_xlat_sbe              :  1;
     unsigned      reserved2                                 :  1;
     unsigned      opm_retrun_ptr_fifo_xlat_ecc_err_addr     :  5;
     unsigned      opm_vpp_base_addr_dbe                     :  1;
     unsigned      opm_vpp_base_addr_sbe                     :  1;
     unsigned      reserved3                                 :  1;
     unsigned      opm_vpp_base_addr_ecc_err_addr            :  5;
#else    /* Little Endian */
     unsigned      opm_vpp_base_addr_ecc_err_addr            :  5;
     unsigned      reserved3                                 :  1;
     unsigned      opm_vpp_base_addr_sbe                     :  1;
     unsigned      opm_vpp_base_addr_dbe                     :  1;
     unsigned      opm_retrun_ptr_fifo_xlat_ecc_err_addr     :  5;
     unsigned      reserved2                                 :  1;
     unsigned      opm_retrun_ptr_fifo_xlat_sbe              :  1;
     unsigned      opm_retrun_ptr_fifo_xlat_dbe              :  1;
     unsigned      opm_return_ptr_fifo_vpp_base_addr_ecc_err_addr  :  5;
     unsigned      reserved1                                 :  1;
     unsigned      opm_return_ptr_fifo_vpp_base_addr_sbe     :  1;
     unsigned      opm_return_ptr_fifo_vpp_base_addr_dbe     :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_ncap_ecc_err_1_reg_t;

/*! @struct ncp_ncap_otask_copy_cnt_reg_t
 *  @brief Output Task Copy Counter
 *  @details Counts the number of output tasks copied from the CPUs to the COW.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_copy_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_copy_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task copy count. The counter saturates at all
 *        ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_copy_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            otask_copy_cnt;
} ncp_ncap_otask_copy_cnt_reg_t;

/*! @struct ncp_ncap_otask_ncopy_cnt_reg_t
 *  @brief Output Task No Copy Counter
 *  @details Counts the number of output tasks that are passed by pointer reference from the CPUs to the COW.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_ncopy_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_ncopy_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task no copy count. The counter saturates at
 *        all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_ncopy_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int           otask_ncopy_cnt;
} ncp_ncap_otask_ncopy_cnt_reg_t;

/*! @struct ncp_ncap_itask_copy_cnt_reg_t
 *  @brief Input Task Copy Counter
 *  @details Counts the number of input tasks copied from the COW to the CPUs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_copy_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_copy_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Input task copy count. The counter saturates at all
 *        ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_copy_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            itask_copy_cnt;
} ncp_ncap_itask_copy_cnt_reg_t;

/*! @struct ncp_ncap_itask_ncopy_cnt_reg_t
 *  @brief Input Task No Copy Counter
 *  @details Counts the number of input tasks that are passed by pointer reference from the COW to the CPUs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_ncopy_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ncopy_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Input task no copy count. The counter saturates at
 *        all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_ncopy_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int           itask_ncopy_cnt;
} ncp_ncap_itask_ncopy_cnt_reg_t;

/*! @struct ncp_ncap_opm_return_ptr_fifo_hwm_reg_t
 *  @brief oPCQ Manager Return Pointer FIFO High Water Mark
 *  @details The depth at which the the input fifo of the opm_return_ptr_fifo block asserts backpressure to the oPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_return_ptr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_return_ptr_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. oPCQ manager return pointer FIFO high
 *        water mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_return_ptr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      opm_return_ptr_fifo_hwm                   :  7;
#else    /* Little Endian */
     unsigned      opm_return_ptr_fifo_hwm                   :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_opm_return_ptr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_cpu_to_vpp_hwm_reg_t
 *  @brief CPU to VPP Input FIFO High Water Mark
 *  @details The depth at which the the input fifo of the cpu to vpp translation table goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpu_to_vpp_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_to_vpp_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Cpu to vpp input FIFO high water mark.
 *        The fifo depth is 36.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpu_to_vpp_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      cpu_to_vpp_hwm                            :  6;
#else    /* Little Endian */
     unsigned      cpu_to_vpp_hwm                            :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_cpu_to_vpp_hwm_reg_t;

/*! @struct ncp_ncap_vpp_to_cpu_hwm_reg_t
 *  @brief VPP to CPU Input FIFO High Water Mark
 *  @details The depth at which the the input fifo of the vpp to cpu translation table goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_vpp_to_cpu_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_to_vpp_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Vpp to cpu input FIFO high water mark.
 *        The fifo depth is 32.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_vpp_to_cpu_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      cpu_to_vpp_hwm                            :  6;
#else    /* Little Endian */
     unsigned      cpu_to_vpp_hwm                            :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_vpp_to_cpu_hwm_reg_t;

/*! @struct ncp_ncap_reng_req_fifo_hwm_reg_t
 *  @brief Read Engine Request FIFO High Water Mark
 *  @details The depth at which the read engine request FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_reng_req_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Read engine request FIFO high water
 *        mark. The fifo depth is 12.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_reng_req_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      reng_req_fifo_hwm                         :  4;
#else    /* Little Endian */
     unsigned      reng_req_fifo_hwm                         :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_reng_req_fifo_hwm_reg_t;

/*! @struct ncp_ncap_cpm_reng_req_fifo_hwm_reg_t
 *  @brief CPM Read Engine Request FIFO High Water Mark
 *  @details The depth at which the CPM read engine request FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_reng_req_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_hwm </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Read engine request FIFO high water
 *        mark. The fifo depth is 2.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_reng_req_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      reng_req_fifo_hwm                         :  3;
#else    /* Little Endian */
     unsigned      reng_req_fifo_hwm                         :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_cpm_reng_req_fifo_hwm_reg_t;

/*! @struct ncp_ncap_weng_req_fifo_hwm_reg_t
 *  @brief Write Engine Request FIFO High Water Mark
 *  @details The depth at which the write engine request FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_weng_req_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Write engine request FIFO high water
 *        mark. The fifo depth is 12.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_weng_req_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      weng_req_fifo_hwm                         :  4;
#else    /* Little Endian */
     unsigned      weng_req_fifo_hwm                         :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_weng_req_fifo_hwm_reg_t;

/*! @struct ncp_ncap_cpm_weng_req_fifo_hwm_reg_t
 *  @brief CPM Write Engine Request FIFO High Water Mark
 *  @details The depth at which the CPM write engine request FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_weng_req_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_hwm </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Write engine request FIFO high water
 *        mark. The fifo depth is 2.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_weng_req_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      weng_req_fifo_hwm                         :  3;
#else    /* Little Endian */
     unsigned      weng_req_fifo_hwm                         :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_cpm_weng_req_fifo_hwm_reg_t;

/*! @struct ncp_ncap_weng_wdb_fifo_hwm_reg_t
 *  @brief Write Engine Write Data Buffer FIFO High Water Mark
 *  @details The depth at which the write engine write dta buffer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_weng_wdb_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Write engine write data buffer FIFO
 *        high water mark. The fifo depth is 32.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_weng_wdb_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      weng_wdb_fifo_hwm                         :  6;
#else    /* Little Endian */
     unsigned      weng_wdb_fifo_hwm                         :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_weng_wdb_fifo_hwm_reg_t;

/*! @struct ncp_ncap_pgit_weng_wdb_fifo_hwm_reg_t
 *  @brief PGIT Write Engine Write Data Buffer FIFO High Water Mark
 *  @details The depth at which the PGIT write engine write data buffer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_weng_wdb_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_wdb_fifo_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. PGIT write engine write data buffer
 *        FIFO high water mark. The fifo depth is 32.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_weng_wdb_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      pgit_weng_wdb_fifo_hwm                    :  6;
#else    /* Little Endian */
     unsigned      pgit_weng_wdb_fifo_hwm                    :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_pgit_weng_wdb_fifo_hwm_reg_t;

/*! @struct ncp_ncap_pcq_pgitr_fifo_hwm_reg_t
 *  @brief PCQ PGIT Read FIFO High Water Mark
 *  @details The depth at which the PCQ pgit read FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_pgitr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_pgitr_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. PCQ pgit read FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_pgitr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      pcq_pgitr_fifo_hwm                        :  4;
#else    /* Little Endian */
     unsigned      pcq_pgitr_fifo_hwm                        :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_pcq_pgitr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_xpcq_pgitr_fifo_hwm_reg_t
 *  @brief PCQ PGIT Read FIFO High Water Mark
 *  @details The depth at which the iPCQ pgit read FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xpcq_pgitr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_pgitr_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. PCQ pgit read FIFO high water mark.
 *        The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xpcq_pgitr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      pcq_pgitr_fifo_hwm                        :  5;
#else    /* Little Endian */
     unsigned      pcq_pgitr_fifo_hwm                        :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_xpcq_pgitr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_pcq_pgitw_fifo_hwm_reg_t
 *  @brief PCQ PGIT Write FIFO High Water Mark
 *  @details The depth at which the PCQ pgit write FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pcq_pgitw_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pcq_pgitw_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. PCQ pgit write FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pcq_pgitw_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      pcq_pgitw_fifo_hwm                        :  4;
#else    /* Little Endian */
     unsigned      pcq_pgitw_fifo_hwm                        :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_pcq_pgitw_fifo_hwm_reg_t;

/*! @struct ncp_ncap_cpm_prefetch_buf_fifo_hwm_reg_t
 *  @brief CPM cPCQ Entry Prefetch Buffer FIFO High Water Mark
 *  @details The depth at which the cPCQ Entry Prefetch Buffer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_prefetch_buf_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_prefetch_buf_fifo_hwm </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. CPM configuration request FIFO high
 *        water mark. The fifo depth is 4.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_prefetch_buf_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      cpm_prefetch_buf_fifo_hwm                 :  3;
#else    /* Little Endian */
     unsigned      cpm_prefetch_buf_fifo_hwm                 :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_cpm_prefetch_buf_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opcq_entry_ll_fifo_hwm_reg_t
 *  @brief oPCQ Entry Linked List FIFO High Water Mark
 *  @details The depth at which the oPCQ entry linked list FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_entry_ll_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_ll_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. oPCQ entry linked list IFO high water
 *        mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_entry_ll_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      opcq_entry_ll_fifo_hwm                    :  7;
#else    /* Little Endian */
     unsigned      opcq_entry_ll_fifo_hwm                    :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_opcq_entry_ll_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opcq_index_fifo_hwm_reg_t
 *  @brief oPCQ Index FIFO High Water Mark
 *  @details The depth at which the oPCQ index FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_index_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. oPCQ index FIFO high water mark. The
 *        fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_index_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      opcq_index_fifo_hwm                       :  5;
#else    /* Little Endian */
     unsigned      opcq_index_fifo_hwm                       :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_opcq_index_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opcq_pdu_len_fifo_hwm_reg_t
 *  @brief FIFO High Water Mark
 *  @details The depth at which the oPCQ PDU Length FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_pdu_len_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_pdu_len_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. oPCQ pdu length FIFO high water mark.
 *        The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_pdu_len_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      opcq_pdu_len_fifo_hwm                     :  5;
#else    /* Little Endian */
     unsigned      opcq_pdu_len_fifo_hwm                     :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_opcq_pdu_len_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opcq_index_update_fifo_hwm_reg_t
 *  @brief opCQ Index Update FIFO High Water Mark
 *  @details The depth at which the oPCQ index update FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_index_update_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_update_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. oPCQ index update FIFO high water
 *        mark. The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_index_update_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      opcq_index_update_fifo_hwm                :  5;
#else    /* Little Endian */
     unsigned      opcq_index_update_fifo_hwm                :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_opcq_index_update_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_read_req_fifo_hwm_reg_t
 *  @brief OPM Read Request FIFO High Water Mark
 *  @details The depth at which the OPM read request FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_read_req_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_read_req_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM read request FIFO high water mark.
 *        The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_read_req_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      opm_read_req_fifo_hwm                     :  7;
#else    /* Little Endian */
     unsigned      opm_read_req_fifo_hwm                     :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_opm_read_req_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_no_copy_ptr_fifo_hwm_reg_t
 *  @brief OPM No Copy Pointer FIFO High Water Mark
 *  @details The depth at which the OPM no copy pointer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_no_copy_ptr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_no_copy_ptr_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM no copy pointer FIFO high water
 *        mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_no_copy_ptr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      opm_no_copy_ptr_fifo_hwm                  :  7;
#else    /* Little Endian */
     unsigned      opm_no_copy_ptr_fifo_hwm                  :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_opm_no_copy_ptr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_odb_fifo_hwm_reg_t
 *  @brief Output Task Data Buffer FIFO High Water Mark
 *  @details The depth at which the ODB FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_odb_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_hwm </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. ODB FIFO high water mark. The fifo
 *        depth is 4.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_odb_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      odb_fifo_hwm                              :  3;
#else    /* Little Endian */
     unsigned      odb_fifo_hwm                              :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_odb_fifo_hwm_reg_t;

/*! @struct ncp_ncap_idb_fifo_hwm_reg_t
 *  @brief Input Task Data Buffer FIFO High Water Mark
 *  @details The depth at which the IDB FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_idb_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. IDB FIFO high water mark. The fifo
 *        depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_idb_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      odb_fifo_hwm                              :  4;
#else    /* Little Endian */
     unsigned      odb_fifo_hwm                              :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_idb_fifo_hwm_reg_t;

/*! @struct ncp_ncap_itask_header_fifo_hwm_reg_t
 *  @brief Input Task Header FIFO High Water Mark
 *  @details The depth at which the input task header FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_header_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Input task header FIFO high water
 *        mark. The fifo depth is 48.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_header_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      itask_header_fifo_hwm                     :  6;
#else    /* Little Endian */
     unsigned      itask_header_fifo_hwm                     :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_itask_header_fifo_hwm_reg_t;

/*! @struct ncp_ncap_itask_qid_fifo_hwm_reg_t
 *  @brief Input Task QID FIFO High Water Mark
 *  @details The depth at which the input task QID FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_qid_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Input task QID FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_qid_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      itask_qid_fifo_hwm                        :  4;
#else    /* Little Endian */
     unsigned      itask_qid_fifo_hwm                        :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_itask_qid_fifo_hwm_reg_t;

/*! @struct ncp_ncap_itask_ptr_fifo_hwm_reg_t
 *  @brief Input Task Pointer FIFO High Water Mark
 *  @details The depth at which the input task pointer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_ptr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 23 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ptr_fifo_hwm </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Input task pointer FIFO high weter
 *        mark. The fifo depth is 256.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_ptr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 23;
     unsigned      itask_ptr_fifo_hwm                        :  9;
#else    /* Little Endian */
     unsigned      itask_ptr_fifo_hwm                        :  9;
     unsigned      reserved0                                 : 23;
#endif
} ncp_ncap_itask_ptr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_itask_delete_tid_fifo_hwm_reg_t
 *  @brief Input Task Delete TID FIFO High Water Mark
 *  @details The depth at which the input task delete TID FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_delete_tid_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Input task delete TID FIFO high water
 *        mark. The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_delete_tid_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      itask_delete_tid_fifo_hwm                 :  5;
#else    /* Little Endian */
     unsigned      itask_delete_tid_fifo_hwm                 :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_itask_delete_tid_fifo_hwm_reg_t;

/*! @struct ncp_ncap_tcri_data_fifo_hwm_reg_t
 *  @brief TCRI Data FIFO High Water Mark
 *  @details The depth at which the TCRI data FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_tcri_data_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_hwm4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. TCRI data FIFO high water mark. The
 *        fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_tcri_data_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      tcri_data_fifo_hwm4                       :  4;
#else    /* Little Endian */
     unsigned      tcri_data_fifo_hwm4                       :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_tcri_data_fifo_hwm_reg_t;

/*! @struct ncp_ncap_debug_data_fifo_hwm_reg_t
 *  @brief Debug Data FIFO High Water Mark
 *  @details The depth at which the debug data FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_debug_data_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param debug_data_fifo_hwm </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. Debug data FIFO high water mark. The
 *        fifo depth is 4.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_debug_data_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      debug_data_fifo_hwm                       :  3;
#else    /* Little Endian */
     unsigned      debug_data_fifo_hwm                       :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_debug_data_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_cpcq_entry_fifo_hwm_reg_t
 *  @brief OPM cPCQ Entry FIFO High Water Mark
 *  @details The depth at which the OPM cPCQ Entry FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_cpcq_entry_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_cpcq_entry_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM cPCQ entry FIFO high water mark.
 *        The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_cpcq_entry_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      opm_cpcq_entry_fifo_hwm                   :  5;
#else    /* Little Endian */
     unsigned      opm_cpcq_entry_fifo_hwm                   :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_opm_cpcq_entry_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_brsp_fifo_hwm_reg_t
 *  @brief OPM MOI Bresponse FIFO High Water Mark
 *  @details The depth at which the OPM MII bresponse FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_brsp_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_brsp_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM MOI bresp FIFO high water mark.
 *        The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_brsp_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      opm_brsp_fifo_hwm                         :  5;
#else    /* Little Endian */
     unsigned      opm_brsp_fifo_hwm                         :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_opm_brsp_fifo_hwm_reg_t;

/*! @struct ncp_ncap_ipm_brsp_fifo_hwm_reg_t
 *  @brief IPM MOI Bresponse FIFO High Water Mark
 *  @details The depth at which the IPM MII bresponse FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_brsp_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_brsp_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM MOI bresp FIFO high water mark.
 *        The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_brsp_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      ipm_brsp_fifo_hwm                         :  5;
#else    /* Little Endian */
     unsigned      ipm_brsp_fifo_hwm                         :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_ipm_brsp_fifo_hwm_reg_t;

/*! @struct ncp_ncap_ipm_moi_addr_fifo_hwm_reg_t
 *  @brief IPM MOI Address FIFO High Water Mark
 *  @details The depth at which the IPM message output interface address FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_addr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_moi_addr_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. IPM MOI address FIFO high water mark.
 *        The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_addr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      ipm_moi_addr_fifo_hwm                     :  7;
#else    /* Little Endian */
     unsigned      ipm_moi_addr_fifo_hwm                     :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_ipm_moi_addr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_ipm_moi_data_fifo_hwm_reg_t
 *  @brief IPM MOI DATA FIFO High Water Mark
 *  @details The depth at which the IPM message output interface data FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_data_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_moi_data_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. IPM MOI data FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_data_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      ipm_moi_data_fifo_hwm                     :  4;
#else    /* Little Endian */
     unsigned      ipm_moi_data_fifo_hwm                     :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_ipm_moi_data_fifo_hwm_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_entry_ll_fifo_hwm_reg_t
 *  @brief IPM iPCQ Entry Linked List FIFO High Water Mark
 *  @details The depth at which the iPCQ Entry linked list FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_entry_ll_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ipcq_entry_ll_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. IPM iPCQ entry linked list FIFO high
 *        water mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_entry_ll_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      ipm_ipcq_entry_ll_fifo_hwm                :  7;
#else    /* Little Endian */
     unsigned      ipm_ipcq_entry_ll_fifo_hwm                :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_ipm_ipcq_entry_ll_fifo_hwm_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_entry_buf_fifo_hwm_reg_t
 *  @brief IPM iPCQ Entry Buffer FIFO High Water Mark
 *  @details The depth at which the iPCQ Entry Buffer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_entry_buf_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_ipcq_entry_buf_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. IPM iPCQ entry buffer FIFO high water
 *        mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_entry_buf_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      ipm_ipcq_entry_buf_fifo_hwm               :  7;
#else    /* Little Endian */
     unsigned      ipm_ipcq_entry_buf_fifo_hwm               :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_ipm_ipcq_entry_buf_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_atfc_ll_fifo_hwm_reg_t
 *  @brief OPM Auto Task Flow Completion Linked List FIFO High Water Mark
 *  @details The depth at which the OPM auto task fow completion linked list FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_atfc_ll_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_atfc_ll_fifo_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM auto task flow completion linked
 *        list FIFO high water mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_atfc_ll_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      opm_atfc_ll_fifo_hwm                      :  6;
#else    /* Little Endian */
     unsigned      opm_atfc_ll_fifo_hwm                      :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_opm_atfc_ll_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_moi_addr_fifo_hwm_reg_t
 *  @brief OPM MOI Address FIFO High Water Mark
 *  @details The depth at which the OPM message output interface address FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_moi_addr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_moi_addr_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM MOI address FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_moi_addr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      opm_moi_addr_fifo_hwm                     :  4;
#else    /* Little Endian */
     unsigned      opm_moi_addr_fifo_hwm                     :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_opm_moi_addr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_moi_data_fifo_hwm_reg_t
 *  @brief OPM MOI DATA FIFO High Water Mark
 *  @details The depth at which the OPM message output interface data FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_moi_data_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_moi_data_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM MOI bresp FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_moi_data_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      opm_moi_data_fifo_hwm                     :  4;
#else    /* Little Endian */
     unsigned      opm_moi_data_fifo_hwm                     :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_opm_moi_data_fifo_hwm_reg_t;

/*! @struct ncp_ncap_opm_prefetch_buf_fifo_hwm_reg_t
 *  @brief OPM oPCQ Entry Prefetch Buffer FIFO High Water Mark
 *  @details The depth at which the oPCQ Entry Prefetch Buffer FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_prefetch_buf_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_prefetch_buf_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. OPM configuration request FIFO high
 *        water mark. The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_prefetch_buf_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      opm_prefetch_buf_fifo_hwm                 :  4;
#else    /* Little Endian */
     unsigned      opm_prefetch_buf_fifo_hwm                 :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_opm_prefetch_buf_fifo_hwm_reg_t;

/*! @struct ncp_ncap_xlate_err_drop_cnt_reg_t
 *  @brief Translation Error Drop Counter
 *  @details This register contains an 8-bit translation error drop counter, along with some other data.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_drop_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param drop_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Translation error drop count. This is the count of
 *        the number of pointers dropped when an address translation
 *        error occurs. The counter saturates at all ones. When
 *        the counter first goes non zero, it stores the VA,
 *        VI, and buffer size code of the first bad translation.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param buffer_size </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Buffer size. When drop_cnt is non zero, this field
 *        contains the 2-bit size code of the first buffer dropped
 *        due to a translation error. This field is cleared
 *        when drop_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vi_high </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual index high. When drop_cnt is non zero, this
 *        field contains the 4 MSBs of the 36-bit virtual index
 *        of the first buffer dropped due to a translation error.
 *        This field is cleared when drop_cnt is written to
 *        zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_drop_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      drop_cnt                                  :  8;
     unsigned      reserved0                                 :  6;
     unsigned      buffer_size                               :  2;
     unsigned      reserved1                                 : 12;
     unsigned      vi_high                                   :  4;
#else    /* Little Endian */
     unsigned      vi_high                                   :  4;
     unsigned      reserved1                                 : 12;
     unsigned      buffer_size                               :  2;
     unsigned      reserved0                                 :  6;
     unsigned      drop_cnt                                  :  8;
#endif
} ncp_ncap_xlate_err_drop_cnt_reg_t;

/*! @struct ncp_ncap_xlate_err_vi_low_reg_t
 *  @brief Translation Error Virtual Index Low
 *  @details This register contains the 32 LSBs of a 36-bit virtual index captured during a translation error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_vi_low_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param vi_low </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual index low. When the corresponding drop_cnt
 *        is non zero, this field contains the 32 LSBs of the
 *        36-bit virtual index of the first buffer dropped due
 *        to a translation error. This field is cleared when
 *        drop_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_vi_low_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                    vi_low;
} ncp_ncap_xlate_err_vi_low_reg_t;

/*! @struct ncp_ncap_xlate_err_va_high_reg_t
 *  @brief Translation Error Virtual Address High
 *  @details This register contains the 32 MSBs of a 64-bit virtual address captured during a translation error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_va_high_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param va_high </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual address high. When the corresponding drop_cnt
 *        is non zero, this field contains the 32 MSBs of the
 *        64-bit virtual address of the first buffer dropped
 *        due to a translation error. This field is cleared
 *        when drop_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_va_high_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                   va_high;
} ncp_ncap_xlate_err_va_high_reg_t;

/*! @struct ncp_ncap_xlate_err_va_low_reg_t
 *  @brief Translation Error Virtual Address Low
 *  @details This register contains the 32 LSBs of a 64-bit virtual address captured during a translation error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_va_low_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param va_low </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual address low. When the corresponding drop_cnt
 *        is non zero, this field contains the 32 LSBs of the
 *        64-bit virtual address of the first buffer dropped
 *        due to a translation error. This field is cleared
 *        when drop_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_va_low_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                    va_low;
} ncp_ncap_xlate_err_va_low_reg_t;

/*! @struct ncp_ncap_xlate_err_cnt_reg_t
 *  @brief Translation Error Counter
 *  @details This register contains an 8-bit translation error counter, along with some other data.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Translation error count. This is the count of the
 *        number of address translation errors. The counter
 *        saturates at all ones. When the counter first goes
 *        non zero, it stores the VA, VI, and buffer size code
 *        of the first bad translation.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param buffer_size </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Buffer size. When cnt is non zero, this field contains
 *        the 2-bit size code of the first buffer with a translation
 *        error. This field is cleared when cnt is written to
 *        zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vi_high </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual index high. When cnt is non zero, this field
 *        contains the 4 MSBs of the 36-bit virtual index of
 *        the buffer with the translation error. This field
 *        is cleared when cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cnt                                       :  8;
     unsigned      reserved0                                 :  6;
     unsigned      buffer_size                               :  2;
     unsigned      reserved1                                 : 12;
     unsigned      vi_high                                   :  4;
#else    /* Little Endian */
     unsigned      vi_high                                   :  4;
     unsigned      reserved1                                 : 12;
     unsigned      buffer_size                               :  2;
     unsigned      reserved0                                 :  6;
     unsigned      cnt                                       :  8;
#endif
} ncp_ncap_xlate_err_cnt_reg_t;

/*! @struct ncp_ncap_xlate_err_cnt_vi_low_reg_t
 *  @brief Translation Error Count Virtual Index Low
 *  @details This register contains the 32 LSBs of a 36-bit virtual index captured during a translation error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_cnt_vi_low_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param vi_low </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual index low. When the corresponding cnt is non
 *        zero, this field contains the 32 LSBs of the 36-bit
 *        virtual index of the first buffer with a translation
 *        error. This field is cleared when cnt is written to
 *        zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_cnt_vi_low_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                    vi_low;
} ncp_ncap_xlate_err_cnt_vi_low_reg_t;

/*! @struct ncp_ncap_xlate_err_cnt_va_high_reg_t
 *  @brief Translation Error Count Virtual Address High
 *  @details This register contains the 32 MSBs of a 64-bit virtual address captured during a translation error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_cnt_va_high_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param va_high </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual address high. When the corresponding cnt is
 *        non zero, this field contains the 32 MSBs of the 64-bit
 *        virtual address of the first buffer with a translation
 *        error. This field is cleared when cnt is written to
 *        zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_cnt_va_high_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                   va_high;
} ncp_ncap_xlate_err_cnt_va_high_reg_t;

/*! @struct ncp_ncap_xlate_err_cnt_va_low_reg_t
 *  @brief Translation Error Count Virtual Address Low
 *  @details This register contains the 32 LSBs of a 64-bit virtual address captured during a translation error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_xlate_err_cnt_va_low_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param va_low </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Virtual address low. When the corresponding cnt is
 *        non zero, this field contains the 32 LSBs of the 64-bit
 *        virtual address of the first buffer with a translation
 *        error. This field is cleared when cnt is written to
 *        zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_xlate_err_cnt_va_low_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                    va_low;
} ncp_ncap_xlate_err_cnt_va_low_reg_t;

/*! @struct ncp_ncap_itask_ptr_cnt_reg_t
 *  @brief Input Task Pointer Counter
 *  @details Counts the number of pointers in the input tasks received from the COW that are not dropped.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_ptr_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ptr_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Input task pointer count. This is the count of the
 *        number of pointers in the tasks received from the
 *        COW that are not dropped. The counter saturates at
 *        all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_ptr_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int             itask_ptr_cnt;
} ncp_ncap_itask_ptr_cnt_reg_t;

/*! @struct ncp_ncap_otask_ptr_cnt_reg_t
 *  @brief Output Task Pointer Counter
 *  @details Counts the number of pointers in the output tasks received from the CPUs that are not dropped.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_ptr_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_ptr_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task pointer count. This is the count of the
 *        number of pointers in the tasks received from the
 *        CPUs that are not dropped. The counter saturates at
 *        all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_ptr_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int             otask_ptr_cnt;
} ncp_ncap_otask_ptr_cnt_reg_t;

/*! @struct ncp_ncap_state_machine_reg_t
 *  @brief State Machine Register
 *  @details This register shows the current state of internal state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_state_machine_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param internal_state </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This register is a place holder to allow the initial
 *        release of rdl. Detailed state register definitions
 *        will replace this in future releases. Refer to the
 *        rtl for more information.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_state_machine_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            internal_state;
} ncp_ncap_state_machine_reg_t;

/*! @struct ncp_ncap_mme_fifo_ptr_kept_cnt_reg_t
 *  @brief MME FIFO Pointer Kept Counter
 *  @details Counts the number pointers returned by the CPU that are stored locally instead of being passed to the MME.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_fifo_ptr_kept_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mme_fifo_ptr_kept_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME FIFO pointer kept count. This is the count of
 *        the number pointers returned by the CPU that are stored
 *        locally instead of being passed to the MME. The counter
 *        saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_fifo_ptr_kept_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      mme_fifo_ptr_kept_cnt;
} ncp_ncap_mme_fifo_ptr_kept_cnt_reg_t;

/*! @struct ncp_ncap_mme_fifo_ptr_return_cnt_reg_t
 *  @brief MME FIFO Pointer Return Counter
 *  @details Counts the number pointers returned by the CPU that are passed to the MME.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_fifo_ptr_return_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mme_fifo_ptr_return_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME FIFO pointer return count. This is the count of
 *        the number pointers returned by the CPU that are passed
 *        to the MME. The counter saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_fifo_ptr_return_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      mme_fifo_ptr_return_cnt;
} ncp_ncap_mme_fifo_ptr_return_cnt_reg_t;

/*! @struct ncp_ncap_mme_fifo_ptr_req_cnt_reg_t
 *  @brief MME FIFO Pointer Request Counter
 *  @details Counts the number pointer requests made by the MME FIFO to the MME.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_fifo_ptr_req_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mme_fifo_ptr_req_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME FIFO pointer request count. This is the count
 *        of the number of pointer requests made by the MME
 *        FIFO to the MME. The counter saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_fifo_ptr_req_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      mme_fifo_ptr_req_cnt;
} ncp_ncap_mme_fifo_ptr_req_cnt_reg_t;

/*! @struct ncp_ncap_mme_fifo_ptr_rcv_cnt_reg_t
 *  @brief MME FIFO Pointer Received Counter
 *  @details Counts the number pointers received from the MME.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mme_fifo_ptr_rcv_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mme_fifo_ptr_rcv_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME FIFO pointer received count. This is the count
 *        of the number pointers receved from the MME in response
 *        to pointer requests. The counter saturates at all
 *        ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mme_fifo_ptr_rcv_cnt_reg_t
 *
 */
 
typedef struct
{
     unsigned  int      mme_fifo_ptr_rcv_cnt;
} ncp_ncap_mme_fifo_ptr_rcv_cnt_reg_t;

/*! @struct ncp_ncap_otask_drop_cnt_reg_t
 *  @brief Output Task Drop Counter
 *  @details Counts the number of output tasks dropped due to address translation and pool ID errors.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_otask_drop_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_drop_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task drop count. This is the count of the number
 *        of output tasks dropped due to address translation
 *        and pool ID errors. The counter saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_otask_drop_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      otask_drop_cnt                            :  8;
#else    /* Little Endian */
     unsigned      otask_drop_cnt                            :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_otask_drop_cnt_reg_t;

/*! @struct ncp_ncap_task_cmplt_buf_dealloc_drop_cnt_reg_t
 *  @brief Task Complete Buffer Dellocate Drop Counter
 *  @details Counts the number of task completion and buffer dellocate oPCQ entries dropped due to address translation and pool ID errors.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_task_cmplt_buf_dealloc_drop_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param task_cmplt_buf_dealloc_drop_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Task competion buffer deallocate drop count. This
 *        is the count of task completion and buffer dellocate
 *        oPCQ entries dropped due to address translation and
 *        pool ID errors. The counter saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_task_cmplt_buf_dealloc_drop_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      task_cmplt_buf_dealloc_drop_cnt           :  8;
#else    /* Little Endian */
     unsigned      task_cmplt_buf_dealloc_drop_cnt           :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_task_cmplt_buf_dealloc_drop_cnt_reg_t;

/*! @struct ncp_ncap_dealloc_immediate_drop_cnt_reg_t
 *  @brief Dellocate Immediate Drop Counter
 *  @details Counts the dellocate immediate oPCQ entries dropped due to pool ID errors.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_dealloc_immediate_drop_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dealloc_immediate_drop_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Deallocate immediate drop count. This is the count
 *        of dellocate immediate oPCQ entries dropped due to
 *        pool ID errors. The counter saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_dealloc_immediate_drop_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      dealloc_immediate_drop_cnt                :  8;
#else    /* Little Endian */
     unsigned      dealloc_immediate_drop_cnt                :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_dealloc_immediate_drop_cnt_reg_t;

/*! @struct ncp_ncap_invalid_command_drop_cnt_reg_t
 *  @brief Invalid Command Drop Counter
 *  @details Counts the number oPCQ entries dropped due a command code of zero or an out of sequence VP_TASK_EXT command.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_invalid_command_drop_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param invalid_command_drop_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Invalid command drop count. This is the count of the
 *        number oPCQ entries dropped due a command code of
 *        zero or an out of sequence VP_TASK_EXT command. The
 *        counter saturates at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_invalid_command_drop_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      invalid_command_drop_cnt                  :  8;
#else    /* Little Endian */
     unsigned      invalid_command_drop_cnt                  :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_invalid_command_drop_cnt_reg_t;

/*! @struct ncp_ncap_oepb_unload_state_reg_t
 *  @brief oPCQ Entry Prefetch Buffer Unload State Register
 *  @details This register shows the current state of the oepb_unload_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_oepb_unload_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 20 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param oepb_unload_state_q </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the oepb_unload_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_oepb_unload_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 20;
     unsigned      oepb_unload_state_q                       : 12;
#else    /* Little Endian */
     unsigned      oepb_unload_state_q                       : 12;
     unsigned      reserved0                                 : 20;
#endif
} ncp_ncap_oepb_unload_state_reg_t;

/*! @struct ncp_ncap_oeqb_unload_state_reg_t
 *  @brief oPCQ Entry Quadword Buffer Unload State Register
 *  @details This register shows the current state of the oeqb_unload_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_oeqb_unload_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 20 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param oeqb_unload_state_q </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the oeqb_unload_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_oeqb_unload_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 20;
     unsigned      oeqb_unload_state_q                       : 12;
#else    /* Little Endian */
     unsigned      oeqb_unload_state_q                       : 12;
     unsigned      reserved0                                 : 20;
#endif
} ncp_ncap_oeqb_unload_state_reg_t;

/*! @struct ncp_ncap_get_opcq_entry_state_reg_t
 *  @brief Get oPCQ Entry State Register
 *  @details This register shows the current state of the get_opcq_entry_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_get_opcq_entry_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param get_opcq_entry_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the get_opcq_entry_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_get_opcq_entry_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      get_opcq_entry_state_q                    :  3;
#else    /* Little Endian */
     unsigned      get_opcq_entry_state_q                    :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_get_opcq_entry_state_reg_t;

/*! @struct ncp_ncap_opm_state_reg_t
 *  @brief oPCQ Manager State Register
 *  @details This register shows the current state of the task_cmplt_ptr_return_state_q and tdgl_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param task_cmplt_ptr_return_state_q </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the task_cmplt_ptr_return_state_q
 *        state machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tdgl_access_state_q </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the tdgl_access_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      task_cmplt_ptr_return_state_q             :  7;
     unsigned      reserved1                                 :  5;
     unsigned      tdgl_access_state_q                       : 11;
#else    /* Little Endian */
     unsigned      tdgl_access_state_q                       : 11;
     unsigned      reserved1                                 :  5;
     unsigned      task_cmplt_ptr_return_state_q             :  7;
     unsigned      reserved0                                 :  9;
#endif
} ncp_ncap_opm_state_reg_t;

/*! @struct ncp_ncap_opm_opcq_state_reg_t
 *  @brief oPCQ Manager oPCQ State Register
 *  @details This register shows the current state of the opcq_load_index_tbl_state_q, opcq_pcq_entry_add_state_q, and opcq_as_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_opcq_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_load_index_tbl_state_q </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the opcq_load_index_tbl_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_pcq_entry_add_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the opcq_pcq_entry_add_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_as_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the opcq_as_acces_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_opcq_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      opcq_load_index_tbl_state_q               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      opcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved2                                 : 13;
     unsigned      opcq_as_access_state_q                    :  3;
#else    /* Little Endian */
     unsigned      opcq_as_access_state_q                    :  3;
     unsigned      reserved2                                 : 13;
     unsigned      opcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved1                                 :  5;
     unsigned      opcq_load_index_tbl_state_q               :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_opm_opcq_state_reg_t;

/*! @struct ncp_ncap_opm_read_write_engine_state_reg_t
 *  @brief oPCQ Manager Read and Write Engine State Register
 *  @details This register shows the current state of the weng_write_op_state_q, opcq_entry_reng_read_op_state_q, and otask_data_reng_read_op_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_read_write_engine_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_write_op_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the weng_write_op_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_reng_read_op_state_q </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the opcq_entry_reng_read_op_state_q
 *        state machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_read_write_engine_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 12;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved1                                 : 11;
     unsigned      opcq_entry_reng_read_op_state_q           :  5;
#else    /* Little Endian */
     unsigned      opcq_entry_reng_read_op_state_q           :  5;
     unsigned      reserved1                                 : 11;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved0                                 : 12;
#endif
} ncp_ncap_opm_read_write_engine_state_reg_t;

/*! @struct ncp_ncap_cpcq_num_entries_outstanding_reg_t
 *  @brief cPCQ Number of Entries Outstanding Table
 *  @details This table contains a 4-bit count for each of the 8 cPCQs that indicates of the outstanding number of entries in process.  Each 32-bit word in the table contains a count for four cPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpcq_num_entries_outstanding_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of entries 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of entries 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of entries 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of entries 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpcq_num_entries_outstanding_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      outstand_num_entries_3                    :  4;
     unsigned      reserved1                                 :  4;
     unsigned      outstand_num_entries_2                    :  4;
     unsigned      reserved2                                 :  4;
     unsigned      outstand_num_entries_1                    :  4;
     unsigned      reserved3                                 :  4;
     unsigned      outstand_num_entries_0                    :  4;
#else    /* Little Endian */
     unsigned      outstand_num_entries_0                    :  4;
     unsigned      reserved3                                 :  4;
     unsigned      outstand_num_entries_1                    :  4;
     unsigned      reserved2                                 :  4;
     unsigned      outstand_num_entries_2                    :  4;
     unsigned      reserved1                                 :  4;
     unsigned      outstand_num_entries_3                    :  4;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_cpcq_num_entries_outstanding_reg_t;

/*! @struct ncp_ncap_opcq_num_entries_outstanding_reg_t
 *  @brief oPCQ Number of Entries Outstanding Table
 *  @details This table contains a count for each of the 16 oPCQs that indicates of the outstanding number of entries in process.  Each 32-bit word in the table contains a count for four oPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_num_entries_outstanding_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of entries 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of entries 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of entries 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of entries 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_num_entries_outstanding_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      outstand_num_entries_3                    :  5;
     unsigned      reserved1                                 :  3;
     unsigned      outstand_num_entries_2                    :  5;
     unsigned      reserved2                                 :  3;
     unsigned      outstand_num_entries_1                    :  5;
     unsigned      reserved3                                 :  3;
     unsigned      outstand_num_entries_0                    :  5;
#else    /* Little Endian */
     unsigned      outstand_num_entries_0                    :  5;
     unsigned      reserved3                                 :  3;
     unsigned      outstand_num_entries_1                    :  5;
     unsigned      reserved2                                 :  3;
     unsigned      outstand_num_entries_2                    :  5;
     unsigned      reserved1                                 :  3;
     unsigned      outstand_num_entries_3                    :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_opcq_num_entries_outstanding_reg_t;

/*! @struct ncp_ncap_opcq_fc_rsp_cnt_reg_t
 *  @brief oPCQ Flow Control Response Count Table
 *  @details This table shows the value of each of the 16 flow control counters of the oPCQ manager.  Each 32-bit word in the table contains a count for four oPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_fc_rsp_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_fc_rsp_cnt_3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ flow control response count 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_fc_rsp_cnt_2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ flow control response count 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_fc_rsp_cnt_1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ flow control response count 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_fc_rsp_cnt_0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ flow control response count 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_fc_rsp_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      opcq_fc_rsp_cnt_3                         :  5;
     unsigned      reserved1                                 :  3;
     unsigned      opcq_fc_rsp_cnt_2                         :  5;
     unsigned      reserved2                                 :  3;
     unsigned      opcq_fc_rsp_cnt_1                         :  5;
     unsigned      reserved3                                 :  3;
     unsigned      opcq_fc_rsp_cnt_0                         :  5;
#else    /* Little Endian */
     unsigned      opcq_fc_rsp_cnt_0                         :  5;
     unsigned      reserved3                                 :  3;
     unsigned      opcq_fc_rsp_cnt_1                         :  5;
     unsigned      reserved2                                 :  3;
     unsigned      opcq_fc_rsp_cnt_2                         :  5;
     unsigned      reserved1                                 :  3;
     unsigned      opcq_fc_rsp_cnt_3                         :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_opcq_fc_rsp_cnt_reg_t;

/*! @struct ncp_ncap_odb_data_state_reg_t
 *  @brief Output Task Data Buffer State Register
 *  @details This register shows the current state of the odb_data_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_odb_data_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_data_state_q </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the odb_data_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_odb_data_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      odb_data_state_q                          :  7;
#else    /* Little Endian */
     unsigned      odb_data_state_q                          :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_odb_data_state_reg_t;

/*! @struct ncp_ncap_itask_unload_hdr_state_reg_t
 *  @brief Input Task Unload Header State Register
 *  @details This register shows the current state of the get_ipcq_entry_state_q, get_rbuf_state_q, and itask_unload_hdr_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_itask_unload_hdr_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param get_ipcq_entry_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the get_ipcq_entry_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param get_rbuf_state_q </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the get_rbuf_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_unload_hdr_state_q </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the itask_unload_hdr_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_itask_unload_hdr_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      get_ipcq_entry_state_q                    :  4;
     unsigned      reserved1                                 :  6;
     unsigned      get_rbuf_state_q                          :  2;
     unsigned      reserved2                                 :  6;
     unsigned      itask_unload_hdr_state_q                  : 10;
#else    /* Little Endian */
     unsigned      itask_unload_hdr_state_q                  : 10;
     unsigned      reserved2                                 :  6;
     unsigned      get_rbuf_state_q                          :  2;
     unsigned      reserved1                                 :  6;
     unsigned      get_ipcq_entry_state_q                    :  4;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_itask_unload_hdr_state_reg_t;

/*! @struct ncp_ncap_ipm_hdr_proc_state_reg_t
 *  @brief iPCQ Manager Header Processing State Register
 *  @details This register shows the current state of the get_itask_ptr_state_q, rvct_acc_state_q, and tcri_req_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_hdr_proc_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param get_itask_ptr_state_q </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the get_itask_ptr_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_acc_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the rvct_acc_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_req_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the tcri_req_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_hdr_proc_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      get_itask_ptr_state_q                     :  2;
     unsigned      reserved1                                 :  5;
     unsigned      rvct_acc_state_q                          :  3;
     unsigned      reserved2                                 : 12;
     unsigned      tcri_req_state_q                          :  4;
#else    /* Little Endian */
     unsigned      tcri_req_state_q                          :  4;
     unsigned      reserved2                                 : 12;
     unsigned      rvct_acc_state_q                          :  3;
     unsigned      reserved1                                 :  5;
     unsigned      get_itask_ptr_state_q                     :  2;
     unsigned      reserved0                                 :  6;
#endif
} ncp_ncap_ipm_hdr_proc_state_reg_t;

/*! @struct ncp_ncap_ipm_task_wr_state_reg_t
 *  @brief iPCQ Manager Task Write State Register
 *  @details This register shows the current state of the wr_itask_data_state_q and wr_itask_addr_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_task_wr_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param wr_itask_data_state_q </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the wr_itask_data_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param wr_itask_addr_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the wr_itask_addr_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_task_wr_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      wr_itask_data_state_q                     : 10;
     unsigned      reserved1                                 : 13;
     unsigned      wr_itask_addr_state_q                     :  3;
#else    /* Little Endian */
     unsigned      wr_itask_addr_state_q                     :  3;
     unsigned      reserved1                                 : 13;
     unsigned      wr_itask_data_state_q                     : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_ncap_ipm_task_wr_state_reg_t;

/*! @struct ncp_ncap_rvct_as_access_state_reg_t
 *  @brief Receive Virtual Pipeline Control Table AXI Slave Access State Register
 *  @details This register shows the current state of the as_access_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_rvct_as_access_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param as_access_state_q </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the as_access_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_rvct_as_access_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      as_access_state_q                         :  5;
#else    /* Little Endian */
     unsigned      as_access_state_q                         :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_rvct_as_access_state_reg_t;

/*! @struct ncp_ncap_get_apcq_entry_state_reg_t
 *  @brief Get aPCQ entry State Register
 *  @details This register shows the current state of the get_apcq_entry_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_get_apcq_entry_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param get_apcq_entry_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the get_apcq_entry_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_get_apcq_entry_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      get_apcq_entry_state_q                    :  3;
#else    /* Little Endian */
     unsigned      get_apcq_entry_state_q                    :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_get_apcq_entry_state_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_state_reg_t
 *  @brief iPCQ Manager iPCQ State Register
 *  @details This register shows the current state of the ipcq_load_index_tbl_state_q, ipcq_pcq_entry_add_state_q, and ipcq_as_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_load_index_tbl_state_q </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the ipcq_load_index_tbl_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_pcq_entry_add_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the ipcq_pcq_entry_add_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_as_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the ipcq_as_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      ipcq_load_index_tbl_state_q               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      ipcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved2                                 : 13;
     unsigned      ipcq_as_access_state_q                    :  3;
#else    /* Little Endian */
     unsigned      ipcq_as_access_state_q                    :  3;
     unsigned      reserved2                                 : 13;
     unsigned      ipcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved1                                 :  5;
     unsigned      ipcq_load_index_tbl_state_q               :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_ipm_ipcq_state_reg_t;

/*! @struct ncp_ncap_ipm_apcq_state_reg_t
 *  @brief iPCQ Manager aPCQ State Register
 *  @details This register shows the current state of the apcq_load_index_tbl_state_q, apcq_pcq_entry_add_state_q, and apcq_as_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_apcq_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_load_index_tbl_state_q </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the apcq_load_index_tbl_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_pcq_entry_add_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the apcq_pcq_entry_add_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_as_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the apcq_as_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_apcq_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      apcq_load_index_tbl_state_q               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      apcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved2                                 : 13;
     unsigned      apcq_as_access_state_q                    :  3;
#else    /* Little Endian */
     unsigned      apcq_as_access_state_q                    :  3;
     unsigned      reserved2                                 : 13;
     unsigned      apcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved1                                 :  5;
     unsigned      apcq_load_index_tbl_state_q               :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_ipm_apcq_state_reg_t;

/*! @struct ncp_ncap_ipm_read_write_engine_state_reg_t
 *  @brief iPCQ Manager Read and Write Engine State Register
 *  @details This register shows the current state of the weng_write_op_state_q and apcq_entry_reng_read_op_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_read_write_engine_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_write_op_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the weng_write_op_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_reng_read_op_state_q </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the apcq_entry_reng_read_op_state_q
 *        state machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_read_write_engine_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 12;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved1                                 : 11;
     unsigned      apcq_entry_reng_read_op_state_q           :  5;
#else    /* Little Endian */
     unsigned      apcq_entry_reng_read_op_state_q           :  5;
     unsigned      reserved1                                 : 11;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved0                                 : 12;
#endif
} ncp_ncap_ipm_read_write_engine_state_reg_t;

/*! @struct ncp_ncap_ipcq_num_entries_outstanding_reg_t
 *  @brief iPCQ Number of Entries Outstanding Table
 *  @details This table contains a 5-bit count for each of the 8 iPCQs that indicates of the outstanding number of entries in process.  Each 32-bit word in the table contains a count for 4 iPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_num_entries_outstanding_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of entries 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of entries 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of entries 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of entries 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_num_entries_outstanding_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      outstand_num_entries_3                    :  5;
     unsigned      reserved1                                 :  3;
     unsigned      outstand_num_entries_2                    :  5;
     unsigned      reserved2                                 :  3;
     unsigned      outstand_num_entries_1                    :  5;
     unsigned      reserved3                                 :  3;
     unsigned      outstand_num_entries_0                    :  5;
#else    /* Little Endian */
     unsigned      outstand_num_entries_0                    :  5;
     unsigned      reserved3                                 :  3;
     unsigned      outstand_num_entries_1                    :  5;
     unsigned      reserved2                                 :  3;
     unsigned      outstand_num_entries_2                    :  5;
     unsigned      reserved1                                 :  3;
     unsigned      outstand_num_entries_3                    :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_ipcq_num_entries_outstanding_reg_t;

/*! @struct ncp_ncap_apcq_num_entries_outstanding_reg_t
 *  @brief aPCQ Number of Entries Outstanding Table
 *  @details This table contains a 5-bit count for each of the 8 aPCQs that indicates of the outstanding number of entries in process.  Each 32-bit word in the table contains a count for four aPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_apcq_num_entries_outstanding_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of entries 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of entries 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of entries 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of entries 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_apcq_num_entries_outstanding_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      outstand_num_entries_3                    :  5;
     unsigned      reserved1                                 :  3;
     unsigned      outstand_num_entries_2                    :  5;
     unsigned      reserved2                                 :  3;
     unsigned      outstand_num_entries_1                    :  5;
     unsigned      reserved3                                 :  3;
     unsigned      outstand_num_entries_0                    :  5;
#else    /* Little Endian */
     unsigned      outstand_num_entries_0                    :  5;
     unsigned      reserved3                                 :  3;
     unsigned      outstand_num_entries_1                    :  5;
     unsigned      reserved2                                 :  3;
     unsigned      outstand_num_entries_2                    :  5;
     unsigned      reserved1                                 :  3;
     unsigned      outstand_num_entries_3                    :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_apcq_num_entries_outstanding_reg_t;

/*! @struct ncp_ncap_idb_data_state_reg_t
 *  @brief Input Task Data Buffer State Register
 *  @details This register shows the current state of the idb_data_state_q state machine.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_idb_data_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_data_state_q </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the idb_data_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_idb_data_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      idb_data_state_q                          :  6;
#else    /* Little Endian */
     unsigned      idb_data_state_q                          :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_idb_data_state_reg_t;

/*! @struct ncp_ncap_cpm_get_cpcq_entry_state_reg_t
 *  @brief cPCQ Manager Get cPCQ Entry State Register
 *  @details This register shows the current state of the get_cpcq_entry_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_get_cpcq_entry_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param get_cpcq_entry_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the get_cpcq_entry_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_get_cpcq_entry_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      get_cpcq_entry_state_q                    :  3;
#else    /* Little Endian */
     unsigned      get_cpcq_entry_state_q                    :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_cpm_get_cpcq_entry_state_reg_t;

/*! @struct ncp_ncap_cpm_read_write_engine_state_reg_t
 *  @brief cPCQ Manager Read and Write Engine State Register
 *  @details This register shows the current state of the weng_write_op_state_q and reng_read_op_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_read_write_engine_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_write_op_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the weng_write_op_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_read_op_state_q </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the reng_read_op_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_read_write_engine_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 12;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved1                                 : 11;
     unsigned      reng_read_op_state_q                      :  5;
#else    /* Little Endian */
     unsigned      reng_read_op_state_q                      :  5;
     unsigned      reserved1                                 : 11;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved0                                 : 12;
#endif
} ncp_ncap_cpm_read_write_engine_state_reg_t;

/*! @struct ncp_ncap_cpcq_state_reg_t
 *  @brief cPCQ Manager cPCQ State Register
 *  @details This register shows the current state of the cpcq_load_index_tbl_state_q, cpcq_pcq_entry_add_state_q, and cpcq_as_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpcq_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_load_index_tbl_state_q </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the cpcq_load_index_tbl_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_pcq_entry_add_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the cpcq_pcq_entry_add_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_as_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the cpcq_as_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpcq_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      cpcq_load_index_tbl_state_q               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      cpcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved2                                 : 13;
     unsigned      cpcq_as_access_state_q                    :  3;
#else    /* Little Endian */
     unsigned      cpcq_as_access_state_q                    :  3;
     unsigned      reserved2                                 : 13;
     unsigned      cpcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved1                                 :  5;
     unsigned      cpcq_load_index_tbl_state_q               :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_cpcq_state_reg_t;

/*! @struct ncp_ncap_cpcq_ctl_state_reg_t
 *  @brief cPCQ Manager cPCQ Control State Register
 *  @details This register shows the current state of the cpcq_state and arb_state state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpcq_ctl_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_state </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the cpcq_state state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param arb_state </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the arb_state state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpcq_ctl_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 12;
     unsigned      cpcq_state                                :  4;
     unsigned      reserved1                                 : 11;
     unsigned      arb_state                                 :  5;
#else    /* Little Endian */
     unsigned      arb_state                                 :  5;
     unsigned      reserved1                                 : 11;
     unsigned      cpcq_state                                :  4;
     unsigned      reserved0                                 : 12;
#endif
} ncp_ncap_cpcq_ctl_state_reg_t;

/*! @struct ncp_ncap_cfg_master_state_reg_t
 *  @brief cPCQ Manager cPCQ State Register
 *  @details This register shows the current state of the sm_var_delay_state_q, split_state, and cstate state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_master_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param sm_var_delay_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the sm_var_delay_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param split_state </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the split_state state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cstate </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the cstate state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_master_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      sm_var_delay_state_q                      :  3;
     unsigned      split_state                               :  8;
     unsigned      cstate                                    : 16;
#else    /* Little Endian */
     unsigned      cstate                                    : 16;
     unsigned      split_state                               :  8;
     unsigned      sm_var_delay_state_q                      :  3;
     unsigned      reserved0                                 :  5;
#endif
} ncp_ncap_cfg_master_state_reg_t;

/*! @struct ncp_ncap_cfg_master_axi_state_reg_t
 *  @brief cPCQ Manager Read and Write Engine State Register
 *  @details This register shows the current state of the axi_write_state, axi_read_state, and axi_rstate state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_master_axi_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axi_write_state </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the axi_write_state state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axi_read_state </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Current state of the axi_read_state state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axi_rstate </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the axi_rstate state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_master_axi_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 12;
     unsigned      axi_write_state                           :  4;
     unsigned      reserved1                                 :  3;
     unsigned      axi_read_state                            :  5;
     unsigned      reserved2                                 :  3;
     unsigned      axi_rstate                                :  5;
#else    /* Little Endian */
     unsigned      axi_rstate                                :  5;
     unsigned      reserved2                                 :  3;
     unsigned      axi_read_state                            :  5;
     unsigned      reserved1                                 :  3;
     unsigned      axi_write_state                           :  4;
     unsigned      reserved0                                 : 12;
#endif
} ncp_ncap_cfg_master_axi_state_reg_t;

/*! @struct ncp_ncap_cfg_ringphy_state_reg_t
 *  @brief cPCQ Manager Ringphy State Register
 *  @details This register shows the current state of the state state machine in the ncav2_cfg_ringphy block.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cfg_ringphy_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 20 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param state </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the the state state machine in the
 *        ncav2_cfg_ringphy block.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cfg_ringphy_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 20;
     unsigned      state                                     : 12;
#else    /* Little Endian */
     unsigned      state                                     : 12;
     unsigned      reserved0                                 : 20;
#endif
} ncp_ncap_cfg_ringphy_state_reg_t;

/*! @struct ncp_ncap_pgit_read_write_engine_state_reg_t
 *  @brief NCAP PCQ Group Index Table Read and Write Engine State Register
 *  @details This register shows the current state of the weng_write_op_state_q and reng_read_op_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_read_write_engine_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_write_op_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the weng_write_op_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_read_op_state_q </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the reng_read_op_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_read_write_engine_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 12;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved1                                 : 11;
     unsigned      reng_read_op_state_q                      :  5;
#else    /* Little Endian */
     unsigned      reng_read_op_state_q                      :  5;
     unsigned      reserved1                                 : 11;
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved0                                 : 12;
#endif
} ncp_ncap_pgit_read_write_engine_state_reg_t;

/*! @struct ncp_ncap_pgit_sel_and_upload_state_reg_t
 *  @brief NCAP PCQ Group Index Table Select and Upload State Register
 *  @details This register shows the current state of the ncap_pgit_sel_state_q and ncap_pgit_upload_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_sel_and_upload_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_sel_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the ncap_pgit_sel_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ncap_pgit_upload_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the ncap_pgit_upload_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_sel_and_upload_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 13;
     unsigned      ncap_pgit_sel_state_q                     :  3;
     unsigned      reserved1                                 : 13;
     unsigned      ncap_pgit_upload_state_q                  :  3;
#else    /* Little Endian */
     unsigned      ncap_pgit_upload_state_q                  :  3;
     unsigned      reserved1                                 : 13;
     unsigned      ncap_pgit_sel_state_q                     :  3;
     unsigned      reserved0                                 : 13;
#endif
} ncp_ncap_pgit_sel_and_upload_state_reg_t;

/*! @struct ncp_ncap_pgit_access_state_reg_t
 *  @brief NCAP PCQ Group Index Table Access State Register
 *  @details This register shows the current state of the w_ipgit_access_state_q, w_opgit_access_state_q and w_cpgit_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_access_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param w_ipgit_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the w_ipgit_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param w_opgit_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Current state of the w_opgit_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param w_cpgit_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the w_cpgit_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_access_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 13;
     unsigned      w_ipgit_access_state_q                    :  3;
     unsigned      reserved1                                 :  5;
     unsigned      w_opgit_access_state_q                    :  3;
     unsigned      reserved2                                 :  5;
     unsigned      w_cpgit_access_state_q                    :  3;
#else    /* Little Endian */
     unsigned      w_cpgit_access_state_q                    :  3;
     unsigned      reserved2                                 :  5;
     unsigned      w_opgit_access_state_q                    :  3;
     unsigned      reserved1                                 :  5;
     unsigned      w_ipgit_access_state_q                    :  3;
     unsigned      reserved0                                 : 13;
#endif
} ncp_ncap_pgit_access_state_reg_t;

/*! @struct ncp_ncap_cpm_num_beats_per_burst_reg_t
 *  @brief cPCQ Manager Number of Beats per Burst
 *  @details Sets the number of beats per burst for memory accesses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_num_beats_per_burst_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpm_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ manager memory access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_num_beats_per_burst_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      cpm_num_beat                              :  2;
#else    /* Little Endian */
     unsigned      cpm_num_beat                              :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_cpm_num_beats_per_burst_reg_t;

/*! @struct ncp_ncap_cpm_num_entries_per_request_reg_t
 *  @brief cPCQ Manager Number of Entries per Request
 *  @details Sets the maximum number of cPCQ entries requested in a single memory access.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_num_entries_per_request_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_num_ent_per_req_m1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ number of entries per request minus 1. Sets the
 *        maximum number of cPCQ entries to be fetched per request
 *        to the cPCQ entry read engine. (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_num_entries_per_request_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      cpcq_num_ent_per_req_m1                   :  2;
#else    /* Little Endian */
     unsigned      cpcq_num_ent_per_req_m1                   :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_cpm_num_entries_per_request_reg_t;

/*! @struct ncp_ncap_cpm_send_credit_ovfl_cnt_reg_t
 *  @brief cPCQ Manager Send Credit Overflow Counter
 *  @details Increments if too many credits are returned from the NCA for a cPCQ.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_send_credit_ovfl_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param credit_overflow_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Credit overflow count. When incrementing from zero,
 *        status is also captured. Writing this count to zero
 *        also clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cPCQ number. Indicates for whcih cPCQ the credits
 *        were being added. Sets when credit_overflow_cnt first
 *        goes non zero. Cleared when credit_overflow_cnt is
 *        written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits_to_add </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Credits to add. Indicates the number credits received
 *        from the NCA that caused the overflow. Sets when credit_overflow_cnt
 *        first goes non zero. Cleared when credit_overflow_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credit_cnt </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Credit count. Indicates the number of available credits
 *        before the overflow occurred. Sets when credit_overflow_cnt
 *        first goes non zero. Cleared when credit_overflow_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_send_credit_ovfl_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      credit_overflow_cnt                       :  8;
     unsigned      reserved0                                 :  5;
     unsigned      cpcq_num                                  :  3;
     unsigned      reserved1                                 :  4;
     unsigned      credits_to_add                            :  4;
     unsigned      reserved2                                 :  4;
     unsigned      credit_cnt                                :  4;
#else    /* Little Endian */
     unsigned      credit_cnt                                :  4;
     unsigned      reserved2                                 :  4;
     unsigned      credits_to_add                            :  4;
     unsigned      reserved1                                 :  4;
     unsigned      cpcq_num                                  :  3;
     unsigned      reserved0                                 :  5;
     unsigned      credit_overflow_cnt                       :  8;
#endif
} ncp_ncap_cpm_send_credit_ovfl_cnt_reg_t;

/*! @struct ncp_ncap_cpcq_entry_counts_reg_t
 *  @brief cPCQ Entry Counts
 *  @details There is a count for each cPCQ that indicates the number of cPCQ entries processed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpcq_entry_counts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpcq_entry_counts_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            cpcq_entry_cnt;
} ncp_ncap_cpcq_entry_counts_reg_t;

/*! @struct ncp_ncap_cpcq_entry_counts_cor_reg_t
 *  @brief cPCQ Entry Counts Clear on Read
 *  @details This is an alias of the cpcq_entry_counts register table where each count is cleared when read.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpcq_entry_counts_cor_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpcq_entry_counts_cor_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            cpcq_entry_cnt;
} ncp_ncap_cpcq_entry_counts_cor_reg_t;

/*! @struct ncp_ncap_cpm_send_credits_reg_t
 *  @brief cPCQ Manager Send Credits
 *  @details This table contains a 4-bit count for each of the 8 cPCQs that indicates of the number of send credits available.  Each 32-bit word in the table contains a count for four cPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_cpm_send_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Send credits 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Send credits 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Send credits 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Send credits 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_cpm_send_credits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      send_credits_3                            :  4;
     unsigned      reserved1                                 :  4;
     unsigned      send_credits_2                            :  4;
     unsigned      reserved2                                 :  4;
     unsigned      send_credits_1                            :  4;
     unsigned      reserved3                                 :  4;
     unsigned      send_credits_0                            :  4;
#else    /* Little Endian */
     unsigned      send_credits_0                            :  4;
     unsigned      reserved3                                 :  4;
     unsigned      send_credits_1                            :  4;
     unsigned      reserved2                                 :  4;
     unsigned      send_credits_2                            :  4;
     unsigned      reserved1                                 :  4;
     unsigned      send_credits_3                            :  4;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_cpm_send_credits_reg_t;

/*! @struct ncp_ncap_opm_mii_par_gen_polarity_reg_t
 *  @brief oPCQ Manager Message Input Interface Parity Generate Polarity
 *  @details Sets the polarity of the parity generate on the MII user-data paths. 0 is even, 1 is odd.  This register also contains the valid/ready status of the oPCQ NLINK message input interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_mii_par_gen_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_mii_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> oPCQ request NLINK message input interface address
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_mii_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> oPCQ request NLINK message input interface address
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_mii_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> oPCQ request NLINK message input interface data write
 *        valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_mii_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> oPCQ request NLINK message input interface data write
 *        ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_mii_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> oPCQ request NLINK message input interface write response
 *        valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_mii_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> oPCQ request NLINK message input interface write response
 *        ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_gen_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity generate polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_mii_par_gen_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_req_mii_awvalid                      :  1;
     unsigned      opcq_req_mii_awready                      :  1;
     unsigned      opcq_req_mii_wvalid                       :  1;
     unsigned      opcq_req_mii_wready                       :  1;
     unsigned      opcq_req_mii_bvalid                       :  1;
     unsigned      opcq_req_mii_bready                       :  1;
     unsigned      reserved0                                 : 25;
     unsigned      par_gen_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_gen_polarity                          :  1;
     unsigned      reserved0                                 : 25;
     unsigned      opcq_req_mii_bready                       :  1;
     unsigned      opcq_req_mii_bvalid                       :  1;
     unsigned      opcq_req_mii_wready                       :  1;
     unsigned      opcq_req_mii_wvalid                       :  1;
     unsigned      opcq_req_mii_awready                      :  1;
     unsigned      opcq_req_mii_awvalid                      :  1;
#endif
} ncp_ncap_opm_mii_par_gen_polarity_reg_t;

/*! @struct ncp_ncap_opm_moi_par_chk_polarity_reg_t
 *  @brief oPCQ Manager Message Output Interface Parity Check Polarity
 *  @details Sets the polarity of the parity check on the MOI user-data paths. 0 is even, 1 is odd.  This register also contains the valid/ready status of the oPCQ NLINK message output interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_moi_par_chk_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rsp_moi_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> oPCQ response NLINK message output interface address
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rsp_moi_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> oPCQ response NLINK message output interface address
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rsp_moi_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> oPCQ response NLINK message output interface data
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rsp_moi_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> oPCQ response NLINK message output interface data
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rsp_moi_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> oPCQ response NLINK message output interface write
 *        response valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rsp_moi_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> oPCQ response NLINK message output interface write
 *        response ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_chk_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity check polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_moi_par_chk_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_rsp_moi_awvalid                      :  1;
     unsigned      opcq_rsp_moi_awready                      :  1;
     unsigned      opcq_rsp_moi_wvalid                       :  1;
     unsigned      opcq_rsp_moi_wready                       :  1;
     unsigned      opcq_rsp_moi_bvalid                       :  1;
     unsigned      opcq_rsp_moi_bready                       :  1;
     unsigned      reserved0                                 : 25;
     unsigned      par_chk_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_chk_polarity                          :  1;
     unsigned      reserved0                                 : 25;
     unsigned      opcq_rsp_moi_bready                       :  1;
     unsigned      opcq_rsp_moi_bvalid                       :  1;
     unsigned      opcq_rsp_moi_wready                       :  1;
     unsigned      opcq_rsp_moi_wvalid                       :  1;
     unsigned      opcq_rsp_moi_awready                      :  1;
     unsigned      opcq_rsp_moi_awvalid                      :  1;
#endif
} ncp_ncap_opm_moi_par_chk_polarity_reg_t;

/*! @struct ncp_ncap_opm_num_beats_per_burst_reg_t
 *  @brief oPCQ Manager Number of Beats per Burst
 *  @details Sets the number of beats per burst for memory accesses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_num_beats_per_burst_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opm_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ manager memory access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_num_beats_per_burst_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opm_num_beat                              :  2;
#else    /* Little Endian */
     unsigned      opm_num_beat                              :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_opm_num_beats_per_burst_reg_t;

/*! @struct ncp_ncap_opm_num_entries_per_request_reg_t
 *  @brief oPCQ Manager Number of Entries per Request
 *  @details Sets the maximum number of oPCQ entries requested in a single memory access.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_num_entries_per_request_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_ent_per_req_m1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ number of entries per request minus 1. Sets the
 *        maximum number of oPCQ entries to be fetched per request
 *        to the oPCQ entry read engine. (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_num_entries_per_request_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
#else    /* Little Endian */
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_opm_num_entries_per_request_reg_t;

/*! @struct ncp_ncap_opcq_credit_max_value_reg_t
 *  @brief oPCQ Credit Maximum Value
 *  @details The maximum number of oPCQ request NLINK send credits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_credit_max_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_credit_max_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This is the maximum number of oPCQ request NLINK send
 *        credits allocated to the oPCQ manager. The maximum
 *        allowed value is 128. If an attempt is made to set
 *        it to a larger value, it will be forced to 128. CAUTION:
 *        This register can only be written when the oPCQ manager
 *        is idle. Also, it should only be written when the
 *        opm_send_credits register equals the current value
 *        of this register.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_credit_max_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      opcq_credit_max_value                     :  8;
#else    /* Little Endian */
     unsigned      opcq_credit_max_value                     :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_opcq_credit_max_value_reg_t;

/*! @struct ncp_ncap_opm_mii_bad_resp_cnt_reg_t
 *  @brief oPCQ Manager Message Input Interface Bad Response Counter
 *  @details Increments if a response other than 0 is received on the MII response interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_mii_bad_resp_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param bad_resp_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Bad response count. When incrementing from zero, status
 *        is also captured. Writing this count to zero also
 *        clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param response </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Response received. Will be non zero when count increments
 *        from 0. Cleared when bad_resp_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_mii_bad_resp_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      bad_resp_cnt                              :  8;
     unsigned      reserved0                                 : 22;
     unsigned      response                                  :  2;
#else    /* Little Endian */
     unsigned      response                                  :  2;
     unsigned      reserved0                                 : 22;
     unsigned      bad_resp_cnt                              :  8;
#endif
} ncp_ncap_opm_mii_bad_resp_cnt_reg_t;

/*! @struct ncp_ncap_opm_moi_parer_detect_cnt_reg_t
 *  @brief oPCQ Manager Message Output Interface Parity Error Detect Counter
 *  @details Increments if a parity error is detected on the MOI user-data paths.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_moi_parer_detect_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param parer_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Parity error count. When incrementing from zero, status
 *        is also captured. Writing this count to zero also
 *        clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Credits. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param group_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Group number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. 0 - oPCQ, 3 - flow control task response.
 *        Sets when count increments from 0. Cleared when parer_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_moi_parer_detect_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      parer_cnt                                 :  8;
     unsigned      reserved0                                 :  2;
     unsigned      par_bit                                   :  1;
     unsigned      credits                                   :  4;
     unsigned      group_num                                 :  5;
     unsigned      queue_num                                 :  8;
     unsigned      cmd                                       :  4;
#else    /* Little Endian */
     unsigned      cmd                                       :  4;
     unsigned      queue_num                                 :  8;
     unsigned      group_num                                 :  5;
     unsigned      credits                                   :  4;
     unsigned      par_bit                                   :  1;
     unsigned      reserved0                                 :  2;
     unsigned      parer_cnt                                 :  8;
#endif
} ncp_ncap_opm_moi_parer_detect_cnt_reg_t;

/*! @struct ncp_ncap_opm_send_credit_ovfl_cnt_reg_t
 *  @brief oPCQ Manager Send Credit Overflow Counter
 *  @details Increments if too many credits are returned from the NCA for an oPCQ.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_send_credit_ovfl_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param credit_overflow_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Credit overflow count. When incrementing from zero,
 *        status is also captured. Writing this count to zero
 *        also clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when credit_overflow_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Credits. Sets when count increments from 0. Cleared
 *        when credit_overflow_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when credit_overflow_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param flow_ctrl </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Flow Control. Sets when count increments from 0. Cleared
 *        when credit_overflow_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. 0 - oPCQ, 1 - cPCQ, 2 - aPCQ. Sets when count
 *        increments from 0. Cleared when credit_overflow_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_send_credit_ovfl_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      credit_overflow_cnt                       :  8;
     unsigned      reserved0                                 :  7;
     unsigned      par_bit                                   :  1;
     unsigned      credits                                   :  4;
     unsigned      queue_num                                 :  8;
     unsigned      flow_ctrl                                 :  2;
     unsigned      cmd                                       :  2;
#else    /* Little Endian */
     unsigned      cmd                                       :  2;
     unsigned      flow_ctrl                                 :  2;
     unsigned      queue_num                                 :  8;
     unsigned      credits                                   :  4;
     unsigned      par_bit                                   :  1;
     unsigned      reserved0                                 :  7;
     unsigned      credit_overflow_cnt                       :  8;
#endif
} ncp_ncap_opm_send_credit_ovfl_cnt_reg_t;

/*! @struct ncp_ncap_opm_num_credits_before_ovfl_reg_t
 *  @brief oPCQ Manager Number of Credits Before Overflow
 *  @details Additional status associated with opm_send_credit_ovfl_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_num_credits_before_ovfl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits_bef_ovfl </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Credits before overflow. Sets when opm_send_credit_ovfl_cnt
 *        increments from 0. Cleared when opm_send_credit_ovfl_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_num_credits_before_ovfl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      credits_bef_ovfl                          :  4;
#else    /* Little Endian */
     unsigned      credits_bef_ovfl                          :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_opm_num_credits_before_ovfl_reg_t;

/*! @struct ncp_ncap_opm_opcq_entry_cflag_er_cnt_reg_t
 *  @brief oPCQ Manager oPCQ Entry Completion Bit Error Counter
 *  @details Increments if an oPCQ entry contains a completion bit that is set when the oPCQ descriptor table cbit_overide bit is set, and the iPCQ is in auto task flow completion mode.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_opcq_entry_cflag_er_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_cflag_er_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry completion bit error count. When incrementing
 *        from zero, status is also captured. Writing this count
 *        to zero also clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Group number. Cleared when opcq_entry_cflag_er_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_opcq_vi_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group oPCQ virtual index number. Cleared when opcq_entry_cflag_er_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param command </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command field of oPCQ entry. Cleared when opcq_entry_cflag_er_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_opcq_entry_cflag_er_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_entry_cflag_er_cnt                   :  8;
     unsigned      reserved0                                 :  5;
     unsigned      grp_num                                   :  3;
     unsigned      reserved1                                 :  4;
     unsigned      grp_opcq_vi_num                           :  4;
     unsigned      reserved2                                 :  5;
     unsigned      command                                   :  3;
#else    /* Little Endian */
     unsigned      command                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_opcq_vi_num                           :  4;
     unsigned      reserved1                                 :  4;
     unsigned      grp_num                                   :  3;
     unsigned      reserved0                                 :  5;
     unsigned      opcq_entry_cflag_er_cnt                   :  8;
#endif
} ncp_ncap_opm_opcq_entry_cflag_er_cnt_reg_t;

/*! @struct ncp_ncap_opm_opcq_entry_cpa_er_cnt_reg_t
 *  @brief oPCQ Manager oPCQ Entry Consumer Pointer Advanced Bit Error Counter
 *  @details Increments if an oPCQ entry contains a consumer pointer advanced bit that is set when the oPCQ descriptor table cpa_overide bit is set, and the iPCQ is in auto task flow completion mode.  NOTE: this register can only operate if the pcq_descr_enhanced register is set.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_opcq_entry_cpa_er_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_cpa_er_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry consumer pointer advanced bit error count.
 *        When incrementing from zero, status is also captured.
 *        Writing this count to zero also clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Group number. Cleared when opcq_entry_cpa_er_cnt is
 *        written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_opcq_vi_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group oPCQ virtual index number. Cleared when opcq_entry_cpa_er_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param command </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command field of oPCQ entry. Cleared when opcq_entry_cpa_er_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_opcq_entry_cpa_er_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      opcq_entry_cpa_er_cnt                     :  8;
     unsigned      reserved0                                 :  5;
     unsigned      grp_num                                   :  3;
     unsigned      reserved1                                 :  4;
     unsigned      grp_opcq_vi_num                           :  4;
     unsigned      reserved2                                 :  5;
     unsigned      command                                   :  3;
#else    /* Little Endian */
     unsigned      command                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_opcq_vi_num                           :  4;
     unsigned      reserved1                                 :  4;
     unsigned      grp_num                                   :  3;
     unsigned      reserved0                                 :  5;
     unsigned      opcq_entry_cpa_er_cnt                     :  8;
#endif
} ncp_ncap_opm_opcq_entry_cpa_er_cnt_reg_t;

/*! @struct ncp_ncap_opcq_entry_counts_reg_t
 *  @brief oPCQ Entry Counts
 *  @details There is a count for each oPCQ that indicates the number of oPCQ entries processed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_entry_counts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_entry_counts_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            opcq_entry_cnt;
} ncp_ncap_opcq_entry_counts_reg_t;

/*! @struct ncp_ncap_opcq_entry_counts_cor_reg_t
 *  @brief oPCQ Entry Counts Clear on Read
 *  @details This is an alias of the opcq_entry_counts register table where each count is cleared when read.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opcq_entry_counts_cor_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opcq_entry_counts_cor_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            opcq_entry_cnt;
} ncp_ncap_opcq_entry_counts_cor_reg_t;

/*! @struct ncp_ncap_opm_send_credits_reg_t
 *  @brief oPCQ Manager Send Credits
 *  @details Indicates of the number oPCQ request NLINK send credits available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_send_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Send credits </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_send_credits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      send_credits                              :  8;
#else    /* Little Endian */
     unsigned      send_credits                              :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_opm_send_credits_reg_t;

/*! @struct ncp_ncap_opm_send_credits_arb_ctrl_reg_t
 *  @brief oPCQ Manager Send Credits Arbitration Control
 *  @details Controls the arbitor that selects between oPCQ entries and auto task flow competion entries for transmission on the oPCQ request NLINK when credits are available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_send_credits_arb_ctrl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param arb_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Arbitration mode. Detrmins the priority mode of the
 *        arbitor as follows: 0 - stict, 1 - rotating, 2 round
 *        robin, 3 - weighted round robin
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param atfc_weight </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Auto task flow completion arbitration weight. Sets
 *        the auto task flow completion weight when arb_mode
 *        is 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_weight </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ arbitration weight. Sets the oPCQ weight when
 *        arb_mode is 3.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_send_credits_arb_ctrl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      arb_mode                                  :  2;
     unsigned      reserved1                                 :  8;
     unsigned      atfc_weight                               :  8;
     unsigned      opcq_weight                               :  8;
#else    /* Little Endian */
     unsigned      opcq_weight                               :  8;
     unsigned      atfc_weight                               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      arb_mode                                  :  2;
     unsigned      reserved0                                 :  6;
#endif
} ncp_ncap_opm_send_credits_arb_ctrl_reg_t;

/*! @struct ncp_ncap_opm_mii_wdata_flip_reg_t
 *  @brief oPCQ Manager Message Input Interface write data flip
 *  @details Flip the 8 bytes of each double-word passed to the oPCQ managers's MII write data channel.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_mii_wdata_flip_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mii_wdata_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Message input interface write data flip. When set,
 *        the 8 bytes of each double-word passed to the oPCQ
 *        managers's MII write data channel are flipped. This
 *        converts the entries passed to the NCA to Little Endian
 *        Memory Format.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_mii_wdata_flip_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      mii_wdata_flip                            :  1;
#else    /* Little Endian */
     unsigned      mii_wdata_flip                            :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_opm_mii_wdata_flip_reg_t;

/*! @struct ncp_ncap_opm_grp_rst_status_reg_t
 *  @brief oPCQ Manager Group Reset Status
 *  @details Shows the group reset status in the oPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_grp_rst_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst_apld_to_opcq </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Group reset has been applied to the oPCQ block. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ block group reset is complete. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param oe_ll_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> The oPCQ entry linked LL FIFO is empty (for the reset
 *        group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param atfc_ll_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> The auto task flow completion LL FIFO is empty (for
 *        the reset group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_oe_rd </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> No Outstanding oPCQ entry reads (for the reset group). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group reset. When set, a group reset is in progress.
 *        When the rest of the non-reserved bits above bit 11
 *        of this register are set, then the group reset of
 *        the oPCQ manager is complete.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group number of the group being reset. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_grp_rst_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      grp_rst_apld_to_opcq                      :  1;
     unsigned      opcq_grp_rst_cmplt                        :  1;
     unsigned      oe_ll_fifo_empty                          :  1;
     unsigned      atfc_ll_fifo_empty                        :  1;
     unsigned      no_outstand_oe_rd                         :  1;
     unsigned      reserved1                                 :  3;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved2                                 :  5;
     unsigned      grp_num                                   :  3;
#else    /* Little Endian */
     unsigned      grp_num                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved1                                 :  3;
     unsigned      no_outstand_oe_rd                         :  1;
     unsigned      atfc_ll_fifo_empty                        :  1;
     unsigned      oe_ll_fifo_empty                          :  1;
     unsigned      opcq_grp_rst_cmplt                        :  1;
     unsigned      grp_rst_apld_to_opcq                      :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_ncap_opm_grp_rst_status_reg_t;

/*! @struct ncp_ncap_opq_descr_cbit_overide_reg_t
 *  @brief oPCQ Descriptor Completion Bit Override
 *  @details Shows the status of all of the completion bit overide bits in the oPCQ descriptor table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opq_descr_cbit_overide_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cbit_overide </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Completion bit override. Each bit is the value of
 *        the cbit_overide bit in the descriptor table of the
 *        corresponding oPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opq_descr_cbit_overide_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cbit_overide                              : 16;
#else    /* Little Endian */
     unsigned      cbit_overide                              : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_opq_descr_cbit_overide_reg_t;

/*! @struct ncp_ncap_opq_descr_cpa_overide_reg_t
 *  @brief oPCQ Descriptor Consumer Pointer Advanced Override
 *  @details Shows the status of all of the consumer pointer advanced overide bits in the oPCQ descriptor table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opq_descr_cpa_overide_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpa_overide </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Consumer pointer advanced override. Each bit is the
 *        value of the cpa_overide bit in the descriptor table
 *        of the corresponding oPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opq_descr_cpa_overide_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cpa_overide                               : 16;
#else    /* Little Endian */
     unsigned      cpa_overide                               : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_opq_descr_cpa_overide_reg_t;

/*! @struct ncp_ncap_opm_mii_state_reg_t
 *  @brief oPCQ Manager Message Input Interface State Register
 *  @details This register shows the current state of the opcq_mii_addr_state_q and opcq_mii_data_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_mii_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mii_data_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Current state of the opcq_mii_data_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mii_addr_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the opcq_mii_addr_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_mii_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 21;
     unsigned      opcq_mii_data_state_q                     :  3;
     unsigned      reserved1                                 :  5;
     unsigned      opcq_mii_addr_state_q                     :  3;
#else    /* Little Endian */
     unsigned      opcq_mii_addr_state_q                     :  3;
     unsigned      reserved1                                 :  5;
     unsigned      opcq_mii_data_state_q                     :  3;
     unsigned      reserved0                                 : 21;
#endif
} ncp_ncap_opm_mii_state_reg_t;

/*! @struct ncp_ncap_ipm_mii_par_gen_polarity_reg_t
 *  @brief iPCQ Manager Message Input Interface Parity Generate Polarity
 *  @details Sets the polarity of the parity generate on the MII user-data paths. 0 is even, 1 is odd.  This register also contains the valid/ready status of the iPCQ NLINK message input interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_mii_par_gen_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_rsp_mii_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> iPCQ response NLINK message input interface address
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_rsp_mii_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> iPCQ response NLINK message input interface address
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_rsp_mii_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> iPCQ response NLINK message input interface data write
 *        valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_rsp_mii_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> iPCQ response NLINK message input interface data write
 *        ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_rsp_mii_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> iPCQ response NLINK message input interface write
 *        response valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_rsp_mii_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> iPCQ response NLINK message input interface write
 *        response ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_gen_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity generate polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_mii_par_gen_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ipcq_rsp_mii_awvalid                      :  1;
     unsigned      ipcq_rsp_mii_awready                      :  1;
     unsigned      ipcq_rsp_mii_wvalid                       :  1;
     unsigned      ipcq_rsp_mii_wready                       :  1;
     unsigned      ipcq_rsp_mii_bvalid                       :  1;
     unsigned      ipcq_rsp_mii_bready                       :  1;
     unsigned      reserved0                                 : 25;
     unsigned      par_gen_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_gen_polarity                          :  1;
     unsigned      reserved0                                 : 25;
     unsigned      ipcq_rsp_mii_bready                       :  1;
     unsigned      ipcq_rsp_mii_bvalid                       :  1;
     unsigned      ipcq_rsp_mii_wready                       :  1;
     unsigned      ipcq_rsp_mii_wvalid                       :  1;
     unsigned      ipcq_rsp_mii_awready                      :  1;
     unsigned      ipcq_rsp_mii_awvalid                      :  1;
#endif
} ncp_ncap_ipm_mii_par_gen_polarity_reg_t;

/*! @struct ncp_ncap_ipm_moi_par_chk_polarity_reg_t
 *  @brief iPCQ Manager Message Output Interface Parity Check Polarity
 *  @details Sets the polarity of the parity check on the MOI user-data paths. 0 is even, 1 is odd.  This register also contains the valid/ready status of the iPCQ NLINK message output interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_par_chk_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_req_moi_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> iPCQ request NLINK message output interface address
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_req_moi_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> iPCQ request NLINK message output interface address
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_req_moi_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> iPCQ request NLINK message output interface data write
 *        valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_req_moi_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> iPCQ request NLINK message output interface data write
 *        ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_req_moi_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> iPCQ request NLINK message output interface write
 *        response valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_req_moi_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> iPCQ request NLINK message output interface write
 *        response ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_chk_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity check polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_par_chk_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ipcq_req_moi_awvalid                      :  1;
     unsigned      ipcq_req_moi_awready                      :  1;
     unsigned      ipcq_req_moi_wvalid                       :  1;
     unsigned      ipcq_req_moi_wready                       :  1;
     unsigned      ipcq_req_moi_bvalid                       :  1;
     unsigned      ipcq_req_moi_bready                       :  1;
     unsigned      reserved0                                 : 25;
     unsigned      par_chk_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_chk_polarity                          :  1;
     unsigned      reserved0                                 : 25;
     unsigned      ipcq_req_moi_bready                       :  1;
     unsigned      ipcq_req_moi_bvalid                       :  1;
     unsigned      ipcq_req_moi_wready                       :  1;
     unsigned      ipcq_req_moi_wvalid                       :  1;
     unsigned      ipcq_req_moi_awready                      :  1;
     unsigned      ipcq_req_moi_awvalid                      :  1;
#endif
} ncp_ncap_ipm_moi_par_chk_polarity_reg_t;

/*! @struct ncp_ncap_ipm_num_beats_per_burst_reg_t
 *  @brief iPCQ Manager Number of Beats per Burst
 *  @details Sets the number of beats per burst for memory accesses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_num_beats_per_burst_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ manager memory access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_num_beats_per_burst_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      ipm_num_beat                              :  2;
#else    /* Little Endian */
     unsigned      ipm_num_beat                              :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_ipm_num_beats_per_burst_reg_t;

/*! @struct ncp_ncap_ipcq_almost_full_value_reg_t
 *  @brief iPCQ Almost Full Value
 *  @details The max iPCQ depth minus this value is the depth at which an iPCQ is considered almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_almost_full_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_almost_full_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ almost full value. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_almost_full_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      ipcq_almost_full_value                    :  8;
#else    /* Little Endian */
     unsigned      ipcq_almost_full_value                    :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_ipcq_almost_full_value_reg_t;

/*! @struct ncp_ncap_ipcq_almost_empty_value_reg_t
 *  @brief iPCQ Almost Empty Value
 *  @details The depth at which an iPCQ is considered almost empty.  This value is used to help give priority to empty iPCQs when multiple entries are available in the iPCQ Entry Buffer.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_almost_empty_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_almost_empty_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ almost empty value. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_almost_empty_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      ipcq_almost_empty_value                   :  8;
#else    /* Little Endian */
     unsigned      ipcq_almost_empty_value                   :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_ipcq_almost_empty_value_reg_t;

/*! @struct ncp_ncap_consider_ipcq_almost_empty_reg_t
 *  @brief Consider iPCQ Almost Empty
 *  @details When set, arbitration gives priority to iPCQs that are almost empty when considering the next iPCQ to be fed an entry from the iPCQ Entry Buffer.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_consider_ipcq_almost_empty_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param consider_ipcq_almost_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Consider iPCQ almost empty. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_consider_ipcq_almost_empty_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      consider_ipcq_almost_empty                :  1;
#else    /* Little Endian */
     unsigned      consider_ipcq_almost_empty                :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_consider_ipcq_almost_empty_reg_t;

/*! @struct ncp_ncap_ipcq_credit_max_value_reg_t
 *  @brief iPCQ Credit Maximum Value
 *  @details The maximum number of iPCQ request NLINK receive credits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_credit_max_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_credit_max_value </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This is the maximum number of iPCQ request NLINK receive
 *        credits allocated to the iPCQ manager. The maximum
 *        allowed value is 64. If an attempt is made to set
 *        it to a larger value, it will be forced to 64. CAUTION:
 *        This register can only be written when the iPCQ manager
 *        is idle. Also, it should only be written when the
 *        moi_addr_fifo and ipcq_entry_buf_fifo are empty, and
 *        the NCA is in posession of all iPCQ credits for this
 *        NCAP.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_credit_max_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      ipcq_credit_max_value                     :  7;
#else    /* Little Endian */
     unsigned      ipcq_credit_max_value                     :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_ipcq_credit_max_value_reg_t;

/*! @struct ncp_ncap_apcq_num_entries_per_request_reg_t
 *  @brief aPCQ Number of Entries per Request
 *  @details Sets the maximum number of aPCQ entries requested in a single access.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_apcq_num_entries_per_request_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_num_ent_per_req_m1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> aPCQ number of entries per request minus 1. Sets the
 *        maximum number of aPCQ entries to be fetched per request
 *        to the auto task flow completion sequencer. (0 = 1,
 *        1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_apcq_num_entries_per_request_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      apcq_num_ent_per_req_m1                   :  3;
#else    /* Little Endian */
     unsigned      apcq_num_ent_per_req_m1                   :  3;
     unsigned      reserved0                                 : 29;
#endif
} ncp_ncap_apcq_num_entries_per_request_reg_t;

/*! @struct ncp_ncap_ipm_moi_wdata_flip_reg_t
 *  @brief iPCQ Manager Message Output Interface write data flip
 *  @details Flip the 8 bytes of each double-word received from the iPCQ managers's MOI write data channel.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_wdata_flip_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param moi_wdata_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Message output interface write data flip. When set,
 *        the 8 bytes of each double-word received from the
 *        iPCQ managers's MOI write data channel are flipped.
 *        This is set (default) when the entries received from
 *        the NCA are in Little Endian Memory Format.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_wdata_flip_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      moi_wdata_flip                            :  1;
#else    /* Little Endian */
     unsigned      moi_wdata_flip                            :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_ipm_moi_wdata_flip_reg_t;

/*! @struct ncp_ncap_ipm_grp_rst_status_reg_t
 *  @brief iPCQ Manager Group Reset Status
 *  @details Shows the group reset status in the iPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_grp_rst_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst_apld_to_apcq </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Group reset has been applied to the aPCQ block. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> aPCQ block group reset is complete. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst_apld_to_ipcq </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Group reset has been applied to the iPCQ block. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> iPCQ block group reset is complete. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_apcq_entry_rd_outstand </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> No aPCQ entry reads are outstanding. (for the reset
 *        group)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ie_ll_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> The iPCQ entry LL FIFO is empty (for the reset group). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_ie_wr </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> No outstanding iPCQ entry writes (for the reset group). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group reset. When set, a group reset is in progress.
 *        When the rest of the non-reserved bits above bit 11
 *        of this register are set, then the group reset of
 *        the iPCQ manager is complete.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group number of the group being reset. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_grp_rst_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 13;
     unsigned      grp_rst_apld_to_apcq                      :  1;
     unsigned      apcq_grp_rst_cmplt                        :  1;
     unsigned      grp_rst_apld_to_ipcq                      :  1;
     unsigned      ipcq_grp_rst_cmplt                        :  1;
     unsigned      no_apcq_entry_rd_outstand                 :  1;
     unsigned      ie_ll_fifo_empty                          :  1;
     unsigned      no_outstand_ie_wr                         :  1;
     unsigned      reserved1                                 :  3;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved2                                 :  5;
     unsigned      grp_num                                   :  3;
#else    /* Little Endian */
     unsigned      grp_num                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved1                                 :  3;
     unsigned      no_outstand_ie_wr                         :  1;
     unsigned      ie_ll_fifo_empty                          :  1;
     unsigned      no_apcq_entry_rd_outstand                 :  1;
     unsigned      ipcq_grp_rst_cmplt                        :  1;
     unsigned      grp_rst_apld_to_ipcq                      :  1;
     unsigned      apcq_grp_rst_cmplt                        :  1;
     unsigned      grp_rst_apld_to_apcq                      :  1;
     unsigned      reserved0                                 : 13;
#endif
} ncp_ncap_ipm_grp_rst_status_reg_t;

/*! @struct ncp_ncap_apcq_descr_atfc_bits_reg_t
 *  @brief aPCQ Descriptor Auto Task Flow Completion Bits
 *  @details Shows the status of all of the auto task flow completion bits in the aPCQ descriptor table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_apcq_descr_atfc_bits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param atfc </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Auto task flow completion. Each bit is the value of
 *        atfc bit in the descriptor table of the corresponding
 *        aPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_apcq_descr_atfc_bits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      atfc                                      :  8;
#else    /* Little Endian */
     unsigned      atfc                                      :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_apcq_descr_atfc_bits_reg_t;

/*! @struct ncp_ncap_apcq_descr_cmplt_bits_reg_t
 *  @brief aPCQ Descriptor Completion Bits
 *  @details Shows the status of all of the completion bits in the aPCQ descriptor table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_apcq_descr_cmplt_bits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_cmplt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Auto task flow completion queue completion. Each bit
 *        is the value of the apcq_cmplt bit in the descriptor
 *        table of the corresponding aPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_apcq_descr_cmplt_bits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      apcq_cmplt                                :  8;
#else    /* Little Endian */
     unsigned      apcq_cmplt                                :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_apcq_descr_cmplt_bits_reg_t;

/*! @struct ncp_ncap_apcq_descr_cpa_bits_reg_t
 *  @brief aPCQ Descriptor Consumer Pointer Advanced Bits
 *  @details Shows the status of all of the consumer pointer advanced bits in the aPCQ descriptor table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_apcq_descr_cpa_bits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_cpa </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Auto task flow completion queue consumer pointer advanced.
 *        Each bit is the value of the apcq_cpa bit in the descriptor
 *        table of the corresponding aPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_apcq_descr_cpa_bits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      apcq_cpa                                  :  8;
#else    /* Little Endian */
     unsigned      apcq_cpa                                  :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_apcq_descr_cpa_bits_reg_t;

/*! @struct ncp_ncap_ipm_mii_bad_resp_cnt_reg_t
 *  @brief iPCQ Manager Message Input Interface Bad Response Counter
 *  @details Increments if a response other than 0 is received on the MII response interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_mii_bad_resp_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param bad_resp_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Bad response count. When incrementing from zero, status
 *        is also captured. Writing this count to zero also
 *        clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param response </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Response received. Will be non zero when count increments
 *        from 0. Cleared when bad_resp_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_mii_bad_resp_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      bad_resp_cnt                              :  8;
     unsigned      reserved0                                 : 22;
     unsigned      response                                  :  2;
#else    /* Little Endian */
     unsigned      response                                  :  2;
     unsigned      reserved0                                 : 22;
     unsigned      bad_resp_cnt                              :  8;
#endif
} ncp_ncap_ipm_mii_bad_resp_cnt_reg_t;

/*! @struct ncp_ncap_ipm_moi_parer_detect_cnt_reg_t
 *  @brief iPCQ Manager Message Output Interface Parity Error Detect Counter
 *  @details Increments if a parity error is detected on the MOI user-data paths.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_parer_detect_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param parer_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Parity error count. When incrementing from zero, status
 *        is also captured. Writing this count to zero also
 *        clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param group_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Group number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param command </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_parer_detect_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      parer_cnt                                 :  8;
     unsigned      reserved0                                 :  6;
     unsigned      par_bit                                   :  1;
     unsigned      group_num                                 :  5;
     unsigned      queue_num                                 :  8;
     unsigned      command                                   :  4;
#else    /* Little Endian */
     unsigned      command                                   :  4;
     unsigned      queue_num                                 :  8;
     unsigned      group_num                                 :  5;
     unsigned      par_bit                                   :  1;
     unsigned      reserved0                                 :  6;
     unsigned      parer_cnt                                 :  8;
#endif
} ncp_ncap_ipm_moi_parer_detect_cnt_reg_t;

/*! @struct ncp_ncap_ipm_moi_parer_detect_data_reg_t
 *  @brief iPCQ Manager Message Output Interface Parity Error Detect Data
 *  @details Additional status associated with ipm_moi_parer_detect_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_parer_detect_data_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param data </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Contents of the 128-bit MOI data path when a parity
 *        error was detected. Sets when ipm_moi_parer_detect_cnt
 *        increments from 0. Cleared when ipm_moi_parer_detect_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_parer_detect_data_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                      data;
} ncp_ncap_ipm_moi_parer_detect_data_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_entry_drop_cnt_reg_t
 *  @brief iPCQ Manager iPCQ Entry Drop Counter
 *  @details Increments if an iPCQ entry is dropped because there is no room in the iPCQ entry buffer.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_entry_drop_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param drop_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Drop count. When incrementing from zero, status is
 *        also captured. Writing this count to zero also clears
 *        the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_entry_drop_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      drop_cnt                                  :  8;
     unsigned      reserved0                                 : 11;
     unsigned      par_bit                                   :  1;
     unsigned      queue_num                                 :  8;
     unsigned      reserved1                                 :  4;
#else    /* Little Endian */
     unsigned      reserved1                                 :  4;
     unsigned      queue_num                                 :  8;
     unsigned      par_bit                                   :  1;
     unsigned      reserved0                                 : 11;
     unsigned      drop_cnt                                  :  8;
#endif
} ncp_ncap_ipm_ipcq_entry_drop_cnt_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_entry_drop_data_reg_t
 *  @brief iPCQ Manager iPCQ Entry Drop Data
 *  @details Additional status associated with ipm_ipcq_entry_drop_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_entry_drop_data_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param data </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Contents of the 128-bit MOI data path when an iPCQ
 *        entry was dropped. Sets when ipm_ipcq_entry_drop_cnt
 *        increments from 0. Cleared when ipm_ipcq_entry_drop_cnt
 *        is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_entry_drop_data_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                      data;
} ncp_ncap_ipm_ipcq_entry_drop_data_reg_t;

/*! @struct ncp_ncap_ipm_moi_wrong_endian_cnt_reg_t
 *  @brief iPCQ Manager Message Output Interface Wrong Endian Counter
 *  @details Increments if the endian indicator bits for the iPCQ entry comining from the MOI interface do not match what is expected for the PCQ group of the iPCQ entry.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_wrong_endian_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param wrong_endian_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Wrong endian count. When incrementing from zero, status
 *        is also captured. Writing this count to zero also
 *        clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when wrong_endian_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param group_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Group number. Sets when count increments from 0. Cleared
 *        when wrong_endian_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when wrong_endian_cnt is written to zero.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. Sets when count increments from 0. Cleared
 *        when wrong_endian_cnt is written to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_wrong_endian_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      wrong_endian_cnt                          :  8;
     unsigned      reserved0                                 :  6;
     unsigned      par_bit                                   :  1;
     unsigned      group_num                                 :  5;
     unsigned      queue_num                                 :  8;
     unsigned      cmd                                       :  4;
#else    /* Little Endian */
     unsigned      cmd                                       :  4;
     unsigned      queue_num                                 :  8;
     unsigned      group_num                                 :  5;
     unsigned      par_bit                                   :  1;
     unsigned      reserved0                                 :  6;
     unsigned      wrong_endian_cnt                          :  8;
#endif
} ncp_ncap_ipm_moi_wrong_endian_cnt_reg_t;

/*! @struct ncp_ncap_ipm_moi_wrong_endian_data_reg_t
 *  @brief iPCQ Manager Message Output Interface Wrong Endian Data
 *  @details Additional status associated with ipm_moi_wrong_endian_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_moi_wrong_endian_data_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param data </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Contents of the 128-bit MOI data path when the wrong
 *        endian indicator bits for the iPCQ entry were detected.
 *        Sets when ipm_moi_wrong_endian_cnt increments from
 *        0. Cleared when ipm_moi_wrong_endian_cnt is written
 *        to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_moi_wrong_endian_data_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                      data;
} ncp_ncap_ipm_moi_wrong_endian_data_reg_t;

/*! @struct ncp_ncap_ipm_credit_overflow_cnt_reg_t
 *  @brief iPCQ Manager Credit Overflow Counter
 *  @details Increments if the iPCQ request credit counter is equal to ipcq_credit_max_value when an iPCQ entry is received from the NLINK.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_credit_overflow_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param credit_overflow_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Credit overflow count. When incrementing from zero,
 *        status is also captured. Writing this count to zero
 *        also clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credit_cnt_at_overflow </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Credit count at overflow. Sets when count increments
 *        from 0. Cleared when credit_overflow_cnt is written
 *        to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_credit_overflow_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      credit_overflow_cnt                       :  8;
     unsigned      reserved0                                 : 17;
     unsigned      credit_cnt_at_overflow                    :  7;
#else    /* Little Endian */
     unsigned      credit_cnt_at_overflow                    :  7;
     unsigned      reserved0                                 : 17;
     unsigned      credit_overflow_cnt                       :  8;
#endif
} ncp_ncap_ipm_credit_overflow_cnt_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_id_ram_parer_cnt_reg_t
 *  @brief iPCQ Manager iPCQ ID RAM Parity Error Counter
 *  @details Increments if a parity error is detected when reading the iPCQ ID RAM during auto task flow completion message generation.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_id_ram_parer_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_id_ram_parer_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> iPCQ ID RAM parity error count. When incrementing
 *        from zero, status is also captured. Writing this count
 *        to zero also clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Physical number of the aPCQ being accessed when the
 *        parity error occurred. Will set when count increments
 *        from 0. Cleared when ipcq_id_ram_parer_cnt is written
 *        to zero.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_id_ram_parer_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ipcq_id_ram_parer_cnt                     :  8;
     unsigned      reserved0                                 : 21;
     unsigned      apcq_num                                  :  3;
#else    /* Little Endian */
     unsigned      apcq_num                                  :  3;
     unsigned      reserved0                                 : 21;
     unsigned      ipcq_id_ram_parer_cnt                     :  8;
#endif
} ncp_ncap_ipm_ipcq_id_ram_parer_cnt_reg_t;

/*! @struct ncp_ncap_ipcq_entry_counts_reg_t
 *  @brief iPCQ Entry Counts
 *  @details There is a count for each iPCQ that indicates the number of iPCQ entries processed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_entry_counts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_entry_counts_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            ipcq_entry_cnt;
} ncp_ncap_ipcq_entry_counts_reg_t;

/*! @struct ncp_ncap_ipcq_entry_counts_cor_reg_t
 *  @brief iPCQ Entry Counts Clear on Read
 *  @details This is an alias of the ipcq_entry_counts register table where each count is cleared when read.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipcq_entry_counts_cor_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipcq_entry_counts_cor_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            ipcq_entry_cnt;
} ncp_ncap_ipcq_entry_counts_cor_reg_t;

/*! @struct ncp_ncap_atfc_send_credits_reg_t
 *  @brief Auto Task Flow Completion Send Credits
 *  @details This table contains a 4-bit count for each of the 8 aPCQs that indicates of the number of send credits available for auto task flow completion.  Each 32-bit word in the table contains a count for four aPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_atfc_send_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Send credits 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Send credits 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Send credits 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits_0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Send credits 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_atfc_send_credits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      send_credits_3                            :  4;
     unsigned      reserved1                                 :  4;
     unsigned      send_credits_2                            :  4;
     unsigned      reserved2                                 :  4;
     unsigned      send_credits_1                            :  4;
     unsigned      reserved3                                 :  4;
     unsigned      send_credits_0                            :  4;
#else    /* Little Endian */
     unsigned      send_credits_0                            :  4;
     unsigned      reserved3                                 :  4;
     unsigned      send_credits_1                            :  4;
     unsigned      reserved2                                 :  4;
     unsigned      send_credits_2                            :  4;
     unsigned      reserved1                                 :  4;
     unsigned      send_credits_3                            :  4;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_atfc_send_credits_reg_t;

/*! @struct ncp_ncap_ipm_mii_state_reg_t
 *  @brief iPCQ Manager Message Input Interface State Register
 *  @details This register shows the current state of the atfc_lf_state_q, iebf_unload_state_q, ipcq_mii_addr_state_q, and ipcq_mii_data_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_mii_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param atfc_lf_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the atfc_lf_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param iebf_unload_state_q </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the iebf_unload_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mii_data_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Current state of the ipcq_mii_data_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mii_addr_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the ipcq_mii_addr_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_mii_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      atfc_lf_state_q                           :  3;
     unsigned      reserved1                                 :  6;
     unsigned      iebf_unload_state_q                       :  2;
     unsigned      reserved2                                 :  5;
     unsigned      ipcq_mii_data_state_q                     :  3;
     unsigned      reserved3                                 :  5;
     unsigned      ipcq_mii_addr_state_q                     :  3;
#else    /* Little Endian */
     unsigned      ipcq_mii_addr_state_q                     :  3;
     unsigned      reserved3                                 :  5;
     unsigned      ipcq_mii_data_state_q                     :  3;
     unsigned      reserved2                                 :  5;
     unsigned      iebf_unload_state_q                       :  2;
     unsigned      reserved1                                 :  6;
     unsigned      atfc_lf_state_q                           :  3;
     unsigned      reserved0                                 :  5;
#endif
} ncp_ncap_ipm_mii_state_reg_t;

/*! @struct ncp_ncap_ipm_outstand_entry_wr_cnts_reg_t
 *  @brief iPCQ Manager Outstanding iPCQ entry Write Counts
 *  @details This register shows the current value of ipm_indexes_release_cnt_um, ipm_indexes_release_cnt_pm, and outstand_num_itasks counts..
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_outstand_entry_wr_cnts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_indexes_release_cnt_um </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current value of the ipm_indexes_release_cnt_um count. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipm_indexes_release_cnt_pm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current value of the ipm_indexes_release_cnt_pm count. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_itasks </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current value of the outstand_num_itasks count. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_outstand_entry_wr_cnts_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      ipm_indexes_release_cnt_um                :  5;
     unsigned      reserved1                                 :  3;
     unsigned      ipm_indexes_release_cnt_pm                :  5;
     unsigned      reserved2                                 : 11;
     unsigned      outstand_num_itasks                       :  5;
#else    /* Little Endian */
     unsigned      outstand_num_itasks                       :  5;
     unsigned      reserved2                                 : 11;
     unsigned      ipm_indexes_release_cnt_pm                :  5;
     unsigned      reserved1                                 :  3;
     unsigned      ipm_indexes_release_cnt_um                :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_ipm_outstand_entry_wr_cnts_reg_t;

/*! @struct ncp_ncap_mpm_mii_par_gen_polarity_reg_t
 *  @brief mPCQ Manager Message Input Interface Parity Generate Polarity
 *  @details Sets the polarity of the parity generate on the MII user-data paths. 0 is even, 1 is odd.  This register also contains the valid/ready status of the mPCQ NLINK message input interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_mii_par_gen_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_req_mii_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> mPCQ request NLINK message input interface address
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_req_mii_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> mPCQ request NLINK message input interface address
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_req_mii_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> mPCQ request NLINK message input interface data write
 *        valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_req_mii_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> mPCQ request NLINK message input interface data write
 *        ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_req_mii_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> mPCQ request NLINK message input interface write response
 *        valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_req_mii_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> mPCQ request NLINK message input interface write response
 *        ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_gen_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity generate polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_mii_par_gen_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      mpcq_req_mii_awvalid                      :  1;
     unsigned      mpcq_req_mii_awready                      :  1;
     unsigned      mpcq_req_mii_wvalid                       :  1;
     unsigned      mpcq_req_mii_wready                       :  1;
     unsigned      mpcq_req_mii_bvalid                       :  1;
     unsigned      mpcq_req_mii_bready                       :  1;
     unsigned      reserved0                                 : 25;
     unsigned      par_gen_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_gen_polarity                          :  1;
     unsigned      reserved0                                 : 25;
     unsigned      mpcq_req_mii_bready                       :  1;
     unsigned      mpcq_req_mii_bvalid                       :  1;
     unsigned      mpcq_req_mii_wready                       :  1;
     unsigned      mpcq_req_mii_wvalid                       :  1;
     unsigned      mpcq_req_mii_awready                      :  1;
     unsigned      mpcq_req_mii_awvalid                      :  1;
#endif
} ncp_ncap_mpm_mii_par_gen_polarity_reg_t;

/*! @struct ncp_ncap_mpm_moi_par_chk_polarity_reg_t
 *  @brief mPCQ Manager Message Output Interface Parity Check Polarity
 *  @details Sets the polarity of the parity check on the MOI user-data paths. 0 is even, 1 is odd.  This register also contains the valid/ready status of the mPCQ NLINK message output interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_moi_par_chk_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_moi_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> mPCQ response NLINK message output interface address
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_moi_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> mPCQ response NLINK message output interface address
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_moi_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> mPCQ response NLINK message output interface data
 *        write valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_moi_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> mPCQ response NLINK message output interface data
 *        write ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_moi_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> mPCQ response NLINK message output interface write
 *        response valid
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_moi_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> mPCQ response NLINK message output interface write
 *        response ready
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_chk_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity check polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_moi_par_chk_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      mpcq_rsp_moi_awvalid                      :  1;
     unsigned      mpcq_rsp_moi_awready                      :  1;
     unsigned      mpcq_rsp_moi_wvalid                       :  1;
     unsigned      mpcq_rsp_moi_wready                       :  1;
     unsigned      mpcq_rsp_moi_bvalid                       :  1;
     unsigned      mpcq_rsp_moi_bready                       :  1;
     unsigned      reserved0                                 : 25;
     unsigned      par_chk_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_chk_polarity                          :  1;
     unsigned      reserved0                                 : 25;
     unsigned      mpcq_rsp_moi_bready                       :  1;
     unsigned      mpcq_rsp_moi_bvalid                       :  1;
     unsigned      mpcq_rsp_moi_wready                       :  1;
     unsigned      mpcq_rsp_moi_wvalid                       :  1;
     unsigned      mpcq_rsp_moi_awready                      :  1;
     unsigned      mpcq_rsp_moi_awvalid                      :  1;
#endif
} ncp_ncap_mpm_moi_par_chk_polarity_reg_t;

/*! @struct ncp_ncap_mpm_num_beats_per_burst_reg_t
 *  @brief mPCQ Manager Number of Beats per Burst
 *  @details Sets the number of beats per burst for memory accesses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_num_beats_per_burst_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ manager memory access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_num_beats_per_burst_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      mpm_num_beat                              :  2;
#else    /* Little Endian */
     unsigned      mpm_num_beat                              :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_ncap_mpm_num_beats_per_burst_reg_t;

/*! @struct ncp_ncap_mpcq_almost_full_value_reg_t
 *  @brief mPCQ Almost Full Value
 *  @details The max mPCQ depth minus this value is the depth at which an mPCQ is considered almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_almost_full_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_almost_full_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ almost full value. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_almost_full_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      mpcq_almost_full_value                    :  8;
#else    /* Little Endian */
     unsigned      mpcq_almost_full_value                    :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_mpcq_almost_full_value_reg_t;

/*! @struct ncp_ncap_mpcq_almost_empty_value_reg_t
 *  @brief mPCQ Almost Empty Value
 *  @details The depth at which an mPCQ is considered almost empty.  This value is used to help give priority to empty mPCQs when multiple entries are available in the mPCQ Entry Buffer.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_almost_empty_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_almost_empty_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ almost empty value. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_almost_empty_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      mpcq_almost_empty_value                   :  8;
#else    /* Little Endian */
     unsigned      mpcq_almost_empty_value                   :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_mpcq_almost_empty_value_reg_t;

/*! @struct ncp_ncap_mpm_ecc_test_reg_t
 *  @brief mPCQ Manager ECC Test
 *  @details This register provides the ability to create errors in the ECC protected memory of the mPCQ entry buffer FIFO in order to verify the detection and correction logic.  This register is for testing purposes only.  It should remain clear during normal operation.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_ecc_test_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> ECC invert. This is an inversion mask that is used
 *        to invert ECC bits written to memory when enabled
 *        by the ECC invert enable bit of this register. Set
 *        one bit to cause a single bit error, two bits to cause
 *        a double bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ECC invert enable. Enables ECC inversion using the
 *        ecc_invert field of this register.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dis_ecc_correct </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Disable ECC correction. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_ecc_test_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      ecc_invert                                :  9;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved2                                 :  7;
     unsigned      dis_ecc_correct                           :  1;
#else    /* Little Endian */
     unsigned      dis_ecc_correct                           :  1;
     unsigned      reserved2                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert                                :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_mpm_ecc_test_reg_t;

/*! @struct ncp_ncap_mpb_req_stall_cnt_value_reg_t
 *  @brief Memory Pool Buffer Request Stall Count Value
 *  @details Defines the number of clock cycles to wait after receiving a nack for a memory pool buffer request before issuing another request.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_req_stall_cnt_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param req_stall_cnt_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Request stall count value. Defines the number of clock
 *        cycles to wait after receiving a nack for a memory
 *        pool buffer request before issuing another request
 *        for that same pool/size.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_req_stall_cnt_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      req_stall_cnt_value                       :  8;
#else    /* Little Endian */
     unsigned      req_stall_cnt_value                       :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_ncap_mpb_req_stall_cnt_value_reg_t;

/*! @struct ncp_ncap_mpb_req_send_credit_max_value_reg_t
 *  @brief mPCQ Pool Buffer Request Send Credit Maximum Value
 *  @details The maximum number of NLINK credits for mPCQ buffer requests.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_req_send_credit_max_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_req_send_credit_max_value </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This is the maximum number of NLINK credits for mPCQ
 *        buffer requests. The maximum allowed value is 64.
 *        If an attempt is made to set it to a larger value,
 *        it will be forced to 64. CAUTION: This register can
 *        only be written when the mPCQ manager is idle. Also,
 *        it should only be written when the mpb_req_send_credits
 *        register equals the current value of this register.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_req_send_credit_max_value_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      mpb_req_send_credit_max_value             :  7;
#else    /* Little Endian */
     unsigned      mpb_req_send_credit_max_value             :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_mpb_req_send_credit_max_value_reg_t;

/*! @struct ncp_ncap_mpb_req_send_credits_reg_t
 *  @brief mPCQ Pool Buffer Request Send Credits
 *  @details Indicates of the number mPCQ pool buffer request NLINK send credits available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_req_send_credits_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param send_credits </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Send credits </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_req_send_credits_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      send_credits                              :  7;
#else    /* Little Endian */
     unsigned      send_credits                              :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_mpb_req_send_credits_reg_t;

/*! @struct ncp_ncap_mpm_moi_wdata_flip_reg_t
 *  @brief mPCQ Manager Message Output Interface write data flip
 *  @details Flip the 8 bytes of each double-word received from the mPCQ managers's MOI write data channel.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_moi_wdata_flip_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param moi_wdata_flip </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Message output interface write data flip. When set,
 *        the 8 bytes of each double-word received from the
 *        mPCQ managers's MOI write data channel are flipped.
 *        This is set (default) when the buffers received from
 *        the NCA are in Little Endian Memory Format.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_moi_wdata_flip_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      moi_wdata_flip                            :  1;
#else    /* Little Endian */
     unsigned      moi_wdata_flip                            :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_mpm_moi_wdata_flip_reg_t;

/*! @struct ncp_ncap_mpm_grp_rst_status_reg_t
 *  @brief mPCQ Manager Group Reset Status
 *  @details Shows the group reset status in the mPCQ manager.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_grp_rst_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst_apld_to_mpcq </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Group reset has been applied to the mPCQ block. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> mPCQ block group reset is complete. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_mpb_req </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> No outstanding memory pool buffer requests (for the
 *        reset group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_mpb_wr </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> No outstanding memory pool buffer writes (for the
 *        reset group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group reset. When set, a group reset is in progress.
 *        When the rest of the non-reserved bits above bit 11
 *        of this register are set, then the group reset of
 *        the mPCQ manager is complete.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group number of the group being reset. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_grp_rst_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_rst_apld_to_mpcq                      :  1;
     unsigned      mpcq_grp_rst_cmplt                        :  1;
     unsigned      no_outstand_mpb_req                       :  1;
     unsigned      no_outstand_mpb_wr                        :  1;
     unsigned      reserved1                                 :  3;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved2                                 :  5;
     unsigned      grp_num                                   :  3;
#else    /* Little Endian */
     unsigned      grp_num                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved1                                 :  3;
     unsigned      no_outstand_mpb_wr                        :  1;
     unsigned      no_outstand_mpb_req                       :  1;
     unsigned      mpcq_grp_rst_cmplt                        :  1;
     unsigned      grp_rst_apld_to_mpcq                      :  1;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_mpm_grp_rst_status_reg_t;

/*! @struct ncp_ncap_mpm_mii_bad_resp_cnt_reg_t
 *  @brief mPCQ Manager Message Input Interface Bad Response Counter
 *  @details Increments if a response other than 0 is received on the MII response interface.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_mii_bad_resp_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param bad_resp_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Bad response count. When incrementing from zero, status
 *        is also captured. Writing this count to 0 also clears
 *        the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param response </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Response received. Will be non zero when count increments
 *        from 0. Cleared when bad_resp_cnt is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_mii_bad_resp_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      bad_resp_cnt                              :  8;
     unsigned      reserved0                                 : 22;
     unsigned      response                                  :  2;
#else    /* Little Endian */
     unsigned      response                                  :  2;
     unsigned      reserved0                                 : 22;
     unsigned      bad_resp_cnt                              :  8;
#endif
} ncp_ncap_mpm_mii_bad_resp_cnt_reg_t;

/*! @struct ncp_ncap_mpm_moi_parer_detect_cnt_reg_t
 *  @brief mPCQ Manager Message Output Interface Parity Error Detect Counter
 *  @details Increments if a parity error is detected on the MOI user-data paths.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_moi_parer_detect_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param parer_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Parity error count. When incrementing from zero, status
 *        is also captured. Writing this count to 0 also clears
 *        the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> 3 LSBs of Pool ID. Sets when count increments from
 *        0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Buffer request credits. Sets when count increments
 *        from 0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mqg </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> mPCQ queue group. Sets when count increments from
 *        0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. 0 = ack, 1 = nack. Sets when count increments
 *        from 0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_moi_parer_detect_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      parer_cnt                                 :  8;
     unsigned      pool_id                                   :  3;
     unsigned      credits                                   :  4;
     unsigned      mqg                                       :  5;
     unsigned      queue_num                                 :  8;
     unsigned      cmd                                       :  4;
#else    /* Little Endian */
     unsigned      cmd                                       :  4;
     unsigned      queue_num                                 :  8;
     unsigned      mqg                                       :  5;
     unsigned      credits                                   :  4;
     unsigned      pool_id                                   :  3;
     unsigned      parer_cnt                                 :  8;
#endif
} ncp_ncap_mpm_moi_parer_detect_cnt_reg_t;

/*! @struct ncp_ncap_mpm_moi_parer_detect_data_reg_t
 *  @brief mPCQ Manager Message Output Interface Parity Error Detect Data
 *  @details Additional status associated with mpm_moi_parer_detect_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_moi_parer_detect_data_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param data </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Contents of the 128-bit MOI data path when a parity
 *        error was detected. Sets when mpm_moi_parer_detect_cnt
 *        increments from 0. Cleared when mpm_moi_parer_detect_cnt
 *        is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_moi_parer_detect_data_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                      data;
} ncp_ncap_mpm_moi_parer_detect_data_reg_t;

/*! @struct ncp_ncap_mpm_send_credit_ovfl_cnt_reg_t
 *  @brief mPCQ Manager Send Credit Overflow Counter
 *  @details Increments if too many credits are returned from the NCA for mPCQ buffer requests.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_send_credit_ovfl_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_send_credit_ovfl_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Credit overflow count. When incrementing from zero,
 *        status is also captured. Writing this count to 0 also
 *        clears the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> 3 LSBs of Pool ID. Sets when count increments from
 *        0. Cleared when mpm_send_credit_ovfl_cnt is written
 *        to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Buffer request credits. Sets when count increments
 *        from 0. Cleared when mpm_send_credit_ovfl_cnt is written
 *        to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mqg </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> mPCQ queue group. Sets when count increments from
 *        0. Cleared when mpm_send_credit_ovfl_cnt is written
 *        to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when mpm_send_credit_ovfl_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. 0 = ack, 1 = nack. Sets when count increments
 *        from 0. Cleared when mpm_send_credit_ovfl_cnt is written
 *        to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_send_credit_ovfl_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      mpm_send_credit_ovfl_cnt                  :  8;
     unsigned      pool_id                                   :  3;
     unsigned      credits                                   :  4;
     unsigned      mqg                                       :  5;
     unsigned      queue_num                                 :  8;
     unsigned      cmd                                       :  4;
#else    /* Little Endian */
     unsigned      cmd                                       :  4;
     unsigned      queue_num                                 :  8;
     unsigned      mqg                                       :  5;
     unsigned      credits                                   :  4;
     unsigned      pool_id                                   :  3;
     unsigned      mpm_send_credit_ovfl_cnt                  :  8;
#endif
} ncp_ncap_mpm_send_credit_ovfl_cnt_reg_t;

/*! @struct ncp_ncap_mpm_num_credits_before_ovfl_reg_t
 *  @brief mPCQ Manager Number of Credits Before Overflow
 *  @details Additional status associated with mpm_send_credit_ovfl_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_num_credits_before_ovfl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits_bef_ovfl </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Credits before overflow. Sets when mpm_send_credit_ovfl_cnt
 *        increments from 0. Cleared when mpm_send_credit_ovfl_cnt
 *        is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_num_credits_before_ovfl_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      credits_bef_ovfl                          :  6;
#else    /* Little Endian */
     unsigned      credits_bef_ovfl                          :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_mpm_num_credits_before_ovfl_reg_t;

/*! @struct ncp_ncap_mpm_buffer_req_count_reg_t
 *  @brief mPCQ Manager Buffer Requests Count
 *  @details Counts the total number of buffers requested.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_req_count_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param buf_req_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Buffer request count. The counter saturates at all
 *        ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_req_count_reg_t
 *
 */
 
typedef struct
{
     unsigned  int               buf_req_cnt;
} ncp_ncap_mpm_buffer_req_count_reg_t;

/*! @struct ncp_ncap_mpm_buffer_req_count_cor_reg_t
 *  @brief mPCQ Manager Buffer Requests Count Clear on Read
 *  @details This is an alias of the mpm_buffer_req_count which is cleared when read.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_req_count_cor_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param buf_req_cnt_cor </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Buffer request count clear on read. The counter saturates
 *        at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_req_count_cor_reg_t
 *
 */
 
typedef struct
{
     unsigned  int           buf_req_cnt_cor;
} ncp_ncap_mpm_buffer_req_count_cor_reg_t;

/*! @struct ncp_ncap_mpm_buffer_nack_count_reg_t
 *  @brief mPCQ Manager Buffer Nack Count
 *  @details Counts the total number of nacks for buffer requests.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_nack_count_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param buf_nack_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Buffer nack count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_nack_count_reg_t
 *
 */
 
typedef struct
{
     unsigned  int              buf_nack_cnt;
} ncp_ncap_mpm_buffer_nack_count_reg_t;

/*! @struct ncp_ncap_mpm_buffer_nack_count_cor_reg_t
 *  @brief mPCQ Manager Buffer Nack Count Clear on Read
 *  @details This is an alias of the mpm_buffer_nack_count which is cleared when read.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_nack_count_cor_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param buf_nack_cnt_cor </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Buffer nack count clear on read. The counter saturates
 *        at all ones.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_nack_count_cor_reg_t
 *
 */
 
typedef struct
{
     unsigned  int          buf_nack_cnt_cor;
} ncp_ncap_mpm_buffer_nack_count_cor_reg_t;

/*! @struct ncp_ncap_mpm_buffer_drop_fifo_full_cnt_reg_t
 *  @brief mPCQ Manager Buffer Drop Counter
 *  @details Increments if a buffer is dropped because there is no room in the mme pool buffer.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_drop_fifo_full_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_buffer_drop_fifo_full_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Buffer drop count. When incrementing from zero, status
 *        is also captured. Writing this count to 0 also clears
 *        the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param size </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Size. Sets when count increments from 0. Cleared when
 *        parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Pool ID. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Buffer request credits. Sets when count increments
 *        from 0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. 0 = ack, 1 = nack. Sets when count increments
 *        from 0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_drop_fifo_full_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      mpm_buffer_drop_fifo_full_cnt             :  8;
     unsigned      par_bit                                   :  1;
     unsigned      size                                      :  2;
     unsigned      pool_id                                   :  5;
     unsigned      credits                                   :  4;
     unsigned      queue_num                                 :  8;
     unsigned      cmd                                       :  4;
#else    /* Little Endian */
     unsigned      cmd                                       :  4;
     unsigned      queue_num                                 :  8;
     unsigned      credits                                   :  4;
     unsigned      pool_id                                   :  5;
     unsigned      size                                      :  2;
     unsigned      par_bit                                   :  1;
     unsigned      mpm_buffer_drop_fifo_full_cnt             :  8;
#endif
} ncp_ncap_mpm_buffer_drop_fifo_full_cnt_reg_t;

/*! @struct ncp_ncap_mpm_buffer_drop_data_reg_t
 *  @brief mPCQ Manager Buffer Drop Data
 *  @details Additional status associated with mpm_buffer_drop_fifo_full_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_drop_data_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param data </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Contents of the 128-bit MOI data path when a buffer
 *        drop occurs. Sets when mpm_buffer_drop_fifo_full_cnt
 *        increments from 0. Cleared when mpm_buffer_drop_fifo_full_cnt
 *        is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_drop_data_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                      data;
} ncp_ncap_mpm_buffer_drop_data_reg_t;

/*! @struct ncp_ncap_mpm_buffer_drop_req_addr_er_cnt_reg_t
 *  @brief mPCQ Manager Buffer Drop Request Address Error Counter
 *  @details Increments if buffers are dropped because the request for an mPCQ address to write the buffers produced an error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_drop_req_addr_er_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_buffer_drop_req_addr_er_cnt </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Buffer drop count. When incrementing from zero, status
 *        is also captured. Writing this count to 0 also clears
 *        the status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Parity bit. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param size </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Size. Sets when count increments from 0. Cleared when
 *        parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Pool ID. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param credits </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Buffer request credits. Sets when count increments
 *        from 0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param queue_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Queue number. Sets when count increments from 0. Cleared
 *        when parer_cnt is written to 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Command. 0 = ack, 1 = nack. Sets when count increments
 *        from 0. Cleared when parer_cnt is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_drop_req_addr_er_cnt_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      mpm_buffer_drop_req_addr_er_cnt           :  8;
     unsigned      par_bit                                   :  1;
     unsigned      size                                      :  2;
     unsigned      pool_id                                   :  5;
     unsigned      credits                                   :  4;
     unsigned      queue_num                                 :  8;
     unsigned      cmd                                       :  4;
#else    /* Little Endian */
     unsigned      cmd                                       :  4;
     unsigned      queue_num                                 :  8;
     unsigned      credits                                   :  4;
     unsigned      pool_id                                   :  5;
     unsigned      size                                      :  2;
     unsigned      par_bit                                   :  1;
     unsigned      mpm_buffer_drop_req_addr_er_cnt           :  8;
#endif
} ncp_ncap_mpm_buffer_drop_req_addr_er_cnt_reg_t;

/*! @struct ncp_ncap_mpm_buffer_drop_req_addr_er_data_reg_t
 *  @brief mPCQ Manager Buffer Drop Request Address Error Data
 *  @details Additional status associated with mpm_buffer_drop_req_addr_er_cnt.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_buffer_drop_req_addr_er_data_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param data </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Contents of the 128-bit MOI data path when a buffer
 *        drop occurs. Sets when mpm_buffer_drop_req_addr_er_cnt
 *        increments from 0. Cleared when mpm_buffer_drop_req_addr_er_cnt
 *        is written to 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_buffer_drop_req_addr_er_data_reg_t
 *
 */
 
typedef struct
{
     unsigned  int                      data;
} ncp_ncap_mpm_buffer_drop_req_addr_er_data_reg_t;

/*! @struct ncp_ncap_mpm_mpcq_state_reg_t
 *  @brief mPCQ Manager mPCQ State Register
 *  @details This register shows the current state of the mpcq_load_index_tbl_state_q, mpcq_pcq_entry_add_state_q, and mpcq_as_access_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_mpcq_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_load_index_tbl_state_q </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current state of the mpcq_load_index_tbl_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_pcq_entry_add_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the mpcq_pcq_entry_add_state_q state
 *        machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_as_access_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the mpcq_as_access_state_q state
 *        machine.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_mpcq_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      mpcq_load_index_tbl_state_q               :  1;
     unsigned      reserved1                                 :  5;
     unsigned      mpcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved2                                 : 13;
     unsigned      mpcq_as_access_state_q                    :  3;
#else    /* Little Endian */
     unsigned      mpcq_as_access_state_q                    :  3;
     unsigned      reserved2                                 : 13;
     unsigned      mpcq_pcq_entry_add_state_q                :  3;
     unsigned      reserved1                                 :  5;
     unsigned      mpcq_load_index_tbl_state_q               :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_ncap_mpm_mpcq_state_reg_t;

/*! @struct ncp_ncap_mpm_write_engine_state_reg_t
 *  @brief mPCQ Manager Read and Write Engine State Register
 *  @details This register shows the current state of the weng_write_op_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_write_engine_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_write_op_state_q </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the weng_write_op_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_write_engine_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      weng_write_op_state_q                     :  4;
#else    /* Little Endian */
     unsigned      weng_write_op_state_q                     :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_mpm_write_engine_state_reg_t;

/*! @struct ncp_ncap_mpm_mii_state_reg_t
 *  @brief mPCQ Manager Message Input Interface State Register
 *  @details This register shows the current state of the mpcq_rsp_fifo_unload_state_q, mpcq_mii_addr_state_q, and mpcq_mii_data_state_q state machines.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_mii_state_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_rsp_fifo_unload_state_q </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current state of the mpcq_rsp_fifo_unload_state_q
 *        state machine.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_mii_data_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Current state of the mpcq_mii_data_state_q state machine. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_mii_addr_state_q </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current state of the mpcq_mii_addr_state_q state machine. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_mii_state_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      mpcq_rsp_fifo_unload_state_q              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpcq_mii_data_state_q                     :  3;
     unsigned      reserved2                                 :  5;
     unsigned      mpcq_mii_addr_state_q                     :  3;
#else    /* Little Endian */
     unsigned      mpcq_mii_addr_state_q                     :  3;
     unsigned      reserved2                                 :  5;
     unsigned      mpcq_mii_data_state_q                     :  3;
     unsigned      reserved1                                 :  5;
     unsigned      mpcq_rsp_fifo_unload_state_q              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_ncap_mpm_mii_state_reg_t;

/*! @struct ncp_ncap_mpm_outstand_mbws_cnts_reg_t
 *  @brief mPCQ Manager Outstanding mPCQ Buffer Writes Counts
 *  @details This register shows the current value of mpm_indexes_release_cnt_um, mpm_indexes_release_cnt_pm, and outstand_num_mbws counts..
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_outstand_mbws_cnts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_indexes_release_cnt_um </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Current value of the mpm_indexes_release_cnt_um count. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_indexes_release_cnt_pm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Current value of the mpm_indexes_release_cnt_pm count. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_mbws </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current value of the outstand_num_mbws count. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_outstand_mbws_cnts_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      mpm_indexes_release_cnt_um                :  5;
     unsigned      reserved1                                 :  3;
     unsigned      mpm_indexes_release_cnt_pm                :  5;
     unsigned      reserved2                                 : 11;
     unsigned      outstand_num_mbws                         :  5;
#else    /* Little Endian */
     unsigned      outstand_num_mbws                         :  5;
     unsigned      reserved2                                 : 11;
     unsigned      mpm_indexes_release_cnt_pm                :  5;
     unsigned      reserved1                                 :  3;
     unsigned      mpm_indexes_release_cnt_um                :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_mpm_outstand_mbws_cnts_reg_t;

/*! @struct ncp_ncap_mpm_rsp_fifo_hwm_reg_t
 *  @brief MPM Response FIFO High Water Mark
 *  @details The depth at which the MPM response FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_rsp_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 23 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_rsp_fifo_hwm </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. MPM response FIFO high water mark.
 *        The fifo depth is 256.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_rsp_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 23;
     unsigned      mpm_rsp_fifo_hwm                          :  9;
#else    /* Little Endian */
     unsigned      mpm_rsp_fifo_hwm                          :  9;
     unsigned      reserved0                                 : 23;
#endif
} ncp_ncap_mpm_rsp_fifo_hwm_reg_t;

/*! @struct ncp_ncap_mpm_brsp_fifo_hwm_reg_t
 *  @brief MPM MOI Bresponse FIFO High Water Mark
 *  @details The depth at which the MPM MOI bresponse FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_brsp_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_brsp_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. MPM MOI bresp FIFO high water mark.
 *        The fifo depth is 16.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_brsp_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      mpm_brsp_fifo_hwm                         :  5;
#else    /* Little Endian */
     unsigned      mpm_brsp_fifo_hwm                         :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_ncap_mpm_brsp_fifo_hwm_reg_t;

/*! @struct ncp_ncap_mpb_req_ll_fifo_hwm_reg_t
 *  @brief MPM Memory Pool Buffer Request Linked List FIFO High Water Mark
 *  @details The depth at which the mPCQ Manager memory pool buffer request linked list FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpb_req_ll_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_req_ll_fifo_hwm </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. MPM memory pool buffer request linked
 *        list FIFO high water mark. The fifo depth is 64.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpb_req_ll_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      mpb_req_ll_fifo_hwm                       :  7;
#else    /* Little Endian */
     unsigned      mpb_req_ll_fifo_hwm                       :  7;
     unsigned      reserved0                                 : 25;
#endif
} ncp_ncap_mpb_req_ll_fifo_hwm_reg_t;

/*! @struct ncp_ncap_mpm_moi_addr_fifo_hwm_reg_t
 *  @brief MPM MOI Address FIFO High Water Mark
 *  @details The depth at which the MPM message output interface address FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_moi_addr_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_moi_addr_fifo_hwm </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. MPM MOI address FIFO high water mark.
 *        The fifo depth is 8.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_moi_addr_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      mpm_moi_addr_fifo_hwm                     :  4;
#else    /* Little Endian */
     unsigned      mpm_moi_addr_fifo_hwm                     :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_ncap_mpm_moi_addr_fifo_hwm_reg_t;

/*! @struct ncp_ncap_mpm_moi_data_fifo_hwm_reg_t
 *  @brief MPM MOI DATA FIFO High Water Mark
 *  @details The depth at which the MPM message output interface data FIFO goes almost full.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_moi_data_fifo_hwm_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpm_moi_data_fifo_hwm </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> THE DEFAULT VALUE IN THIS REGISTER SHOULD NORMALLY
 *        NOT BE CHANGED. MPM MOI bresp FIFO high water mark.
 *        The fifo depth is 32.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_moi_data_fifo_hwm_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      mpm_moi_data_fifo_hwm                     :  6;
#else    /* Little Endian */
     unsigned      mpm_moi_data_fifo_hwm                     :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_ncap_mpm_moi_data_fifo_hwm_reg_t;

/*! @struct ncp_ncap_mpcq_entry_counts_reg_t
 *  @brief mPCQ Entry Counts
 *  @details There is a count for each mPCQ that indicates the number of mPCQ entries processed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_entry_counts_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_entry_counts_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            mpcq_entry_cnt;
} ncp_ncap_mpcq_entry_counts_reg_t;

/*! @struct ncp_ncap_mpcq_entry_counts_cor_reg_t
 *  @brief mPCQ Entry Counts Clear on Read
 *  @details This is an alias of the mpcq_entry_counts register table where each count is cleared when read.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_entry_counts_cor_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param mpcq_entry_cnt </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> mPCQ entry count. The counter saturates at all ones. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_entry_counts_cor_reg_t
 *
 */
 
typedef struct
{
     unsigned  int            mpcq_entry_cnt;
} ncp_ncap_mpcq_entry_counts_cor_reg_t;

/*! @struct ncp_ncap_mpcq_num_entries_outstanding_reg_t
 *  @brief mPCQ Number of Entries Outstanding Table
 *  @details This table contains a 6-bit count for each of the 192 mPCQs that indicates of the outstanding number of entries in process.  Each 32-bit word in the table contains a count for four mPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_num_entries_outstanding_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of entries 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of entries 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of entries 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_num_entries_0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of entries 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_num_entries_outstanding_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstand_num_entries_3                    :  8;
     unsigned      outstand_num_entries_2                    :  8;
     unsigned      outstand_num_entries_1                    :  8;
     unsigned      outstand_num_entries_0                    :  8;
#else    /* Little Endian */
     unsigned      outstand_num_entries_0                    :  8;
     unsigned      outstand_num_entries_1                    :  8;
     unsigned      outstand_num_entries_2                    :  8;
     unsigned      outstand_num_entries_3                    :  8;
#endif
} ncp_ncap_mpcq_num_entries_outstanding_reg_t;

/*! @struct ncp_ncap_mpcq_outstand_buf_reqs_reg_t
 *  @brief mPCQ Outstanding Buffer Requests Table
 *  @details This table contains a 4-bit count for each of the 192 mPCQs that indicates of the outstanding number of buffer requests.  Each request is for the number of buffers defined by pcq_desc_mpcq.PCQ_desc_r2.mpcq_num_bufs_per_req.  Each 32-bit word in the table contains a count for four mPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpcq_outstand_buf_reqs_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_buf_reqs_3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding buffer requests 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_buf_reqs_2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding buffer requests 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_buf_reqs_1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding buffer requests 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstand_buf_reqs_0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding buffer requests 0 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpcq_outstand_buf_reqs_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      outstand_buf_reqs_3                       :  4;
     unsigned      reserved1                                 :  4;
     unsigned      outstand_buf_reqs_2                       :  4;
     unsigned      reserved2                                 :  4;
     unsigned      outstand_buf_reqs_1                       :  4;
     unsigned      reserved3                                 :  4;
     unsigned      outstand_buf_reqs_0                       :  4;
#else    /* Little Endian */
     unsigned      outstand_buf_reqs_0                       :  4;
     unsigned      reserved3                                 :  4;
     unsigned      outstand_buf_reqs_1                       :  4;
     unsigned      reserved2                                 :  4;
     unsigned      outstand_buf_reqs_2                       :  4;
     unsigned      reserved1                                 :  4;
     unsigned      outstand_buf_reqs_3                       :  4;
     unsigned      reserved0                                 :  4;
#endif
} ncp_ncap_mpcq_outstand_buf_reqs_reg_t;

/*! @struct ncp_ncap_pgit_mem_par_chk_polarity_reg_t
 *  @brief PGIT Memory Parity Check Polarity
 *  @details Sets the polarity of the parity check for the internal NCAP PGIT memory. 0 is even, 1 is odd.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_mem_par_chk_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_chk_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity check polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_mem_par_chk_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      par_chk_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_chk_polarity                          :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_pgit_mem_par_chk_polarity_reg_t;

/*! @struct ncp_ncap_pgit_mem_par_gen_polarity_reg_t
 *  @brief PGIT Memory Parity Generate Polarity
 *  @details Sets the polarity of the parity generation for the internal NCAP PGIT memory. 0 is even, 1 is odd.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgit_mem_par_gen_polarity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param par_gen_polarity </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Parity generate polarity. 0 is even, 1 is odd. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgit_mem_par_gen_polarity_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      par_gen_polarity                          :  1;
#else    /* Little Endian */
     unsigned      par_gen_polarity                          :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_ncap_pgit_mem_par_gen_polarity_reg_t;

/*! @struct ncp_ncap_pgitm_num_beats_per_burst_reg_t
 *  @brief PGIT Monitr Number of Beats per Burst
 *  @details Sets the number of beats per burst for memory accesses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgitm_num_beats_per_burst_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitm_wr_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> PGIT Monitor memory write number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitm_rd_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PGIT Monitor memory read number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgitm_num_beats_per_burst_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      pgitm_wr_num_beat                         :  2;
     unsigned      reserved1                                 : 14;
     unsigned      pgitm_rd_num_beat                         :  2;
#else    /* Little Endian */
     unsigned      pgitm_rd_num_beat                         :  2;
     unsigned      reserved1                                 : 14;
     unsigned      pgitm_wr_num_beat                         :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_ncap_pgitm_num_beats_per_burst_reg_t;

/*! @struct ncp_ncap_pgitm_grp_rst_status_reg_t
 *  @brief PGIT Monitor Group Reset Status
 *  @details Shows the group reset status in the PGIT Monitor.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_pgitm_grp_rst_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitm_grp_rst_cmplt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> PGIT monitor group reset is complete. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_pcq_index_wr </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> No outstanding PCQ index memory writes. (for the reset
 *        group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_ipcq_index_inc </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> No outstanding iPCQ index increments (for the reset
 *        group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_opcq_index_inc </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> No outstanding oPCQ index increments (for the reset
 *        group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param no_outstand_mpcq_index_inc </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> No outstanding mPCQ index increments (for the reset
 *        group).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_rst </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Group reset. When set, a group reset is in progress.
 *        When the rest of the non-reserved bits above bit 11
 *        of this register are set, then the group reset of
 *        the PGIT Monitor is complete.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group number of the group being reset. </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_pgitm_grp_rst_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      pgitm_grp_rst_cmplt                       :  1;
     unsigned      no_outstand_pcq_index_wr                  :  1;
     unsigned      no_outstand_ipcq_index_inc                :  1;
     unsigned      no_outstand_opcq_index_inc                :  1;
     unsigned      no_outstand_mpcq_index_inc                :  1;
     unsigned      reserved1                                 :  3;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved2                                 :  5;
     unsigned      grp_num                                   :  3;
#else    /* Little Endian */
     unsigned      grp_num                                   :  3;
     unsigned      reserved2                                 :  5;
     unsigned      grp_rst                                   :  1;
     unsigned      reserved1                                 :  3;
     unsigned      no_outstand_mpcq_index_inc                :  1;
     unsigned      no_outstand_opcq_index_inc                :  1;
     unsigned      no_outstand_ipcq_index_inc                :  1;
     unsigned      no_outstand_pcq_index_wr                  :  1;
     unsigned      pgitm_grp_rst_cmplt                       :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_ncap_pgitm_grp_rst_status_reg_t;

/*! @struct ncp_ncap_opm_opcq_entry_ll_fifo_status_reg_t
 *  @brief OPM oPCQ Entry Linked List FIFO Status
 *  @details Provides the status of the oPCQ manager oPCQ entry linked list FIFO.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_opcq_entry_ll_fifo_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_depth </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> FIFO Depth (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_ll_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> FIFO linked list memory parity error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_buf_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> FIFO buffer memory parity error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_overflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> FIFO overflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> FIFO undeflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> FIFO full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_afull </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> FIFO almost full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_ll_empty </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group linked list empty. Each bit corresponds to the
 *        empty state of the linked list for each group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_opcq_entry_ll_fifo_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      fifo_depth                                :  7;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_afull                                :  1;
     unsigned      reserved1                                 :  8;
     unsigned      grp_ll_empty                              :  8;
#else    /* Little Endian */
     unsigned      grp_ll_empty                              :  8;
     unsigned      reserved1                                 :  8;
     unsigned      fifo_afull                                :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_depth                                :  7;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_opm_opcq_entry_ll_fifo_status_reg_t;

/*! @struct ncp_ncap_opm_atfc_ll_fifo_status_reg_t
 *  @brief OPM Auto Task Flow Completion Linked List FIFO Status
 *  @details Provides the status of the oPCQ manager auto task flow completion linked list FIFO.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_opm_atfc_ll_fifo_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_depth </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> FIFO Depth (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_ll_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> FIFO linked list memory parity error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_buf_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> FIFO buffer memory parity error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_overflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> FIFO overflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> FIFO undeflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> FIFO full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_afull </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> FIFO almost full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_ll_empty </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group linked list empty. Each bit corresponds to the
 *        empty state of the linked list for each group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_opm_atfc_ll_fifo_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      fifo_depth                                :  7;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_afull                                :  1;
     unsigned      reserved1                                 :  8;
     unsigned      grp_ll_empty                              :  8;
#else    /* Little Endian */
     unsigned      grp_ll_empty                              :  8;
     unsigned      reserved1                                 :  8;
     unsigned      fifo_afull                                :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_depth                                :  7;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_opm_atfc_ll_fifo_status_reg_t;

/*! @struct ncp_ncap_ipm_ipcq_entry_ll_fifo_status_reg_t
 *  @brief IPM iPCQ Entry Linked List FIFO Status
 *  @details Provides the status of the iPCQ manager iPCQ entry linked list FIFO. Note that the high water mark for this fifo is the ipcq_credit_max_value register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_ipm_ipcq_entry_ll_fifo_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_depth </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> FIFO Depth (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_ll_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> FIFO linked list memory parity error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_buf_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> FIFO buffer memory parity error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_overflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> FIFO overflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> FIFO undeflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> FIFO full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_afull </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> FIFO almost full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_ll_empty </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group linked list empty. Each bit corresponds to the
 *        empty state of the linked list for each group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_ipm_ipcq_entry_ll_fifo_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      fifo_depth                                :  7;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_afull                                :  1;
     unsigned      reserved1                                 :  8;
     unsigned      grp_ll_empty                              :  8;
#else    /* Little Endian */
     unsigned      grp_ll_empty                              :  8;
     unsigned      reserved1                                 :  8;
     unsigned      fifo_afull                                :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_depth                                :  7;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_ipm_ipcq_entry_ll_fifo_status_reg_t;

/*! @struct ncp_ncap_mpm_req_ll_fifo_status_reg_t
 *  @brief MPM Memory Pool Buffer Request Linked List FIFO Status
 *  @details Provides the status of the mPCQ manager memory pool buffer request linked list FIFO.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_mpm_req_ll_fifo_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_depth </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> FIFO Depth (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_ll_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> FIFO linked list memory parity error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_buf_mem_parity_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> FIFO buffer memory parity error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_overflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> FIFO overflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> FIFO undeflow. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> FIFO full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param fifo_afull </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> FIFO almost full (sum of all group lists). </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_ll_empty </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group linked list empty. Each bit corresponds to the
 *        empty state of the linked list for each group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_mpm_req_ll_fifo_status_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      fifo_depth                                :  7;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_afull                                :  1;
     unsigned      reserved1                                 :  8;
     unsigned      grp_ll_empty                              :  8;
#else    /* Little Endian */
     unsigned      grp_ll_empty                              :  8;
     unsigned      reserved1                                 :  8;
     unsigned      fifo_afull                                :  1;
     unsigned      fifo_full                                 :  1;
     unsigned      fifo_underflow                            :  1;
     unsigned      fifo_overflow                             :  1;
     unsigned      fifo_buf_mem_parity_err                   :  1;
     unsigned      fifo_ll_mem_parity_err                    :  1;
     unsigned      fifo_depth                                :  7;
     unsigned      reserved0                                 :  3;
#endif
} ncp_ncap_mpm_req_ll_fifo_status_reg_t;

/*! @struct ncp_ncap_AW_smon01_ncap_task_smon_r_t
 *  @brief AW_smon CONTROL1 register
 *  @details This is used to configure the operation of the 2 internal counters in the SMON
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_AW_smon01_ncap_task_smon_r_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> select input signal for SMON1 engine </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> select input signal for SMON0 engine </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_AW_smon01_ncap_task_smon_r_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      mode1                                     :  8;
     unsigned      mode0                                     :  8;
#else    /* Little Endian */
     unsigned      mode0                                     :  8;
     unsigned      mode1                                     :  8;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_AW_smon01_ncap_task_smon_r_t;

/*! @struct ncp_ncap_AW_smon01_ncap_task_smon1_r_t
 *  @brief AW_smon CONTROL1 register
 *  @details This is used to configure the operation of the 2 internal counters in the SMON
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_ncap_AW_smon01_ncap_task_smon1_r_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> select input signal for SMON1 engine </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> select input signal for SMON0 engine </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_AW_smon01_ncap_task_smon1_r_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      mode1                                     :  8;
     unsigned      mode0                                     :  8;
#else    /* Little Endian */
     unsigned      mode0                                     :  8;
     unsigned      mode1                                     :  8;
     unsigned      reserved0                                 : 16;
#endif
} ncp_ncap_AW_smon01_ncap_task_smon1_r_t;

/*! @struct ncp_ncap_addr_xlat_reg_t
 *  @brief Multi-word data structure
 *  <table width="70%" align="center">
 *   <tr>
 *     <td colspan="4" align="center">
 *       struct ncp_ncap_addr_xlat_reg_t
 *     </td>
 *   </tr>
 *   <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *   </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Base address high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_l </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Base address low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_dynamic_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Maximum dynamic high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_dynamic_l </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum dynamic low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_addr_xlat_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
          /* word 0 */
     unsigned      base_addr_h                               : 32;
          /* word 1 */
     unsigned      base_addr_l                               : 24;
     unsigned      reserved0                                 :  8;
          /* word 2 */
     unsigned      max_dynamic_h                             : 32;
          /* word 3 */
     unsigned      max_dynamic_l                             : 24;
     unsigned      reserved1                                 :  8;
#else    /* Little Endian */
          /* word 0 */
     unsigned      base_addr_h                               : 32;
          /* word 1 */
     unsigned      reserved0                                 :  8;
     unsigned      base_addr_l                               : 24;
          /* word 2 */
     unsigned      max_dynamic_h                             : 32;
          /* word 3 */
     unsigned      reserved1                                 :  8;
     unsigned      max_dynamic_l                             : 24;
#endif
} ncp_ncap_addr_xlat_reg_t;

/*! @struct ncp_ncap_vpp_base_addr_reg_t
 *  @brief Multi-word data structure
 *  <table width="70%" align="center">
 *   <tr>
 *     <td colspan="4" align="center">
 *       struct ncp_ncap_vpp_base_addr_reg_t
 *     </td>
 *   </tr>
 *   <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *   </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_256_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Base address 256 high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_256_l </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Base address 256 low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_2k_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Base address 2k high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_2k_l </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Base address 2k low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_16k_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Base address 16k high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_16k_l </td>
 *     <td width="20%" align="center"> 18 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Base address 16k low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_64k_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Base address 64k high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_64k_l </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Base address 64k low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: xlf --> ncp_ncap_vpp_base_addr_reg_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
          /* word 0 */
     unsigned      base_addr_256_h                           : 32;
          /* word 1 */
     unsigned      base_addr_256_l                           : 24;
     unsigned      reserved0                                 :  8;
          /* word 2 */
     unsigned      base_addr_2k_h                            : 32;
          /* word 3 */
     unsigned      base_addr_2k_l                            : 21;
     unsigned      reserved1                                 : 11;
          /* word 4 */
     unsigned      base_addr_16k_h                           : 32;
          /* word 5 */
     unsigned      base_addr_16k_l                           : 18;
     unsigned      reserved2                                 : 14;
          /* word 6 */
     unsigned      base_addr_64k_h                           : 32;
          /* word 7 */
     unsigned      base_addr_64k_l                           : 16;
     unsigned      reserved3                                 : 16;
#else    /* Little Endian */
          /* word 0 */
     unsigned      base_addr_256_h                           : 32;
          /* word 1 */
     unsigned      reserved0                                 :  8;
     unsigned      base_addr_256_l                           : 24;
          /* word 2 */
     unsigned      base_addr_2k_h                            : 32;
          /* word 3 */
     unsigned      reserved1                                 : 11;
     unsigned      base_addr_2k_l                            : 21;
          /* word 4 */
     unsigned      base_addr_16k_h                           : 32;
          /* word 5 */
     unsigned      reserved2                                 : 14;
     unsigned      base_addr_16k_l                           : 18;
          /* word 6 */
     unsigned      base_addr_64k_h                           : 32;
          /* word 7 */
     unsigned      reserved3                                 : 16;
     unsigned      base_addr_64k_l                           : 16;
#endif
} ncp_ncap_vpp_base_addr_reg_t;

#ifdef __cplusplus
}
#endif

#endif /* _NCP_NCAP_REGS_H_ */
