/*
 *  Copyright (C) 2014 LSI (john.jacques@lsi.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef _NCP_NCA_REGS_H_
#define _NCP_NCA_REGS_H_

#ifdef __cplusplus
extern "C" {
#endif

#if 0 /* UBOOT */
#include "ncp_sal_types.h"
#endif

/*! @struct ncp_nca_config_init_reg_t
 *  @brief NCA Config and Initialization Parameters
 *  @details This register defines some AXI burst beat numbers, enables, and soft reset signals
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask to make the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cfg_ring_ack_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_compl_cnt_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> tfc_completion_count_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_flush </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> tfc_flush </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cpcq_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> otask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> itask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> tfc_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> rbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rbp_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_cons_ent </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_consecutive_entries_per_queue_to_send </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ipcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_w_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_r_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 * </table>
 * Applies to: 34xx --> ncp_nca_config_init_reg_t
 *
 * Implemented by: 
 *      config_init
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare6                                    :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      spare5                                    :  2;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      spare4                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare3                                    :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare2                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare1                                    :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      ita_num_beat                              :  2;
     unsigned      spare0                                    :  4;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      spare0                                    :  4;
     unsigned      ita_num_beat                              :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      spare1                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare2                                    :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      spare3                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare4                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      spare5                                    :  2;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      spare6                                    :  1;
#endif
} ncp_nca_config_init_reg_t;


/*! @struct ncp_nca_config_init_reg_32xx_t
 *  @brief NCA Config and Initialization Parameters
 *  @details This register defines some AXI burst beat numbers, enables, and soft reset signals
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_reg_32xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask to make the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cfg_ring_ack_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_compl_cnt_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> tfc_completion_count_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_flush </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> tfc_flush </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cpcq_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> otask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> itask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> tfc_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> rbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rbp_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to axi memory at the address defined by otbp_bar_upper
 *        and otbp_bar_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_cons_ent </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_consecutive_entries_per_queue_to_send </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ipcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_w_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_r_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 * </table>
 * Applies to: 32xx --> ncp_nca_config_init_reg_32xx_t
 *
 * Implemented by: 
 *      config_init
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      reserved1                                 :  3;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      opcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      opcq_num_beat                             :  2;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      reserved1                                 :  3;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_config_init_reg_32xx_t;

/*! @struct ncp_nca_config_init_reg_25xx_t
 *  @brief NCA Config and Initialization Parameters
 *  @details This register defines some AXI burst beat numbers, enables, and soft reset signals
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask to make the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cfg_ring_ack_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_compl_cnt_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> tfc_completion_count_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_flush </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> tfc_flush </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cpcq_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> otask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> itask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> tfc_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> rbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rbp_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to axi memory at the address defined by otbp_bar_upper
 *        and otbp_bar_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_exec_disable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cpcq execution disable bit : NOTE: This bit is supposed
 *        to be used sparingly (for debugging etc.) to temporarily
 *        halt the execution from cfg request fifo of the cpcq
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_cons_ent </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_consecutive_entries_per_queue_to_send </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ipcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_w_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_r_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_config_init_reg_25xx_t
 *
 * Implemented by: 
 *      config_init
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare                                     :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      opcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      opcq_num_beat                             :  2;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare                                     :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_config_init_reg_25xx_t;

/*! @struct ncp_nca_config_init_reg_55xx_t
 *  @brief NCA Configuration and Initialization Control
 *  @details This register contains memory access burst beat numbers and block enables.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param spare6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask that makes the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Configuration ring acknowledge timer enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cPCQ processing enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task accumulator enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Input task accumulator enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task backpressure soft reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpbf_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> MME pool buffer FIFO enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to memory at the address defined by otbp_vi_upper
 *        and otbp_vi_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_exec_disable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cpcq execution disable bit : NOTE: This bit is supposed
 *        to be used sparingly (for debugging etc.) to temporarily
 *        halt the execution from cfg request fifo of the cpcq
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_ent_per_req_m1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ number of entries per request minus 1. Sets the
 *        maximum number of oPCQ entries to be fetched per request
 *        to the oPCQ entry read engine. (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> output task acumulator memory access number of beats
 *        per burst:00:1,01:2,1X:4
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> input task acumulator memory access number of beats
 *        per burst:00:1,01:2,1X:4
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> NCA pgit memory write access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCA pgit memory read access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_config_init_reg_55xx_t
 *
 * Implemented by: 
 *      config_init
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare6                                    :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      spare5                                    :  2;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      spare4                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare3                                    :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare2                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare1                                    :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      ita_num_beat                              :  2;
     unsigned      spare0                                    :  4;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      spare0                                    :  4;
     unsigned      ita_num_beat                              :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      spare1                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare2                                    :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      spare3                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare4                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      spare5                                    :  2;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      spare6                                    :  1;
#endif
} ncp_nca_config_init_reg_55xx_t;

/*! @struct ncp_nca_cfg_ring_parity_reg_t
 *  @brief NCA CFG Master Parity and CNAL ECC Register
 *  @details This register defines CFG Ring Parity Type , CNAL I/F ECC and Enables
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_parity_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param singlebit_ecc_correct_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> CNAL I/F correct singlebit ECC enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param singlebit_ecc_detect_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CNAL I/F detect singlebit ECC enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param multibit_ecc_detect_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> CNAL I/F detect multibit ECC enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_par_err_rst_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> RESERVED: Do Not set this bit. cfg_ring_parity_err_reset_exec_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_type_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cfg_parity_type_ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_type_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cfg_parity_type_ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_type_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cfg_parity_type_ring0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_err_en_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cfg_parity_err_en_ring3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_err_en_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cfg_parity_err_en_ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_parity_err_en_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cfg_parity_err_en_ring0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_ring_parity_reg_t
 *
 * Implemented by: 
 *      cfg_ring_parity
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      singlebit_ecc_correct_en                  :  1;
     unsigned      singlebit_ecc_detect_en                   :  1;
     unsigned      multibit_ecc_detect_en                    :  1;
     unsigned      cfg_par_err_rst_en                        :  1;
     unsigned      cfg_parity_type_ring2                     :  1;
     unsigned      cfg_parity_type_ring1                     :  1;
     unsigned      cfg_parity_type_ring0                     :  1;
     unsigned      cfg_parity_err_en_ring2                   :  1;
     unsigned      cfg_parity_err_en_ring1                   :  1;
     unsigned      cfg_parity_err_en_ring0                   :  1;
#else    /* Little Endian */
     unsigned      cfg_parity_err_en_ring0                   :  1;
     unsigned      cfg_parity_err_en_ring1                   :  1;
     unsigned      cfg_parity_err_en_ring2                   :  1;
     unsigned      cfg_parity_type_ring0                     :  1;
     unsigned      cfg_parity_type_ring1                     :  1;
     unsigned      cfg_parity_type_ring2                     :  1;
     unsigned      cfg_par_err_rst_en                        :  1;
     unsigned      multibit_ecc_detect_en                    :  1;
     unsigned      singlebit_ecc_detect_en                   :  1;
     unsigned      singlebit_ecc_correct_en                  :  1;
     unsigned      reserved0                                 : 22;
#endif
} ncp_nca_cfg_ring_parity_reg_t;

/*! @struct ncp_nca_cnal_control_reg_t
 *  @brief NCA CFG Master's CNAL Control Register
 *  @details This register defines cnal_soft_reset bit
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cnal_control_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cnal_soft_reset: if set by sw, hw clears it when reset
 *        done
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cnal_control_reg_t
 *
 * Implemented by: 
 *      cnal_control
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      cnal_soft_reset                           :  1;
#else    /* Little Endian */
     unsigned      cnal_soft_reset                           :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_nca_cnal_control_reg_t;

/*! @struct ncp_nca_cfg_ring_dbg_stat0_reg_t
 *  @brief NCA CFG Master Debug Status Register0
 *  @details This register holds some internal signals for Debug purpose
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_dbg_stat0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmd_out </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CFG cmd_out </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param data_out </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> CFG data_out </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rcfg_wcdar </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> read into CDAR </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rcfg_wbuff </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> read into Data BUFF </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rd_data_cnt </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> read data count </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rd_data_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> read data done indication </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param data_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> data done indication </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param timed_out </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> ACK time out indication </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param timer_state </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> timer state machine's state </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param state </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> main state machine's state </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_ring_dbg_stat0_reg_t
 *
 * Implemented by: 
 *      cfg_ring_dbg_stat0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmd_out                                   :  3;
     unsigned      data_out                                  :  8;
     unsigned      rcfg_wcdar                                :  1;
     unsigned      rcfg_wbuff                                :  1;
     unsigned      rd_data_cnt                               :  9;
     unsigned      rd_data_done                              :  1;
     unsigned      data_done                                 :  1;
     unsigned      timed_out                                 :  1;
     unsigned      timer_state                               :  3;
     unsigned      state                                     :  4;
#else    /* Little Endian */
     unsigned      state                                     :  4;
     unsigned      timer_state                               :  3;
     unsigned      timed_out                                 :  1;
     unsigned      data_done                                 :  1;
     unsigned      rd_data_done                              :  1;
     unsigned      rd_data_cnt                               :  9;
     unsigned      rcfg_wbuff                                :  1;
     unsigned      rcfg_wcdar                                :  1;
     unsigned      data_out                                  :  8;
     unsigned      cmd_out                                   :  3;
#endif
} ncp_nca_cfg_ring_dbg_stat0_reg_t;

/*! @struct ncp_nca_cfg_ring_dbg_stat1_reg_t
 *  @brief NCA CFG Master Debug Status Register1
 *  @details This register holds some internal signals for Debug purpose
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_dbg_stat1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ring0_parity_in </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CFG0_par_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring1_parity_in </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CFG1_par_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring2_parity_in </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CFG2_par_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd_in </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> CFG_cmd_in </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param data_in </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CFG data_in </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_ring_dbg_stat1_reg_t
 *
 * Implemented by: 
 *      cfg_ring_dbg_stat1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ring0_parity_in                           :  1;
     unsigned      ring1_parity_in                           :  1;
     unsigned      ring2_parity_in                           :  1;
     unsigned      cmd_in                                    :  3;
     unsigned      data_in                                   : 26;
#else    /* Little Endian */
     unsigned      data_in                                   : 26;
     unsigned      cmd_in                                    :  3;
     unsigned      ring2_parity_in                           :  1;
     unsigned      ring1_parity_in                           :  1;
     unsigned      ring0_parity_in                           :  1;
#endif
} ncp_nca_cfg_ring_dbg_stat1_reg_t;

/*! @struct ncp_nca_int_param_grp_reg_t
 *  @brief Group INT PARAMS Register
 *  @details This register defines interrupt related parameters for a given group
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_param_grp_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param wtask </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> how many task arrivals needed to be waited before
 *        generating a task arrival interrupt
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param wtime </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> time in sysclk periods to be waited after the first
 *        task arrived before generating a task arrival interrupt
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_int_param_grp_reg_t
 *
 * Implemented by: 
 *      int_param_grp
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      wtask                                     :  4;
     unsigned      wtime                                     : 12;
#else    /* Little Endian */
     unsigned      wtime                                     : 12;
     unsigned      wtask                                     :  4;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_int_param_grp_reg_t;

/*! @struct ncp_nca_int_status_data_reg0_34xx_t
 *  @brief INT Status Data Register0
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg0_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param double_bit_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> rbp_ecc_double-bit_error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param single_bit_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> rbp_ecc_single-bit_error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param buffer_size </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> rbp_ecc_error_rbp_buffer_size </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> rbp_ecc_error_drop_entry_rbp_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_axi_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> tpcq_entry_axi_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_axi_err </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> tpcq_axi_read_er_tpcq_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_axi_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> rpcq_entry_axi_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_axi_err </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> rpcq_entry_axi_read_er_rbp_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_axi_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> otask_data_axi_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_axi_err </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask_data_axi_read_er_opcq_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_axi_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq_entry_axi_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_axi_err </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq_entry_axi_read_er_opcq_num </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg0_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      double_bit_error                          :  1;
     unsigned      single_bit_error                          :  1;
     unsigned      buffer_size                               :  2;
     unsigned      rbp_drop_num                              :  4;
     unsigned      tpcq_axi_resp                             :  2;
     unsigned      tpcq_axi_err                              :  4;
     unsigned      rpcq_axi_resp                             :  2;
     unsigned      rpcq_axi_err                              :  4;
     unsigned      otask_axi_resp                            :  2;
     unsigned      otask_axi_err                             :  4;
     unsigned      opcq_axi_resp                             :  2;
     unsigned      opcq_axi_err                              :  4;
#else    /* Little Endian */
     unsigned      opcq_axi_err                              :  4;
     unsigned      opcq_axi_resp                             :  2;
     unsigned      otask_axi_err                             :  4;
     unsigned      otask_axi_resp                            :  2;
     unsigned      rpcq_axi_err                              :  4;
     unsigned      rpcq_axi_resp                             :  2;
     unsigned      tpcq_axi_err                              :  4;
     unsigned      tpcq_axi_resp                             :  2;
     unsigned      rbp_drop_num                              :  4;
     unsigned      buffer_size                               :  2;
     unsigned      single_bit_error                          :  1;
     unsigned      double_bit_error                          :  1;
#endif
} ncp_nca_int_status_data_reg0_34xx_t;

/*! @struct ncp_nca_int_status_data_reg1_34xx_t
 *  @brief INT Status Data Register1
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg1_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_read_er_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> pgit_load_cpu_axi_read_er_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_read_er_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> pgit_load_cpu_axi_read_er_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_read_er_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> pgit_load_nca_axi_read_er_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_read_er_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> pgit_load_nca_axi_read_er_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_write_er_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> pgit_upload_nca_axi_write_er_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_write_er_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> pgit_upload_nca_axi_write_er_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> ipcq_entry_axi_write_er_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> ipcq_entry_axi_write_er_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> itask_data_axi_write_er_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> itask_data_axi_write_er_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cpcq_axi_read_err_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_err_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cpcq_axi_read_err_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_axi_write_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cmn_axi_write_err_resp </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg1_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      pgit_load_cpu_axi_read_er_resp            :  2;
     unsigned      pgit_load_cpu_axi_read_er_group_num       :  3;
     unsigned      pgit_load_nca_axi_read_er_resp            :  2;
     unsigned      pgit_load_nca_axi_read_er_group_num       :  3;
     unsigned      pgit_upload_nca_axi_write_er_resp         :  2;
     unsigned      pgit_upload_nca_axi_write_er_group_num    :  3;
     unsigned      ipcq_entry_axi_write_er_resp              :  2;
     unsigned      ipcq_entry_axi_write_er_group_num         :  3;
     unsigned      itask_data_axi_write_er_resp              :  2;
     unsigned      itask_data_axi_write_er_group_num         :  3;
     unsigned      cpcq_axi_read_err_resp                    :  2;
     unsigned      cpcq_axi_read_err_group_num               :  3;
     unsigned      cmn_axi_write_err_resp                    :  2;
#else    /* Little Endian */
     unsigned      cmn_axi_write_err_resp                    :  2;
     unsigned      cpcq_axi_read_err_group_num               :  3;
     unsigned      cpcq_axi_read_err_resp                    :  2;
     unsigned      itask_data_axi_write_er_group_num         :  3;
     unsigned      itask_data_axi_write_er_resp              :  2;
     unsigned      ipcq_entry_axi_write_er_group_num         :  3;
     unsigned      ipcq_entry_axi_write_er_resp              :  2;
     unsigned      pgit_upload_nca_axi_write_er_group_num    :  3;
     unsigned      pgit_upload_nca_axi_write_er_resp         :  2;
     unsigned      pgit_load_nca_axi_read_er_group_num       :  3;
     unsigned      pgit_load_nca_axi_read_er_resp            :  2;
     unsigned      pgit_load_cpu_axi_read_er_group_num       :  3;
     unsigned      pgit_load_cpu_axi_read_er_resp            :  2;
#endif
} ncp_nca_int_status_data_reg1_34xx_t;

/*! @struct ncp_nca_int_status_data_reg2_34xx_t
 *  @brief INT Status Data Register2
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg2_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_opcq_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> output task data overflow oPCQ number </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_opcq_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> output task data underflow oPCQ number </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> eng_cnal_if_int_grp_num. When eng_cnal_if_int_is_pio
 *        is clear, and at least one of the grp_interrupt_status_table.status_r1.eng_cnal_if_grp|0..5|_int
 *        bits is set, this field indicates for which group
 *        number the cnal_if_status register contains error
 *        data.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_is_pio </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> eng_cnal_if interrupt is pio mode. When this bit and
 *        the grp_interrupt_status_table.status_r2.eng_cnal_if_pio_int
 *        bit are both set, the cnal_if_status register contains
 *        error data for that interrupt.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cfg_ring_err_int_grp_num. When cfg_ring_err_int_is_pio
 *        is clear, and at least one of the grp_interrupt_status_table.status_r1.cfg_ring_err_grp|0..5|_int
 *        bits is set, this field indicates for which group
 *        number the cfg_ring_error_stat_r|0..1| registers contain
 *        error data.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_is_pio </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cfg_ring_err interrupt is for pio mode. When this
 *        bit and the grp_interrupt_status_table.status_r2.cfg_ring_err_pio_int
 *        bit are both set, the cfg_ring_error_stat_r|0..1|
 *        registers contain error data for that interrupt.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> otsd_axi_resp </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_err </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> otsd_axi_read_er_opcq_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_err_int_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> itask_drop_no_rbuf_err_int_grp_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_err_int_grp_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> itask_drop_ipcq_err_int_grp_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_entry_receive_buffer_pool_id </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> rbp_drop_entry_receive_buffer_pool_ID </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg2_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_data_overflow_opcq_num              :  4;
     unsigned      otask_data_underflow_opcq_num             :  4;
     unsigned      eng_cnal_if_int_grp_num                   :  3;
     unsigned      eng_cnal_if_int_is_pio                    :  1;
     unsigned      cfg_ring_err_int_grp_num                  :  3;
     unsigned      cfg_ring_err_int_is_pio                   :  1;
     unsigned      otsd_axi_resp                             :  2;
     unsigned      otsd_axi_err                              :  4;
     unsigned      itask_drop_no_rbuf_err_int_grp_num        :  3;
     unsigned      itask_drop_ipcq_err_int_grp_num           :  3;
     unsigned      rbp_drop_entry_receive_buffer_pool_id     :  4;
#else    /* Little Endian */
     unsigned      rbp_drop_entry_receive_buffer_pool_id     :  4;
     unsigned      itask_drop_ipcq_err_int_grp_num           :  3;
     unsigned      itask_drop_no_rbuf_err_int_grp_num        :  3;
     unsigned      otsd_axi_err                              :  4;
     unsigned      otsd_axi_resp                             :  2;
     unsigned      cfg_ring_err_int_is_pio                   :  1;
     unsigned      cfg_ring_err_int_grp_num                  :  3;
     unsigned      eng_cnal_if_int_is_pio                    :  1;
     unsigned      eng_cnal_if_int_grp_num                   :  3;
     unsigned      otask_data_underflow_opcq_num             :  4;
     unsigned      otask_data_overflow_opcq_num              :  4;
#endif
} ncp_nca_int_status_data_reg2_34xx_t;

/*! @struct ncp_nca_int_status_data_reg3_34xx_t
 *  @brief INT Status Data Register3
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg3_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_buffer_id </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> rbp_drop_entry_buffer_id </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg3_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r3
 */
 
typedef struct
{
     unsigned  int        rbp_drop_buffer_id;
} ncp_nca_int_status_data_reg3_34xx_t;

/*! @struct ncp_nca_int_status_data_reg4_34xx_t
 *  @brief INT Status Data Register4
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg4_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ita_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> ita_idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> rbp_idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> tfc_idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ota_idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cpcq_idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_pgit_rfifo_stat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cpcq_rfifo_overflow_underflow_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_pgit_wfifo_stat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cpcq_wfifo_overflow_underflow_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> pgit_reng_req_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> pgit_reng_req_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> pgit_weng_wdb_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_weng_wdb_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> pgit_weng_req_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_stat0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_weng_req_fifo_underflow_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg4_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r4
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ita_idle                                  :  1;
     unsigned      rbp_idle                                  :  1;
     unsigned      tfc_idle                                  :  1;
     unsigned      ota_idle                                  :  1;
     unsigned      cpcq_idle                                 :  1;
     unsigned      reserved0                                 :  1;
     unsigned      cpcq_pgit_rfifo_stat                      :  2;
     unsigned      cpcq_pgit_wfifo_stat                      :  2;
     unsigned      pgit_fifo_stat13                          :  2;
     unsigned      pgit_fifo_stat12                          :  2;
     unsigned      pgit_fifo_stat11                          :  2;
     unsigned      pgit_fifo_stat10                          :  2;
     unsigned      pgit_fifo_stat9                           :  2;
     unsigned      pgit_fifo_stat8                           :  2;
     unsigned      pgit_fifo_stat7                           :  2;
     unsigned      pgit_fifo_stat6                           :  2;
     unsigned      pgit_fifo_stat5                           :  1;
     unsigned      pgit_fifo_stat4                           :  1;
     unsigned      pgit_fifo_stat3                           :  1;
     unsigned      pgit_fifo_stat2                           :  1;
     unsigned      pgit_fifo_stat1                           :  1;
     unsigned      pgit_fifo_stat0                           :  1;
#else    /* Little Endian */
     unsigned      pgit_fifo_stat0                           :  1;
     unsigned      pgit_fifo_stat1                           :  1;
     unsigned      pgit_fifo_stat2                           :  1;
     unsigned      pgit_fifo_stat3                           :  1;
     unsigned      pgit_fifo_stat4                           :  1;
     unsigned      pgit_fifo_stat5                           :  1;
     unsigned      pgit_fifo_stat6                           :  2;
     unsigned      pgit_fifo_stat7                           :  2;
     unsigned      pgit_fifo_stat8                           :  2;
     unsigned      pgit_fifo_stat9                           :  2;
     unsigned      pgit_fifo_stat10                          :  2;
     unsigned      pgit_fifo_stat11                          :  2;
     unsigned      pgit_fifo_stat12                          :  2;
     unsigned      pgit_fifo_stat13                          :  2;
     unsigned      cpcq_pgit_wfifo_stat                      :  2;
     unsigned      cpcq_pgit_rfifo_stat                      :  2;
     unsigned      reserved0                                 :  1;
     unsigned      cpcq_idle                                 :  1;
     unsigned      ota_idle                                  :  1;
     unsigned      tfc_idle                                  :  1;
     unsigned      rbp_idle                                  :  1;
     unsigned      ita_idle                                  :  1;
#endif
} ncp_nca_int_status_data_reg4_34xx_t;

/*! @struct ncp_nca_int_status_data_reg5_34xx_t
 *  @brief INT Status Data Register5
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg5_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_overflow_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> odb_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_underflow_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> odb_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_overflow_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> idb_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_underflow_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> idb_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_stat3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cmn_weng_req_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_stat2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cmn_weng_req_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_stat1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cmn_weng_wdb_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_stat0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cmn_weng_wdb_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> tcri_data_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tcri_data_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask_header_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask_header_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask_qid_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> itask_qid_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> itask_delete_tid_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> itask_delete_tid_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> ipcq_pgitr_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> ipcq_pgitr_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> ipcq_pgitw_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> ipcq_pgitw_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> itask_weng_req_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> itask_weng_req_fifo_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> itask_weng_wdb_fifo_overflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_stat0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> itask_weng_wdb_fifo_underflow_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg5_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r5
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      odb_fifo_overflow_status                  :  1;
     unsigned      odb_fifo_underflow_status                 :  1;
     unsigned      idb_fifo_overflow_status                  :  1;
     unsigned      idb_fifo_underflow_status                 :  1;
     unsigned      cmn_fifo_stat3                            :  1;
     unsigned      cmn_fifo_stat2                            :  1;
     unsigned      cmn_fifo_stat1                            :  1;
     unsigned      cmn_fifo_stat0                            :  1;
     unsigned      ita_fifo_stat15                           :  1;
     unsigned      ita_fifo_stat14                           :  1;
     unsigned      ita_fifo_stat13                           :  1;
     unsigned      ita_fifo_stat12                           :  1;
     unsigned      ita_fifo_stat11                           :  1;
     unsigned      ita_fifo_stat10                           :  1;
     unsigned      ita_fifo_stat9                            :  1;
     unsigned      ita_fifo_stat8                            :  1;
     unsigned      ita_fifo_stat7                            :  1;
     unsigned      ita_fifo_stat6                            :  1;
     unsigned      ita_fifo_stat5                            :  1;
     unsigned      ita_fifo_stat4                            :  1;
     unsigned      ita_fifo_stat3                            :  1;
     unsigned      ita_fifo_stat2                            :  1;
     unsigned      ita_fifo_stat1                            :  1;
     unsigned      ita_fifo_stat0                            :  1;
#else    /* Little Endian */
     unsigned      ita_fifo_stat0                            :  1;
     unsigned      ita_fifo_stat1                            :  1;
     unsigned      ita_fifo_stat2                            :  1;
     unsigned      ita_fifo_stat3                            :  1;
     unsigned      ita_fifo_stat4                            :  1;
     unsigned      ita_fifo_stat5                            :  1;
     unsigned      ita_fifo_stat6                            :  1;
     unsigned      ita_fifo_stat7                            :  1;
     unsigned      ita_fifo_stat8                            :  1;
     unsigned      ita_fifo_stat9                            :  1;
     unsigned      ita_fifo_stat10                           :  1;
     unsigned      ita_fifo_stat11                           :  1;
     unsigned      ita_fifo_stat12                           :  1;
     unsigned      ita_fifo_stat13                           :  1;
     unsigned      ita_fifo_stat14                           :  1;
     unsigned      ita_fifo_stat15                           :  1;
     unsigned      cmn_fifo_stat0                            :  1;
     unsigned      cmn_fifo_stat1                            :  1;
     unsigned      cmn_fifo_stat2                            :  1;
     unsigned      cmn_fifo_stat3                            :  1;
     unsigned      idb_fifo_underflow_status                 :  1;
     unsigned      idb_fifo_overflow_status                  :  1;
     unsigned      odb_fifo_underflow_status                 :  1;
     unsigned      odb_fifo_overflow_status                  :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_int_status_data_reg5_34xx_t;

/*! @struct ncp_nca_int_status_data_reg6_34xx_t
 *  @brief INT Status Data Register6
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg6_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rpcq_pgitr_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> rpcq_pgitw_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> rbp_reng_req_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_stat0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg6_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r6
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 10;
     unsigned      rbp_fifo_stat10                           :  2;
     unsigned      rbp_fifo_stat9                            :  2;
     unsigned      rbp_fifo_stat8                            :  2;
     unsigned      rbp_fifo_stat7                            :  2;
     unsigned      rbp_fifo_stat6                            :  2;
     unsigned      rbp_fifo_stat5                            :  2;
     unsigned      rbp_fifo_stat4                            :  2;
     unsigned      rbp_fifo_stat3                            :  2;
     unsigned      rbp_fifo_stat2                            :  2;
     unsigned      rbp_fifo_stat1                            :  2;
     unsigned      rbp_fifo_stat0                            :  2;
#else    /* Little Endian */
     unsigned      rbp_fifo_stat0                            :  2;
     unsigned      rbp_fifo_stat1                            :  2;
     unsigned      rbp_fifo_stat2                            :  2;
     unsigned      rbp_fifo_stat3                            :  2;
     unsigned      rbp_fifo_stat4                            :  2;
     unsigned      rbp_fifo_stat5                            :  2;
     unsigned      rbp_fifo_stat6                            :  2;
     unsigned      rbp_fifo_stat7                            :  2;
     unsigned      rbp_fifo_stat8                            :  2;
     unsigned      rbp_fifo_stat9                            :  2;
     unsigned      rbp_fifo_stat10                           :  2;
     unsigned      reserved0                                 : 10;
#endif
} ncp_nca_int_status_data_reg6_34xx_t;

/*! @struct ncp_nca_int_status_data_reg7_34xx_t
 *  @brief INT Status Data Register7
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg7_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_15 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_14 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_13 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_12 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg0_0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg7_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r7
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      ota_fifo_stat_reg0_15                     :  2;
     unsigned      ota_fifo_stat_reg0_14                     :  2;
     unsigned      ota_fifo_stat_reg0_13                     :  2;
     unsigned      ota_fifo_stat_reg0_12                     :  2;
     unsigned      ota_fifo_stat_reg0_11                     :  2;
     unsigned      ota_fifo_stat_reg0_10                     :  2;
     unsigned      ota_fifo_stat_reg0_9                      :  2;
     unsigned      ota_fifo_stat_reg0_8                      :  2;
     unsigned      ota_fifo_stat_reg0_7                      :  2;
     unsigned      ota_fifo_stat_reg0_6                      :  2;
     unsigned      ota_fifo_stat_reg0_5                      :  2;
     unsigned      ota_fifo_stat_reg0_4                      :  2;
     unsigned      ota_fifo_stat_reg0_3                      :  2;
     unsigned      ota_fifo_stat_reg0_2                      :  2;
     unsigned      ota_fifo_stat_reg0_1                      :  2;
     unsigned      ota_fifo_stat_reg0_0                      :  2;
#else    /* Little Endian */
     unsigned      ota_fifo_stat_reg0_0                      :  2;
     unsigned      ota_fifo_stat_reg0_1                      :  2;
     unsigned      ota_fifo_stat_reg0_2                      :  2;
     unsigned      ota_fifo_stat_reg0_3                      :  2;
     unsigned      ota_fifo_stat_reg0_4                      :  2;
     unsigned      ota_fifo_stat_reg0_5                      :  2;
     unsigned      ota_fifo_stat_reg0_6                      :  2;
     unsigned      ota_fifo_stat_reg0_7                      :  2;
     unsigned      ota_fifo_stat_reg0_8                      :  2;
     unsigned      ota_fifo_stat_reg0_9                      :  2;
     unsigned      ota_fifo_stat_reg0_10                     :  2;
     unsigned      ota_fifo_stat_reg0_11                     :  2;
     unsigned      ota_fifo_stat_reg0_12                     :  2;
     unsigned      ota_fifo_stat_reg0_13                     :  2;
     unsigned      ota_fifo_stat_reg0_14                     :  2;
     unsigned      ota_fifo_stat_reg0_15                     :  2;
#endif
} ncp_nca_int_status_data_reg7_34xx_t;

/*! @struct ncp_nca_int_status_data_reg8_34xx_t
 *  @brief INT Status Data Register8
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg8_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg1_0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_fifo_stat_reg0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> otsd_reng_req_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_entry_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_index_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> opcq_index_update_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> opcq_pgitr_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq_pgitw_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otask_reng_req_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_stat_reg1_0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq_reng_req_fifo_overflow_underflow_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg8_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r8
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otsd_fifo_stat_reg1_7                     :  2;
     unsigned      otsd_fifo_stat_reg1_6                     :  2;
     unsigned      otsd_fifo_stat_reg1_5                     :  2;
     unsigned      otsd_fifo_stat_reg1_4                     :  2;
     unsigned      otsd_fifo_stat_reg1_3                     :  2;
     unsigned      otsd_fifo_stat_reg1_2                     :  2;
     unsigned      otsd_fifo_stat_reg1_1                     :  2;
     unsigned      otsd_fifo_stat_reg1_0                     :  2;
     unsigned      otsd_fifo_stat_reg0                       :  2;
     unsigned      ota_fifo_stat_reg1_6                      :  2;
     unsigned      ota_fifo_stat_reg1_5                      :  2;
     unsigned      ota_fifo_stat_reg1_4                      :  2;
     unsigned      ota_fifo_stat_reg1_3                      :  2;
     unsigned      ota_fifo_stat_reg1_2                      :  2;
     unsigned      ota_fifo_stat_reg1_1                      :  2;
     unsigned      ota_fifo_stat_reg1_0                      :  2;
#else    /* Little Endian */
     unsigned      ota_fifo_stat_reg1_0                      :  2;
     unsigned      ota_fifo_stat_reg1_1                      :  2;
     unsigned      ota_fifo_stat_reg1_2                      :  2;
     unsigned      ota_fifo_stat_reg1_3                      :  2;
     unsigned      ota_fifo_stat_reg1_4                      :  2;
     unsigned      ota_fifo_stat_reg1_5                      :  2;
     unsigned      ota_fifo_stat_reg1_6                      :  2;
     unsigned      otsd_fifo_stat_reg0                       :  2;
     unsigned      otsd_fifo_stat_reg1_0                     :  2;
     unsigned      otsd_fifo_stat_reg1_1                     :  2;
     unsigned      otsd_fifo_stat_reg1_2                     :  2;
     unsigned      otsd_fifo_stat_reg1_3                     :  2;
     unsigned      otsd_fifo_stat_reg1_4                     :  2;
     unsigned      otsd_fifo_stat_reg1_5                     :  2;
     unsigned      otsd_fifo_stat_reg1_6                     :  2;
     unsigned      otsd_fifo_stat_reg1_7                     :  2;
#endif
} ncp_nca_int_status_data_reg8_34xx_t;

/*! @struct ncp_nca_int_status_data_reg9_34xx_t
 *  @brief INT Status Data Register9
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg9_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> tpcq_pgitr_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> tpcq_pgitw_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> tfc_reng_req_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_stat0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg9_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r9
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 10;
     unsigned      tfc_fifo_stat10                           :  2;
     unsigned      tfc_fifo_stat9                            :  2;
     unsigned      tfc_fifo_stat8                            :  2;
     unsigned      tfc_fifo_stat7                            :  2;
     unsigned      tfc_fifo_stat6                            :  2;
     unsigned      tfc_fifo_stat5                            :  2;
     unsigned      tfc_fifo_stat4                            :  2;
     unsigned      tfc_fifo_stat3                            :  2;
     unsigned      tfc_fifo_stat2                            :  2;
     unsigned      tfc_fifo_stat1                            :  2;
     unsigned      tfc_fifo_stat0                            :  2;
#else    /* Little Endian */
     unsigned      tfc_fifo_stat0                            :  2;
     unsigned      tfc_fifo_stat1                            :  2;
     unsigned      tfc_fifo_stat2                            :  2;
     unsigned      tfc_fifo_stat3                            :  2;
     unsigned      tfc_fifo_stat4                            :  2;
     unsigned      tfc_fifo_stat5                            :  2;
     unsigned      tfc_fifo_stat6                            :  2;
     unsigned      tfc_fifo_stat7                            :  2;
     unsigned      tfc_fifo_stat8                            :  2;
     unsigned      tfc_fifo_stat9                            :  2;
     unsigned      tfc_fifo_stat10                           :  2;
     unsigned      reserved0                                 : 10;
#endif
} ncp_nca_int_status_data_reg9_34xx_t;

/*! @struct ncp_nca_int_status_data_reg10_34xx_t
 *  @brief INT Status Data Register10
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg10_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration manager read engine AXI read error response </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg10_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r10
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      cmn_reng_err_resp                         :  2;
#else    /* Little Endian */
     unsigned      cmn_reng_err_resp                         :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_nca_int_status_data_reg10_34xx_t;

/*! @struct ncp_nca_int_status_data_reg11_34xx_t
 *  @brief INT Status Data Register11
 *  @details defines interrupt causing and/or related data
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_int_status_data_reg11_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_cfg_req_fifo_ovf_unf_stat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cmn_cfg_req_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_req_fifo_parity_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cmn_reng_req_fifo_parity_error_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_rbf_fifo_parity_err_stat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cmn_reng_rbf_fifo_parity_error_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_req_fifo_ovf_unf_stat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cmn_reng_req_fifo_overflow_underflow_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_rbf_fifo_ovf_unf_stat1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cmn_reng_rbf_fifo_overflow_underflow_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_rbf_fifo_ovf_unf_stat0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cmn_reng_rbf_fifo_overflow_underflow_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_int_status_data_reg11_34xx_t
 *
 * Implemented by: 
 *      int_status_data_r11
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      cmn_cfg_req_fifo_ovf_unf_stat             :  2;
     unsigned      cmn_req_fifo_parity_err_stat              :  1;
     unsigned      reserved1                                 :  6;
     unsigned      cmn_rbf_fifo_parity_err_stat              :  2;
     unsigned      cmn_req_fifo_ovf_unf_stat                 :  2;
     unsigned      reserved2                                 : 12;
     unsigned      cmn_rbf_fifo_ovf_unf_stat1                :  2;
     unsigned      cmn_rbf_fifo_ovf_unf_stat0                :  2;
#else    /* Little Endian */
     unsigned      cmn_rbf_fifo_ovf_unf_stat0                :  2;
     unsigned      cmn_rbf_fifo_ovf_unf_stat1                :  2;
     unsigned      reserved2                                 : 12;
     unsigned      cmn_req_fifo_ovf_unf_stat                 :  2;
     unsigned      cmn_rbf_fifo_parity_err_stat              :  2;
     unsigned      reserved1                                 :  6;
     unsigned      cmn_req_fifo_parity_err_stat              :  1;
     unsigned      cmn_cfg_req_fifo_ovf_unf_stat             :  2;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_int_status_data_reg11_34xx_t;

/*! @struct ncp_nca_par_error_status0_reg_34xx_t
 *  @brief Parity Error Status Register 0
 *  @details defines Parity Error causing status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_par_error_status0_reg_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cmn_weng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_wdb_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cmn_weng_wdb_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_weng_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> ita_weng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_weng_wdb_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ita_weng_wdb_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> otsd_reng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_rbf_par_err_stat </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> opcq_entry_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> otask_reng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> opcq_reng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_rbf_par_err_stat </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_rbf_par_err_stat </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_par_err_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_par_error_status0_reg_34xx_t
 *
 * Implemented by: 
 *      par_error_status0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmn_weng_req_par_err_stat                 :  1;
     unsigned      cmn_weng_wdb_par_err_stat                 :  1;
     unsigned      ita_weng_req_par_err_stat                 :  1;
     unsigned      ita_weng_wdb_par_err_stat                 :  1;
     unsigned      otsd_req_par_err_stat                     :  1;
     unsigned      otsd_rbf_par_err_stat                     :  8;
     unsigned      opcq_entry_par_err_stat                   :  1;
     unsigned      otask_req_par_err_stat                    :  1;
     unsigned      opcq_req_par_err_stat                     :  1;
     unsigned      otask_rbf_par_err_stat                    :  8;
     unsigned      opcq_rbf_par_err_stat                     :  8;
#else    /* Little Endian */
     unsigned      opcq_rbf_par_err_stat                     :  8;
     unsigned      otask_rbf_par_err_stat                    :  8;
     unsigned      opcq_req_par_err_stat                     :  1;
     unsigned      otask_req_par_err_stat                    :  1;
     unsigned      opcq_entry_par_err_stat                   :  1;
     unsigned      otsd_rbf_par_err_stat                     :  8;
     unsigned      otsd_req_par_err_stat                     :  1;
     unsigned      ita_weng_wdb_par_err_stat                 :  1;
     unsigned      ita_weng_req_par_err_stat                 :  1;
     unsigned      cmn_weng_wdb_par_err_stat                 :  1;
     unsigned      cmn_weng_req_par_err_stat                 :  1;
#endif
} ncp_nca_par_error_status0_reg_34xx_t;

/*! @struct ncp_nca_par_error_status1_reg_34xx_t
 *  @brief Parity Error Status Register 1
 *  @details defines Parity Error causing status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_par_error_status1_reg_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> pgit_weng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_wdb_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> pgit_weng_wdb_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> pgit_reng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_par_err_stat </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> tfc_reng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_rbf_par_err_stat </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_req_par_err_stat </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> rbp_reng_req_fifo_par_err_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_rbf_par_err_stat </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_par_err_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_par_error_status1_reg_34xx_t
 *
 * Implemented by: 
 *      par_error_status1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      pgit_weng_req_par_err_stat                :  1;
     unsigned      pgit_weng_wdb_par_err_stat                :  1;
     unsigned      pgit_reng_req_par_err_stat                :  1;
     unsigned      pgit_reng_rbf_par_err_stat                :  8;
     unsigned      tfc_req_par_err_stat                      :  1;
     unsigned      tfc_rbf_par_err_stat                      :  8;
     unsigned      rbp_req_par_err_stat                      :  1;
     unsigned      rbp_rbf_par_err_stat                      :  8;
#else    /* Little Endian */
     unsigned      rbp_rbf_par_err_stat                      :  8;
     unsigned      rbp_req_par_err_stat                      :  1;
     unsigned      tfc_rbf_par_err_stat                      :  8;
     unsigned      tfc_req_par_err_stat                      :  1;
     unsigned      pgit_reng_rbf_par_err_stat                :  8;
     unsigned      pgit_reng_req_par_err_stat                :  1;
     unsigned      pgit_weng_wdb_par_err_stat                :  1;
     unsigned      pgit_weng_req_par_err_stat                :  1;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_par_error_status1_reg_34xx_t;

/*! @struct ncp_nca_ipcq_almost_full_value_reg_t
 *  @brief iPCQ input task Almost-Full value register
 *  @details (max num of queue entries - curr num of queue entries) is defined by this reg
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ipcq_almost_full_value_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_almost_full_value </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_almost_full_value </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_ipcq_almost_full_value_reg_t
 *
 * Implemented by: 
 *      ipcq_almost_full_value
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      ipcq_almost_full_value                    : 16;
#else    /* Little Endian */
     unsigned      ipcq_almost_full_value                    : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_ipcq_almost_full_value_reg_t;

/*! @struct ncp_nca_cfg_ring_ack_timer_cnt_reg_t
 *  @brief CFG RING ACK Timer Register
 *  @details if enabled, this counter defines a Time-Out value for ACK responses
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_ack_timer_cnt_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_timeout </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cfg_ring_ack_timer_timeout_value </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_ring_ack_timer_cnt_reg_t
 *
 * Implemented by: 
 *      cfg_ring_ack_timer_cnt
 */
 
typedef struct
{
     unsigned  int      cfg_ring_ack_timer_timeout;
} ncp_nca_cfg_ring_ack_timer_cnt_reg_t;

/*! @struct ncp_nca_pcq_kickstart_reg_t
 *  @brief PCQ Kickstart Register
 *  @details NOT SUPPORTED FOR MISSION-MODE OPERATION.  This register is used by the CPU to directly write the CPU index in the NCA's PCQ logic for an oPCQ, tPCQ, rPCQ, or cPCQ.  Caution: a race condition could occur with a normal PGIT load.  A kicktart could be followed by a PGIT load with stale data.  The Kickstart Interface should be used for testing purposes only.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_kickstart_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param kickstart_index_num </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> kickstart_index_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param kickstart_pcq_sel </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> kickstart_pcq_sel:00:oPCQ,01:tPCQ,10:rPCQ,11:cPCQ </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param kickstart_group_num </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> kickstart_group_num </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param kickstart_index </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> kickstart_index </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx --> ncp_nca_pcq_kickstart_reg_t
 *
 * Implemented by: 
 *      pcq_kickstart
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      kickstart_index_num                       :  8;
     unsigned      kickstart_pcq_sel                         :  2;
     unsigned      kickstart_group_num                       :  3;
     unsigned      kickstart_index                           : 16;
#else    /* Little Endian */
     unsigned      kickstart_index                           : 16;
     unsigned      kickstart_group_num                       :  3;
     unsigned      kickstart_pcq_sel                         :  2;
     unsigned      kickstart_index_num                       :  8;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_pcq_kickstart_reg_t;

/*! @struct ncp_nca_pcq_kickstart_reg_25xx_t
 *  @brief PCQ Kickstart Register
 *  @details There is no longer a kickstart function.  This register is now a 32-bit scratch register that serves no other function.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_kickstart_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param scratch_field </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Scratch field that can be used to store any 32-bit
 *        value.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_pcq_kickstart_reg_25xx_t
 *
 * Implemented by: 
 *      pcq_kickstart
 */
 
typedef struct
{
     unsigned  int             scratch_field;
} ncp_nca_pcq_kickstart_reg_25xx_t;

/*! @struct ncp_nca_pgit_load_grp_indexes_reg_34xx_t
 *  @brief PGIT Load NCA and CPU Indexes Register
 *  @details CPU can write to this register to force the PGIT to load the group indexes
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pgit_load_grp_indexes_reg_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param load_nca_index_grp </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> load_nca_indexes </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param load_cpu_index_grp </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> load_cpu_indexes </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_pgit_load_grp_indexes_reg_34xx_t
 *
 * Implemented by: 
 *      pgit_load_grp_indexes
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 10;
     unsigned      load_nca_index_grp                        :  6;
     unsigned      reserved1                                 : 10;
     unsigned      load_cpu_index_grp                        :  6;
#else    /* Little Endian */
     unsigned      load_cpu_index_grp                        :  6;
     unsigned      reserved1                                 : 10;
     unsigned      load_nca_index_grp                        :  6;
     unsigned      reserved0                                 : 10;
#endif
} ncp_nca_pgit_load_grp_indexes_reg_34xx_t;

/*! @struct ncp_nca_pgit_grp_load_timer_reg_t
 *  @brief PGIT Group Load Timer Value to Load CPU Indexes
 *  @details This value is used to set the delay for the timer for the PGIT to load CPU Indexes when a hardware or software poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pgit_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_cpu_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the cpu timer to expire </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_pgit_grp_load_timer_reg_t
 *
 * Implemented by: 
 *      pgit_grp_load_timer
 */
 
typedef struct
{
     unsigned  int        set_timer_cpu_load;
} ncp_nca_pgit_grp_load_timer_reg_t;

/*! @struct ncp_nca_delay_grp_load_timer_reg_t
 *  @brief PGIT Poke Shorten Delay Value to Load CPU Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT to load CPU Indexes when a hardware poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_delay_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the nca timer to expire </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_delay_grp_load_timer_reg_t
 *
 * Implemented by: 
 *      delay_grp_load_timer
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_load;
} ncp_nca_delay_grp_load_timer_reg_t;

/*! @struct ncp_nca_swpoke_delay_grp_load_timer_reg_t
 *  @brief PGIT Software Poke Shorten Delay Value to Load CPU Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT to load CPU Indexes when a software poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_swpoke_delay_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the nca timer to expire </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_swpoke_delay_grp_load_timer_reg_t
 *
 * Implemented by: 
 *      swpoke_delay_grp_load_timer
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_load;
} ncp_nca_swpoke_delay_grp_load_timer_reg_t;

/*! @struct ncp_nca_ipcq_etne_delay_grp_load_timer_reg_t
 *  @brief PGIT iPCQ Empty to not Empty Poke Shorten Delay Value to Load CPU Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT to upload NCA Indexes when a poke occurs because an iPCQ in a group went from empty to not empty.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ipcq_etne_delay_grp_load_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_load </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the nca timer to expire </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_ipcq_etne_delay_grp_load_timer_reg_t
 *
 * Implemented by: 
 *      ipcq_etne_delay_grp_load_timer
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_load;
} ncp_nca_ipcq_etne_delay_grp_load_timer_reg_t;

/*! @struct ncp_nca_pgit_grp_upload_timer_reg_t
 *  @brief PGIT Group UpLoad Timer Value to Upload NCA Indexes
 *  @details This value is used to set the delay for the timer for the PGIT to upload NCA Indexes when a hardware poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pgit_grp_upload_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_nca_upload </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the nca timer to expire </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_pgit_grp_upload_timer_reg_t
 *
 * Implemented by: 
 *      pgit_grp_upload_timer
 */
 
typedef struct
{
     unsigned  int      set_timer_nca_upload;
} ncp_nca_pgit_grp_upload_timer_reg_t;

/*! @struct ncp_nca_delay_grp_upload_timer_reg_t
 *  @brief PGIT Poke Shorten Delay Value to Upload NCA Indexes
 *  @details This value is used to shorten the delay for the timer for the PGIT to upload NCA Indexes when a hardware poke occurs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_delay_grp_upload_timer_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param set_timer_delay_upload </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of sysclk cycles for the nca timer to expire </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_delay_grp_upload_timer_reg_t
 *
 * Implemented by: 
 *      delay_grp_upload_timer
 */
 
typedef struct
{
     unsigned  int      set_timer_delay_upload;
} ncp_nca_delay_grp_upload_timer_reg_t;

/*! @struct ncp_nca_itask_arrival_poke_grp_cnt_compare_reg_t
 *  @brief Input Task Arrival Poke Group Count Compare Register
 *  @details This register defines a count value for input tasks received for a given group that will trigger a poke to the PGIT upload and load timers.  The poke is disabled when the count is set to zero.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_itask_arrival_poke_grp_cnt_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_cmp_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This field is compared to an internal counter that
 *        tracks the number of itasks received to  determine
 *        when to do a poke of the PGIT load  and upload timers.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_itask_arrival_poke_grp_cnt_compare_reg_t
 *
 * Implemented by: 
 *      itask_arrival_poke_grp_cnt_cmpr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      cnt_cmp_value                             :  8;
#else    /* Little Endian */
     unsigned      cnt_cmp_value                             :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_nca_itask_arrival_poke_grp_cnt_compare_reg_t;

/*! @struct ncp_nca_otask_and_cpcq_entry_grp_cnt_compare_reg_t
 *  @brief Output Task and cPCQ Entry Group Count Compare Register
 *  @details This register defines a count value for output tasks and cPCQ entries processed for a given group that will trigger a poke to the PGIT upload and load timers.  The poke is disabled when the count is set to zero.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otask_and_cpcq_entry_grp_cnt_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_cmp_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This field is compared to an internal counter that
 *        tracks the number of otasks and cPCQ entries  processed
 *        to determine when to do a poke of the  PGIT load
 *        and upload timers.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_otask_and_cpcq_entry_grp_cnt_compare_reg_t
 *
 * Implemented by: 
 *      otask_and_cpcq_entry_grp_cnt_cmpr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      cnt_cmp_value                             :  8;
#else    /* Little Endian */
     unsigned      cnt_cmp_value                             :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_nca_otask_and_cpcq_entry_grp_cnt_compare_reg_t;

/*! @struct ncp_nca_hw_poke_and_timer_enable_reg_t
 *  @brief Software Enable switches for Pointer Write and Read Pokes
 *  @details CPU can enable Pointer Load/Upload/Delay events
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_and_timer_enable_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_load_poke_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> hardware_load_poke_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_upload_poke_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> hardware_upload_poke_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> grp5_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> grp4_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> grp3_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> grp2_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> grp1_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> grp0_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> grp5_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> grp4_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> grp3_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> grp2_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> grp1_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> grp0_upload_timer_en </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_hw_poke_and_timer_enable_reg_t
 *
 * Implemented by: 
 *      hw_poke_and_timer_enable
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  2;
     unsigned      hardware_load_poke_en                     :  6;
     unsigned      reserved1                                 :  2;
     unsigned      hardware_upload_poke_en                   :  6;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      tpcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      grp5_load_timer_en                        :  1;
     unsigned      grp4_load_timer_en                        :  1;
     unsigned      grp3_load_timer_en                        :  1;
     unsigned      grp2_load_timer_en                        :  1;
     unsigned      grp1_load_timer_en                        :  1;
     unsigned      grp0_load_timer_en                        :  1;
     unsigned      grp5_upload_timer_en                      :  1;
     unsigned      grp4_upload_timer_en                      :  1;
     unsigned      grp3_upload_timer_en                      :  1;
     unsigned      grp2_upload_timer_en                      :  1;
     unsigned      grp1_upload_timer_en                      :  1;
     unsigned      grp0_upload_timer_en                      :  1;
#else    /* Little Endian */
     unsigned      grp0_upload_timer_en                      :  1;
     unsigned      grp1_upload_timer_en                      :  1;
     unsigned      grp2_upload_timer_en                      :  1;
     unsigned      grp3_upload_timer_en                      :  1;
     unsigned      grp4_upload_timer_en                      :  1;
     unsigned      grp5_upload_timer_en                      :  1;
     unsigned      grp0_load_timer_en                        :  1;
     unsigned      grp1_load_timer_en                        :  1;
     unsigned      grp2_load_timer_en                        :  1;
     unsigned      grp3_load_timer_en                        :  1;
     unsigned      grp4_load_timer_en                        :  1;
     unsigned      grp5_load_timer_en                        :  1;
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      tpcq_poke_enable                          :  1;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      hardware_upload_poke_en                   :  6;
     unsigned      reserved1                                 :  2;
     unsigned      hardware_load_poke_en                     :  6;
     unsigned      reserved0                                 :  2;
#endif
} ncp_nca_hw_poke_and_timer_enable_reg_t;

/*! @struct ncp_nca_hw_poke_and_timer_enable_reg_55xx_t
 *  @brief Hardware Poke and Timer Enable
 *  @details Enables timers and timer pokes for the iPCQ, oPCQ, and cPCQ
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_and_timer_enable_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_hw_poke_and_timer_enable_reg_55xx_t
 *
 * Implemented by: 
 *      hw_poke_and_timer_enable
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
#else    /* Little Endian */
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      reserved0                                 : 29;
#endif
} ncp_nca_hw_poke_and_timer_enable_reg_55xx_t;

/*! @struct ncp_nca_hw_poke_flags_reg_t
 *  @brief HW POINTER POKE FLAGS
 *  @details Flags for HW Pointer Upload Poke events.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_flags_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp5_upload_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> hardware_grp5_upload_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp4_upload_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> hardware_grp4_upload_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp3_upload_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> hardware_grp3_upload_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp2_upload_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> hardware_grp2_upload_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp1_upload_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> hardware_grp1_upload_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp0_upload_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> hardware_grp0_upload_flag </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_hw_poke_flags_reg_t
 *
 * Implemented by: 
 *      hw_upload_poke_flags
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      hardware_grp5_upload_flag                 :  1;
     unsigned      hardware_grp4_upload_flag                 :  1;
     unsigned      hardware_grp3_upload_flag                 :  1;
     unsigned      hardware_grp2_upload_flag                 :  1;
     unsigned      hardware_grp1_upload_flag                 :  1;
     unsigned      hardware_grp0_upload_flag                 :  1;
#else    /* Little Endian */
     unsigned      hardware_grp0_upload_flag                 :  1;
     unsigned      hardware_grp1_upload_flag                 :  1;
     unsigned      hardware_grp2_upload_flag                 :  1;
     unsigned      hardware_grp3_upload_flag                 :  1;
     unsigned      hardware_grp4_upload_flag                 :  1;
     unsigned      hardware_grp5_upload_flag                 :  1;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_hw_poke_flags_reg_t;

/*! @struct ncp_nca_hw_poke_flags_reg_55xx_t
 *  @brief Hardware Upload Poke Flags
 *  @details Flags that set during a hardware upload poke.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_flags_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp_upload_flag </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware group upload poke flags. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_hw_poke_flags_reg_55xx_t
 *
 * Implemented by: 
 *      hw_upload_poke_flags
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      hardware_grp_upload_flag                  : 16;
#else    /* Little Endian */
     unsigned      hardware_grp_upload_flag                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_hw_poke_flags_reg_55xx_t;

/*! @struct ncp_nca_num_of_cfg_nodes_reg_t
 *  @brief Number of CFG Loops
 *  @details keeps the number of CFG nodes on each CFG Loop
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_of_cfg_nodes_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_loop2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_loop2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_loop1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_loop1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_loop0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_loop0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx --> ncp_nca_num_of_cfg_nodes_reg_t
 *
 * Implemented by: 
 *      num_of_cfg_nodes
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      num_nodes_loop2                           :  8;
     unsigned      num_nodes_loop1                           :  8;
     unsigned      num_nodes_loop0                           :  8;
#else    /* Little Endian */
     unsigned      num_nodes_loop0                           :  8;
     unsigned      num_nodes_loop1                           :  8;
     unsigned      num_nodes_loop2                           :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_num_of_cfg_nodes_reg_t;

/*! @struct ncp_nca_num_of_cfg_nodes_reg_32xx_t
 *  @brief Number of CFG Rings
 *  @details keeps the number of CFG nodes on each CFG Ring
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_of_cfg_nodes_reg_32xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_ring2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_ring1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_nodes_ring0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> max_num_of_cfg_nodes_ring0 </td>
 * </tr>
 * </table>
 * Applies to: 32xx --> ncp_nca_num_of_cfg_nodes_reg_32xx_t
 *
 * Implemented by: 
 *      num_of_cfg_nodes
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      num_nodes_ring2                           :  8;
     unsigned      num_nodes_ring1                           :  8;
     unsigned      num_nodes_ring0                           :  8;
#else    /* Little Endian */
     unsigned      num_nodes_ring0                           :  8;
     unsigned      num_nodes_ring1                           :  8;
     unsigned      num_nodes_ring2                           :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_num_of_cfg_nodes_reg_32xx_t;

/*! @struct ncp_nca_cfg_pio_cdr0_reg_t
 *  @brief PIO Mode Command Data Register 0
 *  @details PIO Mode CFG command descrption register 0
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_pio_cdr0_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param start_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Start/Done, set to 1 to initiate a PIO operation,
 *        cleared when done
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param sysmem_access_type </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Defines sysmem/cache access type for SM and CSM commands
 *        sysmem_access_type = 4'b0010; // Cacheable access,
 *        alloc cache , typically used for Regular Sysmem commands
 *        sysmem_access_type = 4'b1111; // Cacheable ATOMIC
 *        access, alloc cache , typically used for Coherent
 *        Sysmem commands
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Local bit that defines Node's Own Address Space </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param status </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Execution Status : 00= inactive 01= ongoing execution
 *        10= completed with fail 11= completed with success
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param byte_swap_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Byte Swap Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_cmpl_int_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Interrupt Enable on CFG Command Completion </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmd_type </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> CPU CFG Command Type, encoded as: ring_reset = 4'b0001
 *        ring_status = 4'b0010 CRBR (cfg ring block read) =
 *        4'b0100 CRBW (cfg ring block write) = 4'b0101 CRSW
 *        (cfg ring scatter write) = 4'b0110 CRBF (cfg ring
 *        block fill) = 4'b0111 CRRMW (cfg ring read/modify/write)
 *        = 4'b1000 CRBBW (cfg ring broadcast block write) =
 *        4'b1001 CRBSW (cfg ring broadcast scatter write) =
 *        4'b1010 CRBBF (cfg ring broadcast block fill) = 4'b1011
 *        SMBR (sysmem block read) = 4'b1100 SMBW (sysmem block
 *        write) = 4'b1101 CSMBR (coherent sysmem block read)
 *        = 4'b1110 CSMBW (coherent sysmem block write) = 4'b1111
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dbs </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Data Buffer Size: length of Data Buffer in Bytes 0
 *        means 1 Byte
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_pio_cdr0_reg_t
 *
 * Implemented by: 
 *      cfg_pio_cdr0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      start_done                                :  1;
     unsigned      reserved0                                 :  2;
     unsigned      sysmem_access_type                        :  4;
     unsigned      local_bit                                 :  1;
     unsigned      status                                    :  2;
     unsigned      byte_swap_enable                          :  1;
     unsigned      cfg_cmpl_int_enable                       :  1;
     unsigned      cmd_type                                  :  4;
     unsigned      dbs                                       : 16;
#else    /* Little Endian */
     unsigned      dbs                                       : 16;
     unsigned      cmd_type                                  :  4;
     unsigned      cfg_cmpl_int_enable                       :  1;
     unsigned      byte_swap_enable                          :  1;
     unsigned      status                                    :  2;
     unsigned      local_bit                                 :  1;
     unsigned      sysmem_access_type                        :  4;
     unsigned      reserved0                                 :  2;
     unsigned      start_done                                :  1;
#endif
} ncp_nca_cfg_pio_cdr0_reg_t;

/*! @struct ncp_nca_cfg_pio_cdr1_reg_t
 *  @brief PIO Mode Command Data Register 1
 *  @details PIO Mode CFG command descrption register 1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_pio_cdr1_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param target_address </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target Address, For CS*
 *        and SM* Commands : System Memory Address Lower bits
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_pio_cdr1_reg_t
 *
 * Implemented by: 
 *      cfg_pio_cdr1
 */
 
typedef struct
{
     unsigned  int            target_address;
} ncp_nca_cfg_pio_cdr1_reg_t;

/*! @struct ncp_nca_cfg_pio_cdr2_reg_t
 *  @brief PIO Mode Command Data Register 2
 *  @details PIO Mode CFG command descrption register 2
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_pio_cdr2_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_node_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target Node ID, For CS*
 *        and SM* Commands : not applicable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id_address_upper </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target ID, For CS* and
 *        SM* Commands : System Memory Address Upper bits with
 *        2 msb upper 0's
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_cfg_pio_cdr2_reg_t
 *
 * Implemented by: 
 *      cfg_pio_cdr2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      target_node_id                            :  8;
     unsigned      target_id_address_upper                   :  8;
#else    /* Little Endian */
     unsigned      target_id_address_upper                   :  8;
     unsigned      target_node_id                            :  8;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_cfg_pio_cdr2_reg_t;

/*! @struct ncp_nca_cfg_pio_cdr2_reg_55xx_t
 *  @brief PIO Mode Command Data Register 2
 *  @details PIO Mode CFG command descrption register 2
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_pio_cdr2_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param va </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> For CR* Commands : unused, For CS* and SM* Commands
 *        : unused
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_node_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target Node ID, For CS*
 *        and SM* Commands : unused
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id_address_upper </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : CFG Ring Target ID, For CS* and
 *        SM* Commands : System Memory Virtual Address Upper
 *        bits 35:32 (upper 4 bits not used)
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_cfg_pio_cdr2_reg_55xx_t
 *
 * Implemented by: 
 *      cfg_pio_cdr2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      va                                        : 16;
     unsigned      target_node_id                            :  8;
     unsigned      target_id_address_upper                   :  8;
#else    /* Little Endian */
     unsigned      target_id_address_upper                   :  8;
     unsigned      target_node_id                            :  8;
     unsigned      va                                        : 16;
#endif
} ncp_nca_cfg_pio_cdr2_reg_55xx_t;

/*! @struct ncp_nca_cfg_ring_error_stat_reg0_t
 *  @brief CFG Ring Command Error Status Register 0
 *  @details CFG Ring Command Execution error status register 0
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_error_stat_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param target_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Target_Error_detected </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Node_Error_detected </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_err_type_bit_3_2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Node Error_Type[3:2] when node error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param time_out_err_or_node_err_type_bit1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> TimeOut Error indication at target error or Node Error_Type_Bit[1] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param decode_err_or_node_err_type_bit0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Decode Error indication at target error or Node Error_Type_Bit[0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Local Bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param instruction </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CFG Ring instruction </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param inst_len </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Instruction lenght </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Target Node ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Target ID </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx --> ncp_nca_cfg_ring_error_stat_reg0_t
 *
 * Implemented by: 
 *      cfg_ring_error_stat_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      target_error                              :  1;
     unsigned      node_error                                :  1;
     unsigned      node_err_type_bit_3_2                     :  2;
     unsigned      time_out_err_or_node_err_type_bit1        :  1;
     unsigned      decode_err_or_node_err_type_bit0          :  1;
     unsigned      local_bit                                 :  1;
     unsigned      instruction                               :  3;
     unsigned      inst_len                                  :  6;
     unsigned      node_id                                   :  8;
     unsigned      target_id                                 :  8;
#else    /* Little Endian */
     unsigned      target_id                                 :  8;
     unsigned      node_id                                   :  8;
     unsigned      inst_len                                  :  6;
     unsigned      instruction                               :  3;
     unsigned      local_bit                                 :  1;
     unsigned      decode_err_or_node_err_type_bit0          :  1;
     unsigned      time_out_err_or_node_err_type_bit1        :  1;
     unsigned      node_err_type_bit_3_2                     :  2;
     unsigned      node_error                                :  1;
     unsigned      target_error                              :  1;
#endif
} ncp_nca_cfg_ring_error_stat_reg0_t;

/*! @struct ncp_nca_cfg_ring_error_stat_reg0_25xx_t
 *  @brief CFG Ring Command Error Status Register 0
 *  @details CFG Ring Command Execution error status register 0
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_error_stat_reg0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param target_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Target_Error_detected </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Node_Error_detected </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_err_type_bit_3_2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Node Error_Type[3:2] when node error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param time_out_err_or_node_err_type_bit1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> TimeOut Error indication at target error or Node Error_Type_Bit[1] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param decode_err_or_node_err_type_bit0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Decode Error indication at target error or Node Error_Type_Bit[0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Local Bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param instruction </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CFG Ring instruction </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param inst_len </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Instruction lenght </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring_id </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Ring ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_id </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Target Node ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Target ID </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_cfg_ring_error_stat_reg0_25xx_t
 *
 * Implemented by: 
 *      cfg_ring_error_stat_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      target_error                              :  1;
     unsigned      node_error                                :  1;
     unsigned      node_err_type_bit_3_2                     :  2;
     unsigned      time_out_err_or_node_err_type_bit1        :  1;
     unsigned      decode_err_or_node_err_type_bit0          :  1;
     unsigned      local_bit                                 :  1;
     unsigned      instruction                               :  3;
     unsigned      inst_len                                  :  6;
     unsigned      ring_id                                   :  2;
     unsigned      node_id                                   :  6;
     unsigned      target_id                                 :  8;
#else    /* Little Endian */
     unsigned      target_id                                 :  8;
     unsigned      node_id                                   :  6;
     unsigned      ring_id                                   :  2;
     unsigned      inst_len                                  :  6;
     unsigned      instruction                               :  3;
     unsigned      local_bit                                 :  1;
     unsigned      decode_err_or_node_err_type_bit0          :  1;
     unsigned      time_out_err_or_node_err_type_bit1        :  1;
     unsigned      node_err_type_bit_3_2                     :  2;
     unsigned      node_error                                :  1;
     unsigned      target_error                              :  1;
#endif
} ncp_nca_cfg_ring_error_stat_reg0_25xx_t;

/*! @struct ncp_nca_cfg_ring_error_stat_reg1_t
 *  @brief CFG Ring Command Error Status Register 1
 *  @details CFG Ring Command Execution error status register 1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_error_stat_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param wrong_ack_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Wrong ACK received error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param acktimeout_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> ACK Time-Out Error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param unclaimed_header_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Unclaimed Header Error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Parity Error Ring0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Parity Error Ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Parity Error Ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Local Bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param instruction </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CFG Ring instruction </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param inst_len </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Instruction length </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Target Node ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Target ID </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx --> ncp_nca_cfg_ring_error_stat_reg1_t
 *
 * Implemented by: 
 *      cfg_ring_error_stat_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      wrong_ack_err                             :  1;
     unsigned      acktimeout_err                            :  1;
     unsigned      unclaimed_header_err                      :  1;
     unsigned      parity_err_ring0                          :  1;
     unsigned      parity_err_ring1                          :  1;
     unsigned      parity_err_ring2                          :  1;
     unsigned      local_bit                                 :  1;
     unsigned      instruction                               :  3;
     unsigned      inst_len                                  :  6;
     unsigned      node_id                                   :  8;
     unsigned      target_id                                 :  8;
#else    /* Little Endian */
     unsigned      target_id                                 :  8;
     unsigned      node_id                                   :  8;
     unsigned      inst_len                                  :  6;
     unsigned      instruction                               :  3;
     unsigned      local_bit                                 :  1;
     unsigned      parity_err_ring2                          :  1;
     unsigned      parity_err_ring1                          :  1;
     unsigned      parity_err_ring0                          :  1;
     unsigned      unclaimed_header_err                      :  1;
     unsigned      acktimeout_err                            :  1;
     unsigned      wrong_ack_err                             :  1;
#endif
} ncp_nca_cfg_ring_error_stat_reg1_t;

/*! @struct ncp_nca_cfg_ring_error_stat_reg1_25xx_t
 *  @brief CFG Ring Command Error Status Register 1
 *  @details CFG Ring Command Execution error status register 1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_error_stat_reg1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param wrong_ack_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Wrong ACK received error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param acktimeout_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> ACK Time-Out Error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param unclaimed_header_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Unclaimed Header Error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Parity Error Ring0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Parity Error Ring1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param parity_err_ring2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Parity Error Ring2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param local_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Local Bit </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param instruction </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CFG Ring instruction </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param inst_len </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Instruction length </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ring_id </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Ring ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param node_id </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Target Node ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param target_id </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Target ID </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_cfg_ring_error_stat_reg1_25xx_t
 *
 * Implemented by: 
 *      cfg_ring_error_stat_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      wrong_ack_err                             :  1;
     unsigned      acktimeout_err                            :  1;
     unsigned      unclaimed_header_err                      :  1;
     unsigned      parity_err_ring0                          :  1;
     unsigned      parity_err_ring1                          :  1;
     unsigned      parity_err_ring2                          :  1;
     unsigned      local_bit                                 :  1;
     unsigned      instruction                               :  3;
     unsigned      inst_len                                  :  6;
     unsigned      ring_id                                   :  2;
     unsigned      node_id                                   :  6;
     unsigned      target_id                                 :  8;
#else    /* Little Endian */
     unsigned      target_id                                 :  8;
     unsigned      node_id                                   :  6;
     unsigned      ring_id                                   :  2;
     unsigned      inst_len                                  :  6;
     unsigned      instruction                               :  3;
     unsigned      local_bit                                 :  1;
     unsigned      parity_err_ring2                          :  1;
     unsigned      parity_err_ring1                          :  1;
     unsigned      parity_err_ring0                          :  1;
     unsigned      unclaimed_header_err                      :  1;
     unsigned      acktimeout_err                            :  1;
     unsigned      wrong_ack_err                             :  1;
#endif
} ncp_nca_cfg_ring_error_stat_reg1_25xx_t;

/*! @struct ncp_nca_cfg_ring_node_status_reg_t
 *  @brief CFG Ring Node Status Register
 *  @details This register holds the value returned when status is asked, write 1 to bit16 of NCA Interrupt Register at F000 to clear
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_ring_node_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param node_status </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Node Status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cfg_ring_node_status_reg_t
 *
 * Implemented by: 
 *      cfg_ring_node_status
 */
 
typedef struct
{
     unsigned  int               node_status;
} ncp_nca_cfg_ring_node_status_reg_t;

/*! @struct ncp_nca_cnal_if_status_reg_t
 *  @brief CNAL Interface SysMem Read/Write Status Register
 *  @details This register holds the value returned when CNAL I/F status is asked
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cnal_if_status_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_eng_cwd_ready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> CMSI Write Data Ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_eng_cwr_ready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> CMSI Write Request Ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_eng_crr_ready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> CMSI Read Request Ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_read_transaction_state </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> CNAL Interface Read transaction state </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnal_write_transaction_state </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CNAL Interface Write transaction state </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param read_resp_err_code </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CNAL Interface Read Response error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param write_resp_err_code </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CNAL Interface Write Response error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_single_l_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> CNAL Interface lower word ECC Singlebit error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_single_u_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CNAL Interface upper word ECC Singlebit error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_multiple_l_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> CNAL Interface lower word ECC Multibit error </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_multiple_u_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CNAL Interface upper word ECC Multibit error </td>
 * </tr>
 * </table>
 * Applies to: 34xx --> ncp_nca_cnal_if_status_reg_t
 *
 * Implemented by: 
 *      cnal_if_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      cnal_eng_cwd_ready                        :  1;
     unsigned      cnal_eng_cwr_ready                        :  1;
     unsigned      cnal_eng_crr_ready                        :  1;
     unsigned      cnal_read_transaction_state               :  7;
     unsigned      cnal_write_transaction_state              :  6;
     unsigned      read_resp_err_code                        :  2;
     unsigned      write_resp_err_code                       :  2;
     unsigned      ecc_single_l_err                          :  1;
     unsigned      ecc_single_u_err                          :  1;
     unsigned      ecc_multiple_l_err                        :  1;
     unsigned      ecc_multiple_u_err                        :  1;
#else    /* Little Endian */
     unsigned      ecc_multiple_u_err                        :  1;
     unsigned      ecc_multiple_l_err                        :  1;
     unsigned      ecc_single_u_err                          :  1;
     unsigned      ecc_single_l_err                          :  1;
     unsigned      write_resp_err_code                       :  2;
     unsigned      read_resp_err_code                        :  2;
     unsigned      cnal_write_transaction_state              :  6;
     unsigned      cnal_read_transaction_state               :  7;
     unsigned      cnal_eng_crr_ready                        :  1;
     unsigned      cnal_eng_cwr_ready                        :  1;
     unsigned      cnal_eng_cwd_ready                        :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_cnal_if_status_reg_t;

/*! @struct ncp_nca_pcq_grp_reg0_t
 *  @brief PCQ Group Register0
 *  @details PCQ Group Base Initialization Register0
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_out_queues </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Number of oPCQs (CPU Output Queues) </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_in_queues </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of iPCQs (CPU Input Queues) </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_pcq_grp_reg0_t
 *
 * Implemented by: 
 *      pcq_grp_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      num_out_queues                            :  8;
     unsigned      reserved1                                 :  8;
     unsigned      num_in_queues                             :  8;
#else    /* Little Endian */
     unsigned      num_in_queues                             :  8;
     unsigned      reserved1                                 :  8;
     unsigned      num_out_queues                            :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_pcq_grp_reg0_t;

/*! @struct ncp_nca_pcq_grp_reg1_t
 *  @brief PCQ Group Register1
 *  @details PCQ Group Base Initialization Register1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_config_queues </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Number of cPCQs (CPU Configuration Queues) </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_rx_buffer_pool_queues </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Number of rPCQs (CPU receive buffer pool/receive buffer
 *        Queues
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_tcomp_queues </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of tPCQs (CPU Task Completion Queues) </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_pcq_grp_reg1_t
 *
 * Implemented by: 
 *      pcq_grp_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      num_config_queues                         :  8;
     unsigned      num_rx_buffer_pool_queues                 :  8;
     unsigned      num_tcomp_queues                          :  8;
#else    /* Little Endian */
     unsigned      num_tcomp_queues                          :  8;
     unsigned      num_rx_buffer_pool_queues                 :  8;
     unsigned      num_config_queues                         :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_pcq_grp_reg1_t;

/*! @struct ncp_nca_pcq_grp_reg1_55xx_t
 *  @brief PCQ Group Register1
 *  @details PCQ Group Base Initialization Register1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param num_config_queues </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Number of cPCQs (CPU Configuration Queues) </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param upload_nca_pgit_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Upload NCA PGIT enable. Enable upload of the NCA managed
 *        PGIT to memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Memory select. 0 - system memory, 1 - AXI memory </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Memory pool ID </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_pcq_grp_reg1_55xx_t
 *
 * Implemented by: 
 *      pcq_grp_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      num_config_queues                         :  8;
     unsigned      reserved1                                 :  6;
     unsigned      upload_nca_pgit_en                        :  1;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved2                                 :  3;
     unsigned      pool_id                                   :  5;
#else    /* Little Endian */
     unsigned      pool_id                                   :  5;
     unsigned      reserved2                                 :  3;
     unsigned      mem_sel                                   :  1;
     unsigned      upload_nca_pgit_en                        :  1;
     unsigned      reserved1                                 :  6;
     unsigned      num_config_queues                         :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_pcq_grp_reg1_55xx_t;

/*! @struct ncp_nca_pcq_grp_reg2_t
 *  @brief PCQ Group Register2
 *  @details PCQ Group Base Initialization Register 2
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_bar_upper </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCA PCQ Group Index Table Base Address Register UPPER
 *        BITS[37:32]
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_pcq_grp_reg2_t
 *
 * Implemented by: 
 *      pcq_grp_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      pgit_bar_upper                            :  6;
#else    /* Little Endian */
     unsigned      pgit_bar_upper                            :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_pcq_grp_reg2_t;

/*! @struct ncp_nca_pcq_grp_reg2_55xx_t
 *  @brief PCQ Group Register2
 *  @details PCQ Group Base Initialization Register 2
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param nca_pgit_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCA PCQ Group Index Table Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_pcq_grp_reg2_55xx_t
 *
 * Implemented by: 
 *      pcq_grp_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      nca_pgit_vi_upper                         :  4;
#else    /* Little Endian */
     unsigned      nca_pgit_vi_upper                         :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_nca_pcq_grp_reg2_55xx_t;

/*! @struct ncp_nca_pcq_grp_reg3_t
 *  @brief PCQ Group Register3
 *  @details PCQ Group Base Initialization Register3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg3_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_bar_lower </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> NCA PCQ Group Index Table Base Address Register LOWER
 *        BITS[31:6]
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param zeros </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 6 Zeros in the lower 6 bits of the BAR </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_pcq_grp_reg3_t
 *
 * Implemented by: 
 *      pcq_grp_r3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      pgit_bar_lower                            : 26;
     unsigned      zeros                                     :  6;
#else    /* Little Endian */
     unsigned      zeros                                     :  6;
     unsigned      pgit_bar_lower                            : 26;
#endif
} ncp_nca_pcq_grp_reg3_t;

/*! @struct ncp_nca_pcq_grp_reg3_55xx_t
 *  @brief PCQ Group Register3
 *  @details PCQ Group Base Initialization Register3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_pgit_vi_lower </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> NCA PCQ Group Index Table Virtual Index lower bits[31:6] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param zeros </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 6 Zeros in the lower 6 bits of the BAR </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_pcq_grp_reg3_55xx_t
 *
 * Implemented by: 
 *      pcq_grp_r3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      nca_pgit_vi_lower                         : 26;
     unsigned      zeros                                     :  6;
#else    /* Little Endian */
     unsigned      zeros                                     :  6;
     unsigned      nca_pgit_vi_lower                         : 26;
#endif
} ncp_nca_pcq_grp_reg3_55xx_t;

/*! @struct ncp_nca_pcq_grp_reg4_t
 *  @brief PCQ Group Register4
 *  @details PCQ Group Base Initialization Register 4
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg4_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_pgit_bar_upper </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPU PCQ Group Index Table Base Address Register UPPER
 *        BITS[37:32]
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_pcq_grp_reg4_t
 *
 * Implemented by: 
 *      pcq_grp_r4
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      cpu_pgit_bar_upper                        :  6;
#else    /* Little Endian */
     unsigned      cpu_pgit_bar_upper                        :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_pcq_grp_reg4_t;

/*! @struct ncp_nca_pcq_grp_reg4_55xx_t
 *  @brief PCQ Group Register4
 *  @details PCQ Group Base Initialization Register 4
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg4_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_pgit_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CPU PCQ Group Index Table Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_pcq_grp_reg4_55xx_t
 *
 * Implemented by: 
 *      pcq_grp_r4
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      cpu_pgit_vi_upper                         :  4;
#else    /* Little Endian */
     unsigned      cpu_pgit_vi_upper                         :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_nca_pcq_grp_reg4_55xx_t;

/*! @struct ncp_nca_pcq_grp_reg5_t
 *  @brief PCQ Group Register5
 *  @details PCQ Group Base Initialization Register 5
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg5_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_pgit_bar_lower </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CPU PCQ Group Index Table Base Address Register LOWER
 *        BITS[31:6]
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param zeros </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 6 Zeros in the lower 6 bits of the BAR </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_pcq_grp_reg5_t
 *
 * Implemented by: 
 *      pcq_grp_r5
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cpu_pgit_bar_lower                        : 26;
     unsigned      zeros                                     :  6;
#else    /* Little Endian */
     unsigned      zeros                                     :  6;
     unsigned      cpu_pgit_bar_lower                        : 26;
#endif
} ncp_nca_pcq_grp_reg5_t;

/*! @struct ncp_nca_pcq_grp_reg5_55xx_t
 *  @brief PCQ Group Register5
 *  @details PCQ Group Base Initialization Register 5
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pcq_grp_reg5_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_pgit_vi_lower </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CPU PCQ Group Index Table Virtual Index lower bits[31:6] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param zeros </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 6 Zeros in the lower 6 bits of the BAR </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_pcq_grp_reg5_55xx_t
 *
 * Implemented by: 
 *      pcq_grp_r5
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cpu_pgit_vi_lower                         : 26;
     unsigned      zeros                                     :  6;
#else    /* Little Endian */
     unsigned      zeros                                     :  6;
     unsigned      cpu_pgit_vi_lower                         : 26;
#endif
} ncp_nca_pcq_grp_reg5_55xx_t;

/*! @struct ncp_nca_PCQ_desc_reg0_t
 *  @brief PCQ descriptor Register0
 *  @details Register 0 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_desc_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param number_of_queue_entries </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> The number of Queue entries in the queue </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param enable_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Enable 0->queue is disabled, 1->queue is enabled </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbpid </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Receive Buffer Pool ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param qentry_bar_upper </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Entry Base Address UPPER BITS[37:32] </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_PCQ_desc_reg0_t
 *
 * Implemented by: 
 *      PCQ_desc_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      number_of_queue_entries                   : 16;
     unsigned      enable_bit                                :  1;
     unsigned      rbpid                                     :  4;
     unsigned      reserved0                                 :  5;
     unsigned      qentry_bar_upper                          :  6;
#else    /* Little Endian */
     unsigned      qentry_bar_upper                          :  6;
     unsigned      reserved0                                 :  5;
     unsigned      rbpid                                     :  4;
     unsigned      enable_bit                                :  1;
     unsigned      number_of_queue_entries                   : 16;
#endif
} ncp_nca_PCQ_desc_reg0_t;

/*! @struct ncp_nca_PCQ_desc_reg0_55xx_t
 *  @brief PCQ descriptor Register0
 *  @details Register 0 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_desc_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param number_of_queue_entries </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> The number of Queue entries in the queue </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param atfc </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Auto task flow completion. For iPCQ only. 0 - disabled,
 *        1 - enabled
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param enable_bit </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Enable. 0 - queue is disabled, 1 - queue is enabled </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_single_ptr </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> CPU single pointer. For iPCQ only, force copy to a
 *        single segment when a copy is done.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param task_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Task memory select. 0 - system memory, 1 - AXI memory </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param copy_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Copy memory pool ID. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_PCQ_desc_reg0_55xx_t
 *
 * Implemented by: 
 *      PCQ_desc_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      number_of_queue_entries                   : 16;
     unsigned      reserved0                                 :  4;
     unsigned      atfc                                      :  1;
     unsigned      enable_bit                                :  1;
     unsigned      cpu_single_ptr                            :  1;
     unsigned      task_mem_sel                              :  1;
     unsigned      reserved1                                 :  3;
     unsigned      copy_pool_id                              :  5;
#else    /* Little Endian */
     unsigned      copy_pool_id                              :  5;
     unsigned      reserved1                                 :  3;
     unsigned      task_mem_sel                              :  1;
     unsigned      cpu_single_ptr                            :  1;
     unsigned      enable_bit                                :  1;
     unsigned      atfc                                      :  1;
     unsigned      reserved0                                 :  4;
     unsigned      number_of_queue_entries                   : 16;
#endif
} ncp_nca_PCQ_desc_reg0_55xx_t;

/*! @struct ncp_nca_PCQ_desc_reg1_t
 *  @brief PCQ descriptor Register1
 *  @details Register 1 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_desc_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param qentry_bar_lower </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Entry Base Address LOWER BITS[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_PCQ_desc_reg1_t
 *
 * Implemented by: 
 *      PCQ_desc_r1
 */
 
typedef struct
{
     unsigned  int          qentry_bar_lower;
} ncp_nca_PCQ_desc_reg1_t;

/*! @struct ncp_nca_PCQ_desc_reg1_55xx_t
 *  @brief PCQ descriptor Register1
 *  @details Register 1 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_desc_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_allowd_pools </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> CPU allowed pools. For iPCQ only. Each bit corresponds
 *        to pools 0 to 7. When set, indicates that a CPU has
 *        access to the corresponding pool, so a copy is not
 *        required.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Queue memory select. 0 - system memory, 1 - AXI memory. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Queue memory pool ID. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_PCQ_desc_reg1_55xx_t
 *
 * Implemented by: 
 *      PCQ_desc_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      cpu_allowd_pools                          :  8;
     unsigned      reserved1                                 :  7;
     unsigned      q_mem_sel                                 :  1;
     unsigned      reserved2                                 :  3;
     unsigned      q_pool_id                                 :  5;
#else    /* Little Endian */
     unsigned      q_pool_id                                 :  5;
     unsigned      reserved2                                 :  3;
     unsigned      q_mem_sel                                 :  1;
     unsigned      reserved1                                 :  7;
     unsigned      cpu_allowd_pools                          :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_PCQ_desc_reg1_55xx_t;

/*! @struct ncp_nca_PCQ_stat_reg0_t
 *  @brief PCQ Status Register0
 *  @details Register 0 of the PCQ Status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_stat_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cpu_index </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> CPU Index </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param nca_index </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCA Index </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_PCQ_stat_reg0_t
 *
 * Implemented by: 
 *      PCQ_stat_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cpu_index                                 : 16;
     unsigned      nca_index                                 : 16;
#else    /* Little Endian */
     unsigned      nca_index                                 : 16;
     unsigned      cpu_index                                 : 16;
#endif
} ncp_nca_PCQ_stat_reg0_t;

/*! @struct ncp_nca_PCQ_stat_reg1_t
 *  @brief PCQ Status Register1
 *  @details Register 1 of the PCQ Status
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_stat_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param almost_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> almost_full </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> full </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> empty </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param depth </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> depth </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_PCQ_stat_reg1_t
 *
 * Implemented by: 
 *      PCQ_stat_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 13;
     unsigned      almost_full                               :  1;
     unsigned      full                                      :  1;
     unsigned      empty                                     :  1;
     unsigned      depth                                     : 16;
#else    /* Little Endian */
     unsigned      depth                                     : 16;
     unsigned      empty                                     :  1;
     unsigned      full                                      :  1;
     unsigned      almost_full                               :  1;
     unsigned      reserved0                                 : 13;
#endif
} ncp_nca_PCQ_stat_reg1_t;

/*! @struct ncp_nca_rcv_buff_pool_size_reg_a_t
 *  @brief NCA Receive Buffer Pool Size
 *  @details receive buffer pool
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rcv_buff_pool_size_reg_a_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Size 0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Size 1 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_rcv_buff_pool_size_reg_a_t
 *
 * Implemented by: 
 *      size_0_1_r
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      rbuff_size_0                              : 16;
     unsigned      rbuff_size_1                              : 16;
#else    /* Little Endian */
     unsigned      rbuff_size_1                              : 16;
     unsigned      rbuff_size_0                              : 16;
#endif
} ncp_nca_rcv_buff_pool_size_reg_a_t;

/*! @struct ncp_nca_rcv_buff_pool_size_reg_b_t
 *  @brief NCA Receive Buffer Pool Size
 *  @details receive buffer pool
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rcv_buff_pool_size_reg_b_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Size 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbuff_size_3 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Size 3 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_rcv_buff_pool_size_reg_b_t
 *
 * Implemented by: 
 *      size_2_3_r
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      rbuff_size_2                              : 16;
     unsigned      rbuff_size_3                              : 16;
#else    /* Little Endian */
     unsigned      rbuff_size_3                              : 16;
     unsigned      rbuff_size_2                              : 16;
#endif
} ncp_nca_rcv_buff_pool_size_reg_b_t;

/*! @struct ncp_nca_cdar_entry_t
 *  @brief PIO mode data word
 *  @details CDAR local memory for PIO mode
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cdar_entry_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param pio_mode_word </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PIO mode word entry </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cdar_entry_t
 *
 * Implemented by: 
 *      cdar_memory
 */
 
typedef struct
{
     unsigned  int             pio_mode_word;
} ncp_nca_cdar_entry_t;

/*! @struct ncp_nca_cdar_entry_last_word_t
 *  @brief PIO mode last data word
 *  @details CDAR local memory word 129 for PIO mode
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cdar_entry_last_word_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param pio_mode_word_129 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PIO mode word 129 entry </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_cdar_entry_last_word_t
 *
 * Implemented by: 
 *      cdar_word_129
 */
 
typedef struct
{
     unsigned  int         pio_mode_word_129;
} ncp_nca_cdar_entry_last_word_t;

/*! @struct ncp_nca_itask_drop_count_ipcq_er_t
 *  @brief Input Task Drop Count iPCQ Error
 *  @details Counts the number of input tasks dropped due to an iPCQ error.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_itask_drop_count_ipcq_er_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_cnt_ipcq_er </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> iPCQ errors include queue disabled, bad queue indexes
 *        (c or n index >= queue depth), and queue full
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_itask_drop_count_ipcq_er_t
 *
 * Implemented by: 
 *      itask_drop_cnt_ipcq_er
 */
 
typedef struct
{
     unsigned  int      itask_drop_cnt_ipcq_er;
} ncp_nca_itask_drop_count_ipcq_er_t;

/*! @struct ncp_nca_itask_drop_count_no_buffer_t
 *  @brief Input Task Drop Count No Buffer
 *  @details Counts the number of input tasks dropped due to no receive buffer being available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_itask_drop_count_no_buffer_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_cnt_no_buf </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> number of inut tasks dropped because no receive buffer
 *        was available
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_itask_drop_count_no_buffer_t
 *
 * Implemented by: 
 *      itask_drop_cnt_no_buf
 */
 
typedef struct
{
     unsigned  int      itask_drop_cnt_no_buf;
} ncp_nca_itask_drop_count_no_buffer_t;

/*! @struct ncp_nca_otask_length_compare_reg_t
 *  @brief Ouput Task Length Compare Register
 *  @details Used in conjucnction with the otask_length_capture register to detect when an output task has a length >= the otask_length_compare_value field of this register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otask_length_compare_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_len_compare_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Output task length compare enable. When this bit is
 *        set, output task length compare is enabled
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_length_compare_value </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task length compare value. </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_otask_length_compare_reg_t
 *
 * Implemented by: 
 *      otask_length_compare
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_len_compare_en                      :  1;
     unsigned      reserved0                                 : 14;
     unsigned      otask_length_compare_value                : 17;
#else    /* Little Endian */
     unsigned      otask_length_compare_value                : 17;
     unsigned      reserved0                                 : 14;
     unsigned      otask_len_compare_en                      :  1;
#endif
} ncp_nca_otask_length_compare_reg_t;

/*! @struct ncp_nca_otask_length_capture_reg_t
 *  @brief Ouput Task Length Capture Register
 *  @details Used in conjunction with the otask_length_compare_reg.  If the otask_length_compare_reg otask_len_compare_en bit is set, the otask_len_exceeded bit of this register is clear, and the length of the current output task being sent by the NCA is >= to the otask_length_compare_reg otask_length_compare_value field, then the otask_len_exceeded bit of this register is set, and the otask_length_capt_value field of this register is set to the length of the output task.  Once the otask_len_exceeded bit is set, comparing is stopped until the otask_len_exceeded bit is cleared by software
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otask_length_capture_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_len_exceeded </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Output task length exceeded. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_length_capt_value </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task length captured value. </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_otask_length_capture_reg_t
 *
 * Implemented by: 
 *      otask_length_capture
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_len_exceeded                        :  1;
     unsigned      reserved0                                 : 14;
     unsigned      otask_length_capt_value                   : 17;
#else    /* Little Endian */
     unsigned      otask_length_capt_value                   : 17;
     unsigned      reserved0                                 : 14;
     unsigned      otask_len_exceeded                        :  1;
#endif
} ncp_nca_otask_length_capture_reg_t;

/*! @struct ncp_nca_otask_opcq_backpressure_t
 *  @brief Output Task oPCQ Backpressure
 *  @details Indicates when backpressure is asserted by the destinations fed by the oPCQs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otask_opcq_backpressure_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_dest_bp </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to an output task destination.
 *        Software can monitor this register to determine when
 *        backpressure is being applied by the corresponding
 *        destination.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_otask_opcq_backpressure_t
 *
 * Implemented by: 
 *      otask_opcq_bp
 */
 
typedef struct
{
     unsigned  int             otask_dest_bp;
} ncp_nca_otask_opcq_backpressure_t;

/*! @struct ncp_nca_rcv_buf_pool_tsi_bp_t
 *  @brief Receive Buffer Pool Input Task Backpressure
 *  @details Indicates when backpressure is asserted to the task start interface for the corresponding iPCQ because no receive buffers are available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rcv_buf_pool_tsi_bp_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_ipcq_bp </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to an iPCQ, and indicates when
 *        bacpressure is applied to the task start interface
 *        for that iPCQ because no receive buffers are available
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_rcv_buf_pool_tsi_bp_t
 *
 * Implemented by: 
 *      rbp_itask_bp
 */
 
typedef struct
{
     unsigned  int         rbp_depth_ipcq_bp;
} ncp_nca_rcv_buf_pool_tsi_bp_t;

/*! @struct ncp_nca_tfc_count_reg_t
 *  @brief Task Flow Completion Counters
 *  @details Register 0 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_tfc_count_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param xmit_complete_counter </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Xmit Complete Counter </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param completion_counter </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Completion Counter </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_tfc_count_reg_t
 *
 * Implemented by: 
 *      tfc_count_r
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      xmit_complete_counter                     : 16;
     unsigned      completion_counter                        : 16;
#else    /* Little Endian */
     unsigned      completion_counter                        : 16;
     unsigned      xmit_complete_counter                     : 16;
#endif
} ncp_nca_tfc_count_reg_t;

/*! @struct ncp_nca_rbp_depths_reg0_34xx_t
 *  @brief Receive Buffer Pool Depths Register0
 *  @details Receive Buffer Pool Depths for Size0 and Size1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_depths_reg0_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size0[10:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size1[9:0] </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx --> ncp_nca_rbp_depths_reg0_34xx_t
 *
 * Implemented by: 
 *      rbp_depths_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_depth_size0                           : 11;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_depth_size1                           : 10;
#else    /* Little Endian */
     unsigned      rbp_depth_size1                           : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_depth_size0                           : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_depths_reg0_34xx_t;

/*! @struct ncp_nca_rbp_depths_reg0_25xx_t
 *  @brief Receive Buffer Pool Depths Register0
 *  @details Receive Buffer Pool Depths for Size0 and Size1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_depths_reg0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size0[11:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size1[10:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_depths_reg0_25xx_t
 *
 * Implemented by: 
 *      rbp_depths_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_depth_size0                           : 12;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_depth_size1                           : 11;
#else    /* Little Endian */
     unsigned      rbp_depth_size1                           : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_depth_size0                           : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_depths_reg0_25xx_t;

/*! @struct ncp_nca_rbp_depths_reg1_34xx_t
 *  @brief Receive Buffer Pool Depths Register1
 *  @details Receive Buffer Pool Depths for Size2 and Size3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_depths_reg1_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size2[8:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size3[7:0] </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx --> ncp_nca_rbp_depths_reg1_34xx_t
 *
 * Implemented by: 
 *      rbp_depths_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_depth_size2                           :  9;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_depth_size3                           :  8;
#else    /* Little Endian */
     unsigned      rbp_depth_size3                           :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_depth_size2                           :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_depths_reg1_34xx_t;

/*! @struct ncp_nca_rbp_depths_reg1_25xx_t
 *  @brief Receive Buffer Pool Depths Register1
 *  @details Receive Buffer Pool Depths for Size2 and Size3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_depths_reg1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size2[9:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_depth_size3 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool Depth Size3[8:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_depths_reg1_25xx_t
 *
 * Implemented by: 
 *      rbp_depths_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_depth_size2                           : 10;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_depth_size3                           :  9;
#else    /* Little Endian */
     unsigned      rbp_depth_size3                           :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_depth_size2                           : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_depths_reg1_25xx_t;

/*! @struct ncp_nca_rbp_itask_bp_en_reg_t
 *  @brief Receive Buffer Pool Input Task Backpressure Enable
 *  @details Used in conjunction with rbp_itask_bp_incld_bsiz_reg. Enables NCA to TIL input task backpressure on a per iPCQ basis when receive buffers are not available.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_itask_bp_en_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_itask_bp_en </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to an iPCQ. </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_rbp_itask_bp_en_reg_t
 *
 * Implemented by: 
 *      rbp_itask_bp_en
 */
 
typedef struct
{
     unsigned  int           rbp_itask_bp_en;
} ncp_nca_rbp_itask_bp_en_reg_t;

/*! @struct ncp_nca_rbp_itask_bp_incld_bsiz_reg_t
 *  @brief Receive Buffer Pool Input Task Backpressure Included Buffer Size
 *  @details Used in conjunction with rbp_itask_bp_en_reg. Selects buffer sizes to be included to generate backpressure.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_itask_bp_incld_bsiz_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_itask_bp_incld_bsiz </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit corresponds to a receive buffer pool size.
 *        At least one bit must be set for receive buffer pool
 *        NCA to TIL input task backpressure to be asserted
 *        for any iPCQ.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_rbp_itask_bp_incld_bsiz_reg_t
 *
 * Implemented by: 
 *      rbp_itask_bp_incld_bsiz
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      rbp_itask_bp_incld_bsiz                   :  4;
#else    /* Little Endian */
     unsigned      rbp_itask_bp_incld_bsiz                   :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_nca_rbp_itask_bp_incld_bsiz_reg_t;

/*! @struct ncp_nca_pio_lock_reg_t
 *  @brief NCA PIO Lock Register
 *  @details Provides a semaphore mechanism for multiprocessor sharing of the configuration interface in PIO mode.  Address bits 6:2 form the ID address which indicates the ID of the processor accessing this register.  A processor reads this register to acquire control.  Reading a 0 indicates that the processor has control, and the register bit selected by the ID address is set.  Reading other than zero means that the interface is not available.  The processor in control must write anything to its ID address to clear the register to allow control to pass to another processor.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pio_lock_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param proc_id </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Only one bit will ever be set at a time. Indicates
 *        ID of processor that has control of configuration
 *        interface.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_pio_lock_reg_t
 *
 * Implemented by: 
 *      nca_pio_lock
 */
 
typedef struct
{
     unsigned  int                   proc_id;
} ncp_nca_pio_lock_reg_t;

/*! @struct ncp_nca_otbp_bar_reg0_34xx_t
 *  @brief Output Task Backpressure Base Address Register0
 *  @details Upper 6 bits of address where output task backpressure is written into AXI memory.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otbp_bar_reg0_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_bar_upper </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output Task Backpressure Base Address UPPER BITS[37:32] </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_otbp_bar_reg0_34xx_t
 *
 * Implemented by: 
 *      otbp_bar_upper
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      otbp_bar_upper                            :  6;
#else    /* Little Endian */
     unsigned      otbp_bar_upper                            :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_otbp_bar_reg0_34xx_t;

/*! @struct ncp_nca_otbp_bar_reg1_34xx_t
 *  @brief Output Task Backpressure Base Address Register1
 *  @details Lower 32 bits of address where output task backpressure is written into AXI memory.  Bits 1:0 are don't care.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otbp_bar_reg1_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_bar_lower </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output Task Backpressure Base Address LOWER BITS[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_otbp_bar_reg1_34xx_t
 *
 * Implemented by: 
 *      otbp_bar_lower
 */
 
typedef struct
{
     unsigned  int            otbp_bar_lower;
} ncp_nca_otbp_bar_reg1_34xx_t;

/*! @struct ncp_nca_software_pgit_load_poke_reg_t
 *  @brief PGIT Software Load Poke Register
 *  @details CPU can write to this register to force the shortening of the delay (using delay_grp_load_timer register) for the current cycle of the timer for the PGIT to load CPU Indexes.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_software_pgit_load_poke_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param software_load_poke_grp </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Poke the PGIT CPU index load timers. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_software_pgit_load_poke_reg_t
 *
 * Implemented by: 
 *      pgit_software_load_poke_reg
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      software_load_poke_grp                    :  6;
#else    /* Little Endian */
     unsigned      software_load_poke_grp                    :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_software_pgit_load_poke_reg_t;

/*! @struct ncp_nca_software_pgit_load_poke_reg_55xx_t
 *  @brief PGIT Software Load Poke Register
 *  @details CPU can write to this register to force the shortening of the delay (using delay_grp_load_timer register) for the current cycle of the timer for the PGIT to load CPU Indexes.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_software_pgit_load_poke_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param software_load_poke_grp </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Poke the PGIT CPU index load timers. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_software_pgit_load_poke_reg_55xx_t
 *
 * Implemented by: 
 *      pgit_software_load_poke_reg
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      software_load_poke_grp                    : 16;
#else    /* Little Endian */
     unsigned      software_load_poke_grp                    : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_software_pgit_load_poke_reg_55xx_t;

/*! @struct ncp_nca_hw_load_poke_flags_reg_t
 *  @brief HW POINTER POKE FLAGS
 *  @details Flags for HW Pointer Load Poke events.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_load_poke_flags_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp5_load_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> hardware_grp5_load_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp4_load_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> hardware_grp4_load_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp3_load_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> hardware_grp3_load_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp2_load_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> hardware_grp2_load_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp1_load_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> hardware_grp1_load_flag </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp0_load_flag </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> hardware_grp0_load_flag </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_hw_load_poke_flags_reg_t
 *
 * Implemented by: 
 *      hw_load_poke_flags
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      hardware_grp5_load_flag                   :  1;
     unsigned      hardware_grp4_load_flag                   :  1;
     unsigned      hardware_grp3_load_flag                   :  1;
     unsigned      hardware_grp2_load_flag                   :  1;
     unsigned      hardware_grp1_load_flag                   :  1;
     unsigned      hardware_grp0_load_flag                   :  1;
#else    /* Little Endian */
     unsigned      hardware_grp0_load_flag                   :  1;
     unsigned      hardware_grp1_load_flag                   :  1;
     unsigned      hardware_grp2_load_flag                   :  1;
     unsigned      hardware_grp3_load_flag                   :  1;
     unsigned      hardware_grp4_load_flag                   :  1;
     unsigned      hardware_grp5_load_flag                   :  1;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_hw_load_poke_flags_reg_t;

/*! @struct ncp_nca_hw_load_poke_flags_reg_55xx_t
 *  @brief Hardware Load Poke Flags
 *  @details Flags that set during a hardware load poke.  NOT SUPPORTED FOR MISSION-MODE OPERATION.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_load_poke_flags_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_grp_load_flag </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Hardware group load poke flags. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_hw_load_poke_flags_reg_55xx_t
 *
 * Implemented by: 
 *      hw_load_poke_flags
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      hardware_grp_load_flag                    : 16;
#else    /* Little Endian */
     unsigned      hardware_grp_load_flag                    : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_hw_load_poke_flags_reg_55xx_t;

/*! @struct ncp_nca_overall_int_stat_reg_t
 *  @brief Overall Interrupt Status Register
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table and the grp_interrupt_enable_table are both set.  Any such pairing causes one of the nca_mpic interrupt pins to be asserted if enabled.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_overall_int_stat_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param non_grp_int_grp_int_reg_1_or_2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> At least one non-group interrupt status and enable
 *        bit pair = 'b11 in grp_interrupt_status/enable_table...status/en_r|1..2|
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> At least one group 5 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> At least one group 4 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> At least one group 3 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> At least one group 2 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> At least one group 1 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_int_grp_int_reg1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> At least one group 0 interrupt status and enable bit
 *        pair = 'b11 in grp_interrupt_status/enable_table...status/en_r1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_int_reg0_int </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> These bits correspond to the interrupt status and
 *        enable bit pairs in grp_interrupt_status/enable_table...status/en_r0.
 *        Each bit is set for every corresponding status and
 *        enable pair that = 'b11. These interrupts are service
 *        interrupts that indicate input task arrival, output
 *        task delivery, etc.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_overall_int_stat_reg_t
 *
 * Implemented by: 
 *      overall_int_stat
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      non_grp_int_grp_int_reg_1_or_2            :  1;
     unsigned      grp5_int_grp_int_reg1                     :  1;
     unsigned      grp4_int_grp_int_reg1                     :  1;
     unsigned      grp3_int_grp_int_reg1                     :  1;
     unsigned      grp2_int_grp_int_reg1                     :  1;
     unsigned      grp1_int_grp_int_reg1                     :  1;
     unsigned      grp0_int_grp_int_reg1                     :  1;
     unsigned      grp_int_reg0_int                          : 25;
#else    /* Little Endian */
     unsigned      grp_int_reg0_int                          : 25;
     unsigned      grp0_int_grp_int_reg1                     :  1;
     unsigned      grp1_int_grp_int_reg1                     :  1;
     unsigned      grp2_int_grp_int_reg1                     :  1;
     unsigned      grp3_int_grp_int_reg1                     :  1;
     unsigned      grp4_int_grp_int_reg1                     :  1;
     unsigned      grp5_int_grp_int_reg1                     :  1;
     unsigned      non_grp_int_grp_int_reg_1_or_2            :  1;
#endif
} ncp_nca_overall_int_stat_reg_t;

/*! @struct ncp_nca_mpic_ctrl_reg_t
 *  @brief MPIC Interrupt Control Register
 *  @details Provides control for the state of the NCA's 6 interrupt outputs that connect to the MPIC (microprocessor interrupt controller).
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpic_ctrl_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param sel </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Select. Maps the non group related interrupts to one
 *        of the 6 MPIC interrupt outputs. If this field is
 *        set to a value > 5, the interrupts are mapped to MPIC
 *        interrupt pin 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param int_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Interrupt Enable. Each bit enables the corresponding
 *        MPIC interrupt output.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_mpic_ctrl_reg_t
 *
 * Implemented by: 
 *      mpic_ctrl
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 21;
     unsigned      sel                                       :  3;
     unsigned      reserved1                                 :  2;
     unsigned      int_en                                    :  6;
#else    /* Little Endian */
     unsigned      int_en                                    :  6;
     unsigned      reserved1                                 :  2;
     unsigned      sel                                       :  3;
     unsigned      reserved0                                 : 21;
#endif
} ncp_nca_mpic_ctrl_reg_t;

/*! @struct ncp_nca_mpic_ctrl_reg_55xx_t
 *  @brief MPIC Interrupt Control Register
 *  @details Provides control for the state of the NCA's 17 interrupt outputs that connect to the MPIC (microprocessor interrupt controller).
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpic_ctrl_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hw_int_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Hardware Interrupt Enable. This bit enables the MPIC
 *        hardware interrupt output.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_int_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group Interrupt Enable. Each bit enables the corresponding
 *        MPIC group interrupt output.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpic_ctrl_reg_55xx_t
 *
 * Implemented by: 
 *      mpic_ctrl
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      hw_int_en                                 :  1;
     unsigned      grp_int_en                                : 16;
#else    /* Little Endian */
     unsigned      grp_int_en                                : 16;
     unsigned      hw_int_en                                 :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_mpic_ctrl_reg_55xx_t;

/*! @struct ncp_nca_status_reg0_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> configuration instruction complete interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived for group 5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived for group 4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived for group 3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived for group 2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived for group 1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived for group 0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 5
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 4
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 3
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 2
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 1
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 0
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 5
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 4
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 3
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 2
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 1
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 0
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Status
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_status_reg0_t
 *
 * Implemented by: 
 *      status_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_status_reg0_t;

/*! @struct ncp_nca_status_reg0_55xx_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> input tasks have arrived interrupt group15 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> input tasks have arrived interrupt group14 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> input tasks have arrived interrupt group13 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> input tasks have arrived interrupt group12 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> input tasks have arrived interrupt group11 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> input tasks have arrived interrupt group10 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> input tasks have arrived interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input tasks have arrived interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group15
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group14
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group13
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group12
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group11
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group10
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_status_reg0_55xx_t
 *
 * Implemented by: 
 *      status_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_arrival_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp15                   :  1;
#endif
} ncp_nca_status_reg0_55xx_t;

/*! @struct ncp_nca_en_reg0_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> configuration instruction complete interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived for group 5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived for group 4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived for group 3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived for group 2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived for group 1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived for group 0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_en_reg0_t
 *
 * Implemented by: 
 *      en_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_en_reg0_t;

/*! @struct ncp_nca_en_reg0_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> input tasks have arrived interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> input tasks have arrived interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> input tasks have arrived interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> input tasks have arrived interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> input tasks have arrived interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> input tasks have arrived interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> input tasks have arrived interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input tasks have arrived interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group15
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group14
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group13
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group12
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group11
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group10
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg0_55xx_t
 *
 * Implemented by: 
 *      en_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_arrival_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp15                   :  1;
#endif
} ncp_nca_en_reg0_55xx_t;

/*! @struct ncp_nca_force_reg0_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg0_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> configuration instruction complete interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived for group 5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived for group 4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived for group 3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived for group 2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived for group 1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived for group 0 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 5
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 4
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 3
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 2
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 1
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 0
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 5
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 4
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 3
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 2
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 1
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 0
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Force
 *   </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_force_reg0_t
 *
 * Implemented by: 
 *      frc_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_force_reg0_t;

/*! @struct ncp_nca_force_reg0_55xx_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> input tasks have arrived interrupt group15 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> input tasks have arrived interrupt group14 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> input tasks have arrived interrupt group13 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> input tasks have arrived interrupt group12 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> input tasks have arrived interrupt group11 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> input tasks have arrived interrupt group10 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> input tasks have arrived interrupt group9 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input tasks have arrived interrupt group8 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group15
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group14
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group13
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group12
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group11
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group10
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group9 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group8 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Force </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_force_reg0_55xx_t
 *
 * Implemented by: 
 *      frc_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_arrival_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp15                   :  1;
#endif
} ncp_nca_force_reg0_55xx_t;

/*! @struct ncp_nca_status_reg1_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration manager fifo error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_axi_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration manager read engine axi error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> output task data overflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_undeflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> output task data undeflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cnal access error interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cnal access error interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cnal access error interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cnal access error interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cnal access error interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cnal access error interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_status_reg1_t
 *
 * Implemented by: 
 *      status_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_status_reg1_t;

/*! @struct ncp_nca_status_reg1_55xx_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> configuration instruction complete interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 15
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 14
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 13
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 12
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 11
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 10
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 9
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 8
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 7
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 6
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Status
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_status_reg1_55xx_t
 *
 * Implemented by: 
 *      status_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_status_reg1_55xx_t;

/*! @struct ncp_nca_en_reg1_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration manager fifo error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_axi_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration manager read engine axi error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> output task data overflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_undeflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> output task data undeflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cnal access error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cnal access error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cnal access error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cnal access error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cnal access error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cnal access error interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_en_reg1_t
 *
 * Implemented by: 
 *      en_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_en_reg1_t;

/*! @struct ncp_nca_en_reg1_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> configuration instruction complete interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 15
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 14
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 13
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 12
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 11
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 10
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 9
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 8
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 7
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 6
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg1_55xx_t
 *
 * Implemented by: 
 *      en_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_en_reg1_55xx_t;

/*! @struct ncp_nca_force_reg1_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg1_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration manager fifo error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_axi_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration manager read engine axi error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> output task data overflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_undeflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> output task data undeflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cnal access error interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cnal access error interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cnal access error interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cnal access error interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cnal access error interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cnal access error interrupt group0 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Force </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_force_reg1_t
 *
 * Implemented by: 
 *      frc_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_force_reg1_t;

/*! @struct ncp_nca_force_reg1_55xx_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> configuration instruction complete interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 15
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 14
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 13
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 12
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 11
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 10
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 9
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 8
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 7
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 6
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Force
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_force_reg1_55xx_t
 *
 * Implemented by: 
 *      frc_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_force_reg1_55xx_t;

/*! @struct ncp_nca_status_reg2_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CMN fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> COW interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> statistics counters interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> task flow completion fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> receive buffer pool fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> PGIT fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> receive buffer pool ECC interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> task flow completion fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> receive buffer pool fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> itask data axi write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> iPCQ entry axi write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> PGIT upload nca axi write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> PGIT load nca axi read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT load cpu axi read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_entry_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> receive buffer pool drop interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tpcq axi read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> rpcq axi read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask axi read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq axi read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> eng_cnal_if interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> config ring error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otsd axi read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_axi_write_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_status_reg2_t
 *
 * Implemented by: 
 *      status_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      cpcq_axi_read_int                         :  1;
#else    /* Little Endian */
     unsigned      cpcq_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
#endif
} ncp_nca_status_reg2_t;

/*! @struct ncp_nca_status_reg2_55xx_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cnal access error interrupt group15 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cnal access error interrupt group14 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cnal access error interrupt group13 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> cnal access error interrupt group12 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cnal access error interrupt group11 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cnal access error interrupt group10 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> cnal access error interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cnal access error interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> cnal access error interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cnal access error interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> cnal access error interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> cnal access error interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cnal access error interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cnal access error interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cnal access error interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cnal access error interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration ring error interrupt group15 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration ring error interrupt group14 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> configuration ring error interrupt group13 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> configuration ring error interrupt group12 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> configuration ring error interrupt group11 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> configuration ring error interrupt group10 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> configuration ring error interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> configuration ring error interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> configuration ring error interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> configuration ring error interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_status_reg2_55xx_t
 *
 * Implemented by: 
 *      status_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      eng_cnal_if_int_grp15                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp15                     :  1;
#endif
} ncp_nca_status_reg2_55xx_t;

/*! @struct ncp_nca_en_reg2_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CMN fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> COW interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> statistics counters interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> task flow completion fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> receive buffer pool fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> PGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> receive buffer pool ECC interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> task flow completion fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> receive buffer pool fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> itask data axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> iPCQ entry axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> PGIT upload nca axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> PGIT load nca axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT load cpu axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_entry_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> receive buffer pool drop interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tpcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> rpcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> eng_cnal_if interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> config ring error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otsd axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_axi_write_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Enable </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_en_reg2_t
 *
 * Implemented by: 
 *      en_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      cpcq_axi_read_int                         :  1;
#else    /* Little Endian */
     unsigned      cpcq_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
#endif
} ncp_nca_en_reg2_t;

/*! @struct ncp_nca_en_reg2_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cnal access error interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cnal access error interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cnal access error interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> cnal access error interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cnal access error interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cnal access error interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> cnal access error interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cnal access error interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> cnal access error interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cnal access error interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> cnal access error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> cnal access error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cnal access error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cnal access error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cnal access error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cnal access error interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration ring error interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration ring error interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> configuration ring error interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> configuration ring error interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> configuration ring error interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> configuration ring error interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> configuration ring error interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> configuration ring error interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> configuration ring error interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> configuration ring error interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg2_55xx_t
 *
 * Implemented by: 
 *      en_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      eng_cnal_if_int_grp15                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp15                     :  1;
#endif
} ncp_nca_en_reg2_55xx_t;

/*! @struct ncp_nca_force_reg2_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg2_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CMN fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> COW interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> statistics counters interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> task flow completion fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> receive buffer pool fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> PGIT fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> receive buffer pool ECC interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> task flow completion fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> receive buffer pool fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> itask data axi write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> iPCQ entry axi write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> PGIT upload nca axi write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> PGIT load nca axi read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT load cpu axi read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_entry_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> receive buffer pool drop interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tpcq axi read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> rpcq axi read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask axi read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq axi read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> eng_cnal_if interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> config ring error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otsd axi read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_axi_write_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Force </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_force_reg2_t
 *
 * Implemented by: 
 *      frc_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      cpcq_axi_read_int                         :  1;
#else    /* Little Endian */
     unsigned      cpcq_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
#endif
} ncp_nca_force_reg2_t;

/*! @struct ncp_nca_force_reg2_55xx_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cnal access error interrupt group15 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cnal access error interrupt group14 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cnal access error interrupt group13 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> cnal access error interrupt group12 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cnal access error interrupt group11 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cnal access error interrupt group10 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> cnal access error interrupt group9 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cnal access error interrupt group8 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> cnal access error interrupt group7 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cnal access error interrupt group6 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> cnal access error interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> cnal access error interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cnal access error interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cnal access error interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cnal access error interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cnal access error interrupt group0 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration ring error interrupt group15 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration ring error interrupt group14 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> configuration ring error interrupt group13 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> configuration ring error interrupt group12 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> configuration ring error interrupt group11 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> configuration ring error interrupt group10 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> configuration ring error interrupt group9 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> configuration ring error interrupt group8 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> configuration ring error interrupt group7 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> configuration ring error interrupt group6 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Force </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_force_reg2_55xx_t
 *
 * Implemented by: 
 *      frc_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      eng_cnal_if_int_grp15                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp15                     :  1;
#endif
} ncp_nca_force_reg2_55xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg0_34xx_t
 *  @brief FIFO Full Empty Status Register0
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg0_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_rfifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cpcq_pgit_rfifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_wfifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cpcq_pgit_wfifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> pgit_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_req_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> pgit_reng_req_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_reng_req_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> pgit_reng_req_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_wdb_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> pgit_weng_wdb_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_wdb_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_weng_wdb_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_req_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> pgit_weng_req_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_weng_req_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_weng_req_fifo_empty_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg0_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      cpcq_rfifo_full_empty_pair                :  2;
     unsigned      cpcq_wfifo_full_empty_pair                :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair7       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair6       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair5       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair4       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair3       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair2       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair1       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair0       :  2;
     unsigned      pgit_reng_req_fifo_full                   :  1;
     unsigned      pgit_reng_req_fifo_empty                  :  1;
     unsigned      pgit_weng_wdb_fifo_full                   :  1;
     unsigned      pgit_weng_wdb_fifo_empty                  :  1;
     unsigned      pgit_weng_req_fifo_full                   :  1;
     unsigned      pgit_weng_req_fifo_empty                  :  1;
#else    /* Little Endian */
     unsigned      pgit_weng_req_fifo_empty                  :  1;
     unsigned      pgit_weng_req_fifo_full                   :  1;
     unsigned      pgit_weng_wdb_fifo_empty                  :  1;
     unsigned      pgit_weng_wdb_fifo_full                   :  1;
     unsigned      pgit_reng_req_fifo_empty                  :  1;
     unsigned      pgit_reng_req_fifo_full                   :  1;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair0       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair1       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair2       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair3       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair4       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair5       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair6       :  2;
     unsigned      pgit_reng_rbf_fifo_full_empty_pair7       :  2;
     unsigned      cpcq_wfifo_full_empty_pair                :  2;
     unsigned      cpcq_rfifo_full_empty_pair                :  2;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_awfifo_full_empty_status_reg0_34xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg1_34xx_t
 *  @brief FIFO Full Empty Status Register1
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg1_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> odb_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> odb_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> idb_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> idb_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_req_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cmn_weng_req_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_req_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cmn_weng_req_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_wdb_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cmn_weng_wdb_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_wdb_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cmn_weng_wdb_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> tcri_data_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tcri_data_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask_header_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask_header_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask_qid_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> itask_qid_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> itask_delete_tid_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> itask_delete_tid_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_pgitr_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> ipcq_pgitr_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_pgitr_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> ipcq_pgitr_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_pgitw_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> ipcq_pgitw_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_pgitw_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> ipcq_pgitw_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_weng_req_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> itask_weng_req_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_weng_req_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> itask_weng_req_fifo_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_weng_wdb_fifo_full </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> itask_weng_wdb_fifo_full_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_weng_wdb_fifo_empty </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> itask_weng_wdb_fifo_empty_status </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg1_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      odb_fifo_full                             :  1;
     unsigned      odb_fifo_empty                            :  1;
     unsigned      idb_fifo_full                             :  1;
     unsigned      idb_fifo_empty                            :  1;
     unsigned      cmn_weng_req_fifo_full                    :  1;
     unsigned      cmn_weng_req_fifo_empty                   :  1;
     unsigned      cmn_weng_wdb_fifo_full                    :  1;
     unsigned      cmn_weng_wdb_fifo_empty                   :  1;
     unsigned      tcri_data_fifo_full                       :  1;
     unsigned      tcri_data_fifo_empty                      :  1;
     unsigned      itask_header_fifo_full                    :  1;
     unsigned      itask_header_fifo_empty                   :  1;
     unsigned      itask_qid_fifo_full                       :  1;
     unsigned      itask_qid_fifo_empty                      :  1;
     unsigned      itask_delete_tid_fifo_full                :  1;
     unsigned      itask_delete_tid_fifo_empty               :  1;
     unsigned      ipcq_pgitr_fifo_full                      :  1;
     unsigned      ipcq_pgitr_fifo_empty                     :  1;
     unsigned      ipcq_pgitw_fifo_full                      :  1;
     unsigned      ipcq_pgitw_fifo_empty                     :  1;
     unsigned      itask_weng_req_fifo_full                  :  1;
     unsigned      itask_weng_req_fifo_empty                 :  1;
     unsigned      itask_weng_wdb_fifo_full                  :  1;
     unsigned      itask_weng_wdb_fifo_empty                 :  1;
#else    /* Little Endian */
     unsigned      itask_weng_wdb_fifo_empty                 :  1;
     unsigned      itask_weng_wdb_fifo_full                  :  1;
     unsigned      itask_weng_req_fifo_empty                 :  1;
     unsigned      itask_weng_req_fifo_full                  :  1;
     unsigned      ipcq_pgitw_fifo_empty                     :  1;
     unsigned      ipcq_pgitw_fifo_full                      :  1;
     unsigned      ipcq_pgitr_fifo_empty                     :  1;
     unsigned      ipcq_pgitr_fifo_full                      :  1;
     unsigned      itask_delete_tid_fifo_empty               :  1;
     unsigned      itask_delete_tid_fifo_full                :  1;
     unsigned      itask_qid_fifo_empty                      :  1;
     unsigned      itask_qid_fifo_full                       :  1;
     unsigned      itask_header_fifo_empty                   :  1;
     unsigned      itask_header_fifo_full                    :  1;
     unsigned      tcri_data_fifo_empty                      :  1;
     unsigned      tcri_data_fifo_full                       :  1;
     unsigned      cmn_weng_wdb_fifo_empty                   :  1;
     unsigned      cmn_weng_wdb_fifo_full                    :  1;
     unsigned      cmn_weng_req_fifo_empty                   :  1;
     unsigned      cmn_weng_req_fifo_full                    :  1;
     unsigned      idb_fifo_empty                            :  1;
     unsigned      idb_fifo_full                             :  1;
     unsigned      odb_fifo_empty                            :  1;
     unsigned      odb_fifo_full                             :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_awfifo_full_empty_status_reg1_34xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg2_34xx_t
 *  @brief FIFO Full Empty Status Register2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg2_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rpcq_pgitr_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> rpcq_pgitw_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> rbp_reng_req_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> rbp_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg2_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 10;
     unsigned      rpcq_pgitr_fifo_full_empty_pair           :  2;
     unsigned      rpcq_pgitw_fifo_full_empty_pair           :  2;
     unsigned      rbp_reng_req_fifo_full_empty_pair         :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair7        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair6        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair5        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair4        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair3        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair2        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair1        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair0        :  2;
#else    /* Little Endian */
     unsigned      rbp_reng_rbf_fifo_full_empty_pair0        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair1        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair2        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair3        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair4        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair5        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair6        :  2;
     unsigned      rbp_reng_rbf_fifo_full_empty_pair7        :  2;
     unsigned      rbp_reng_req_fifo_full_empty_pair         :  2;
     unsigned      rpcq_pgitw_fifo_full_empty_pair           :  2;
     unsigned      rpcq_pgitr_fifo_full_empty_pair           :  2;
     unsigned      reserved0                                 : 10;
#endif
} ncp_nca_awfifo_full_empty_status_reg2_34xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg3_34xx_t
 *  @brief FIFO Full Empty Status Register3
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg3_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> otask_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg3_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otask_reng_rbf_fifo_full_empty_pair7      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair6      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair5      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair4      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair3      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair2      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair1      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair0      :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair7       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair6       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair5       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair4       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair3       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair2       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair1       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair0       :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_rbf_fifo_full_empty_pair0       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair1       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair2       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair3       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair4       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair5       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair6       :  2;
     unsigned      opcq_reng_rbf_fifo_full_empty_pair7       :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair0      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair1      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair2      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair3      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair4      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair5      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair6      :  2;
     unsigned      otask_reng_rbf_fifo_full_empty_pair7      :  2;
#endif
} ncp_nca_awfifo_full_empty_status_reg3_34xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg4_34xx_t
 *  @brief FIFO Full Empty Status Register4
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg4_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> otsd_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> otsd_reng_req_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_entry_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_index_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_update_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> opcq_index_update_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> opcq_pgitr_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq_pgitw_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otask_reng_req_fifo_full_empty_status_pair </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> opcq_reng_req_fifo_full_empty_status_pair </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg4_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg4
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otsd_reng_rbf_fifo_full_empty_pair7       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair6       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair5       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair4       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair3       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair2       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair1       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair0       :  2;
     unsigned      otsd_reng_req_fifo_full_empty_pair        :  2;
     unsigned      opcq_entry_fifo_full_empty_pair           :  2;
     unsigned      opcq_index_fifo_full_empty_pair           :  2;
     unsigned      opcq_index_update_fifo_full_empty_pair    :  2;
     unsigned      opcq_pgitr_fifo_full_empty_pair           :  2;
     unsigned      opcq_pgitw_fifo_full_empty_pair           :  2;
     unsigned      otask_reng_req_fifo_full_empty_pair       :  2;
     unsigned      opcq_reng_req_fifo_full_empty_pair        :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_req_fifo_full_empty_pair        :  2;
     unsigned      otask_reng_req_fifo_full_empty_pair       :  2;
     unsigned      opcq_pgitw_fifo_full_empty_pair           :  2;
     unsigned      opcq_pgitr_fifo_full_empty_pair           :  2;
     unsigned      opcq_index_update_fifo_full_empty_pair    :  2;
     unsigned      opcq_index_fifo_full_empty_pair           :  2;
     unsigned      opcq_entry_fifo_full_empty_pair           :  2;
     unsigned      otsd_reng_req_fifo_full_empty_pair        :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair0       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair1       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair2       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair3       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair4       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair5       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair6       :  2;
     unsigned      otsd_reng_rbf_fifo_full_empty_pair7       :  2;
#endif
} ncp_nca_awfifo_full_empty_status_reg4_34xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg5_34xx_t
 *  @brief FIFO Full Empty Status Register5
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg5_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> tpcq_pgitr_fifo_full_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> tpcq_pgitw_fifo_full_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> tfc_reng_req_fifo_full_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair7 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair6 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair5 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> tfc_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg5_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg5
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 10;
     unsigned      tpcq_pgitr_fifo_full_empty_pair           :  2;
     unsigned      tpcq_pgitw_fifo_full_empty_pair           :  2;
     unsigned      tfc_reng_req_fifo_full_empty_pair         :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair7        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair6        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair5        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair4        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair3        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair2        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair1        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair0        :  2;
#else    /* Little Endian */
     unsigned      tfc_reng_rbf_fifo_full_empty_pair0        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair1        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair2        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair3        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair4        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair5        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair6        :  2;
     unsigned      tfc_reng_rbf_fifo_full_empty_pair7        :  2;
     unsigned      tfc_reng_req_fifo_full_empty_pair         :  2;
     unsigned      tpcq_pgitw_fifo_full_empty_pair           :  2;
     unsigned      tpcq_pgitr_fifo_full_empty_pair           :  2;
     unsigned      reserved0                                 : 10;
#endif
} ncp_nca_awfifo_full_empty_status_reg5_34xx_t;

/*! @struct ncp_nca_awfifo_full_empty_status_reg6_34xx_t
 *  @brief FIFO Full Empty Status Register6
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_awfifo_full_empty_status_reg6_34xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_cfg_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cmn_cfg_req_fifo_full_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cmn_reng_req_fifo_full_empty_status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_rbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cmn_reng_rbf_fifo_full_empty_status_pair1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_rbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cmn_reng_rbf_fifo_full_empty_status_pair0 </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx --> ncp_nca_awfifo_full_empty_status_reg6_34xx_t
 *
 * Implemented by: 
 *      fifo_full_empty_status_reg6
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      cmn_cfg_req_fifo_full_empty_pair          :  2;
     unsigned      reserved1                                 :  9;
     unsigned      cmn_reng_req_fifo_full_empty_pair         :  2;
     unsigned      reserved2                                 : 12;
     unsigned      cmn_reng_rbf_fifo_full_empty_pair1        :  2;
     unsigned      cmn_reng_rbf_fifo_full_empty_pair0        :  2;
#else    /* Little Endian */
     unsigned      cmn_reng_rbf_fifo_full_empty_pair0        :  2;
     unsigned      cmn_reng_rbf_fifo_full_empty_pair1        :  2;
     unsigned      reserved2                                 : 12;
     unsigned      cmn_reng_req_fifo_full_empty_pair         :  2;
     unsigned      reserved1                                 :  9;
     unsigned      cmn_cfg_req_fifo_full_empty_pair          :  2;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_awfifo_full_empty_status_reg6_34xx_t;

/*! @struct ncp_nca_tfc_unordered_mode_reg_t
 *  @brief Task Flow Completion Unordered Mode Register
 *  @details Enables task flow completion to operate in unordered mode.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_tfc_unordered_mode_reg_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_unordered_mode_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Task flow completion unordered mode enable. </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_tfc_unordered_mode_reg_t
 *
 * Implemented by: 
 *      tfc_unordered_mode
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      tfc_unordered_mode_en                     :  1;
#else    /* Little Endian */
     unsigned      tfc_unordered_mode_en                     :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_nca_tfc_unordered_mode_reg_t;

/*! @struct ncp_nca_AW_smon01_nca_task_smon_r_t
 *  @brief AW_smon CONTROL1 register
 *  @details This is used to configure the operation of the 2 internal counters in the SMON
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_AW_smon01_nca_task_smon_r_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> select input signal for SMON1 engine </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mode0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> select input signal for SMON0 engine </td>
 * </tr>
 * </table>
 * Applies to: 34xx 32xx 25xx 55xx --> ncp_nca_AW_smon01_nca_task_smon_r_t
 *
 * Implemented by: 
 *      AW_SMON01_nca_task_smon
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      mode1                                     :  8;
     unsigned      mode0                                     :  8;
#else    /* Little Endian */
     unsigned      mode0                                     :  8;
     unsigned      mode1                                     :  8;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_AW_smon01_nca_task_smon_r_t;

/*! @struct ncp_nca_config_init_woclr_reg_25xx_t
 *  @brief NCA Config and Initialization Parameters
 *  @details This is an alias of the config_init register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_woclr_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask to make the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cfg_ring_ack_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_compl_cnt_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> tfc_completion_count_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_flush </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> tfc_flush </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cpcq_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> otask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> itask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> tfc_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> rbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rbp_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to axi memory at the address defined by otbp_bar_upper
 *        and otbp_bar_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_exec_disable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cpcq execution disable bit : NOTE: This bit is supposed
 *        to be used sparingly (for debugging etc.) to temporarily
 *        halt the execution from cfg request fifo of the cpcq
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_cons_ent </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_consecutive_entries_per_queue_to_send </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ipcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_w_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_r_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_config_init_woclr_reg_25xx_t
 *
 * Implemented by: 
 *      config_init_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare                                     :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      opcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      opcq_num_beat                             :  2;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare                                     :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_config_init_woclr_reg_25xx_t;

/*! @struct ncp_nca_config_init_woclr_reg_55xx_t
 *  @brief NCA Configuration and Initialization Control
 *  @details This is an alias of the config_init register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_woclr_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param spare6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask that makes the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Configuration ring acknowledge timer enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cPCQ processing enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task accumulator enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Input task accumulator enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task backpressure soft reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpbf_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> MME pool buffer FIFO enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to memory at the address defined by otbp_vi_upper
 *        and otbp_vi_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_exec_disable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cpcq execution disable bit : NOTE: This bit is supposed
 *        to be used sparingly (for debugging etc.) to temporarily
 *        halt the execution from cfg request fifo of the cpcq
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_ent_per_req_m1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ number of entries per request minus 1. Sets the
 *        maximum number of oPCQ entries to be fetched per request
 *        to the oPCQ entry read engine. (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> output task acumulator memory access number of beats
 *        per burst:00:1,01:2,1X:4
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> input task acumulator memory access number of beats
 *        per burst:00:1,01:2,1X:4
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> NCA pgit memory write access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCA pgit memory read access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_config_init_woclr_reg_55xx_t
 *
 * Implemented by: 
 *      config_init_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare6                                    :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      spare5                                    :  2;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      spare4                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare3                                    :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare2                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare1                                    :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      ita_num_beat                              :  2;
     unsigned      spare0                                    :  4;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      spare0                                    :  4;
     unsigned      ita_num_beat                              :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      spare1                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare2                                    :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      spare3                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare4                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      spare5                                    :  2;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      spare6                                    :  1;
#endif
} ncp_nca_config_init_woclr_reg_55xx_t;

/*! @struct ncp_nca_config_init_woset_reg_25xx_t
 *  @brief NCA Config and Initialization Parameters
 *  @details This is an alias of the config_init register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_woset_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask to make the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cfg_ring_ack_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_compl_cnt_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> tfc_completion_count_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_flush </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> tfc_flush </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cpcq_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> otask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> itask_accum_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> tfc_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> otbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> rbp_soft_reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> rbp_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to axi memory at the address defined by otbp_bar_upper
 *        and otbp_bar_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_exec_disable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cpcq execution disable bit : NOTE: This bit is supposed
 *        to be used sparingly (for debugging etc.) to temporarily
 *        halt the execution from cfg request fifo of the cpcq
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_cons_ent </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> opcq_consecutive_entries_per_queue_to_send </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> opcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ipcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> rpcq_entry_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> pgit_w_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> pgit_r_num_beats_per_burst:00:1,01:2,10:4,11:8 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_config_init_woset_reg_25xx_t
 *
 * Implemented by: 
 *      config_init_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare                                     :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      opcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      rpcq_num_beat                             :  2;
     unsigned      tpcq_num_beat                             :  2;
     unsigned      ipcq_num_beat                             :  2;
     unsigned      opcq_num_beat                             :  2;
     unsigned      opcq_cons_ent                             :  4;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare                                     :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      rbp_en                                    :  1;
     unsigned      rbp_soft_reset                            :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      tfc_en                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      tfc_flush                                 :  1;
     unsigned      tfc_compl_cnt_reset                       :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_config_init_woset_reg_25xx_t;

/*! @struct ncp_nca_config_init_woset_reg_55xx_t
 *  @brief NCA Configuration and Initialization Control
 *  @details This is an alias of the config_init register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_config_init_woset_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param spare6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_end_data_fill_off </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Turn off filling of dummy data on last quadword of
 *        an itask that makes the last write 16 bytes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_ack_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Configuration ring acknowledge timer enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cPCQ processing enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task accumulator enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_accum_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Input task accumulator enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_soft_reset </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task backpressure soft reset </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpbf_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> MME pool buffer FIFO enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_ext_mem_wen </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Output task backpressure external memory write enable.
 *        Turning this bit on immediatly causes a write of otask_opcq_bp
 *        to memory at the address defined by otbp_vi_upper
 *        and otbp_vi_lower. Subsequent writes will occur any
 *        time the state of otask_opcq_bp changes.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_exec_disable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cpcq execution disable bit : NOTE: This bit is supposed
 *        to be used sparingly (for debugging etc.) to temporarily
 *        halt the execution from cfg request fifo of the cpcq
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_num_ent_per_req_m1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ number of entries per request minus 1. Sets the
 *        maximum number of oPCQ entries to be fetched per request
 *        to the oPCQ entry read engine. (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> output task acumulator memory access number of beats
 *        per burst:00:1,01:2,1X:4
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> input task acumulator memory access number of beats
 *        per burst:00:1,01:2,1X:4
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_w_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> NCA pgit memory write access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_r_num_beat </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NCA pgit memory read access number of beats per burst:00:1,01:2,1X:4 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_config_init_woset_reg_55xx_t
 *
 * Implemented by: 
 *      config_init_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      spare6                                    :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      spare5                                    :  2;
     unsigned      cpcq_en                                   :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      spare4                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare3                                    :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      spare2                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare1                                    :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      ita_num_beat                              :  2;
     unsigned      spare0                                    :  4;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      pgit_r_num_beat                           :  2;
#else    /* Little Endian */
     unsigned      pgit_r_num_beat                           :  2;
     unsigned      pgit_w_num_beat                           :  2;
     unsigned      spare0                                    :  4;
     unsigned      ita_num_beat                              :  2;
     unsigned      ota_num_beat                              :  2;
     unsigned      opcq_num_ent_per_req_m1                   :  2;
     unsigned      spare1                                    :  2;
     unsigned      cpcq_exec_disable                         :  1;
     unsigned      spare2                                    :  2;
     unsigned      otbp_ext_mem_wen                          :  1;
     unsigned      mpbf_en                                   :  1;
     unsigned      spare3                                    :  1;
     unsigned      otbp_soft_reset                           :  1;
     unsigned      spare4                                    :  1;
     unsigned      itask_accum_en                            :  1;
     unsigned      otask_accum_en                            :  1;
     unsigned      cpcq_en                                   :  1;
     unsigned      spare5                                    :  2;
     unsigned      cfg_ring_ack_timer_en                     :  1;
     unsigned      itask_end_data_fill_off                   :  1;
     unsigned      spare6                                    :  1;
#endif
} ncp_nca_config_init_woset_reg_55xx_t;

/*! @struct ncp_nca_pgit_load_grp_indexes_woset_reg_25xx_t
 *  @brief PGIT Load NCA and CPU Indexes Register
 *  @details This is an alias of the pgit_load_grp_indexes register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pgit_load_grp_indexes_woset_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param load_nca_index_grp </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> load_nca_indexes </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param load_cpu_index_grp </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> load_cpu_indexes </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_pgit_load_grp_indexes_woset_reg_25xx_t
 *
 * Implemented by: 
 *      pgit_load_grp_indexes_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 10;
     unsigned      load_nca_index_grp                        :  6;
     unsigned      reserved1                                 : 10;
     unsigned      load_cpu_index_grp                        :  6;
#else    /* Little Endian */
     unsigned      load_cpu_index_grp                        :  6;
     unsigned      reserved1                                 : 10;
     unsigned      load_nca_index_grp                        :  6;
     unsigned      reserved0                                 : 10;
#endif
} ncp_nca_pgit_load_grp_indexes_woset_reg_25xx_t;

/*! @struct ncp_nca_otask_grp_cnt_compare_reg_25xx_t
 *  @brief Output Task Group Count Compare Register
 *  @details This register defines a count value for output tasks processed for a given group that will trigger a poke to the PGIT upload and load timers.  The poke is disabled when the count is set to zero.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otask_grp_cnt_compare_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_cmp_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> This field is compared to an internal counter that
 *        tracks the number of otasks processed to determine
 *        when to do a poke of the PGIT load and upload timers.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_otask_grp_cnt_compare_reg_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 24;
     unsigned      cnt_cmp_value                             :  8;
#else    /* Little Endian */
     unsigned      cnt_cmp_value                             :  8;
     unsigned      reserved0                                 : 24;
#endif
} ncp_nca_otask_grp_cnt_compare_reg_25xx_t;

/*! @struct ncp_nca_hw_poke_and_timer_enable_reg_woclr_25xx_t
 *  @brief Software Enable switches for Pointer Write and Read Pokes
 *  @details This is an alias of the hw_poke_and_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_and_timer_enable_reg_woclr_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_load_poke_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> hardware_load_poke_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_upload_poke_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> hardware_upload_poke_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> grp5_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> grp4_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> grp3_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> grp2_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> grp1_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> grp0_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> grp5_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> grp4_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> grp3_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> grp2_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> grp1_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> grp0_upload_timer_en </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_hw_poke_and_timer_enable_reg_woclr_25xx_t
 *
 * Implemented by: 
 *      hw_poke_and_timer_enable_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  2;
     unsigned      hardware_load_poke_en                     :  6;
     unsigned      reserved1                                 :  2;
     unsigned      hardware_upload_poke_en                   :  6;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      tpcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      grp5_load_timer_en                        :  1;
     unsigned      grp4_load_timer_en                        :  1;
     unsigned      grp3_load_timer_en                        :  1;
     unsigned      grp2_load_timer_en                        :  1;
     unsigned      grp1_load_timer_en                        :  1;
     unsigned      grp0_load_timer_en                        :  1;
     unsigned      grp5_upload_timer_en                      :  1;
     unsigned      grp4_upload_timer_en                      :  1;
     unsigned      grp3_upload_timer_en                      :  1;
     unsigned      grp2_upload_timer_en                      :  1;
     unsigned      grp1_upload_timer_en                      :  1;
     unsigned      grp0_upload_timer_en                      :  1;
#else    /* Little Endian */
     unsigned      grp0_upload_timer_en                      :  1;
     unsigned      grp1_upload_timer_en                      :  1;
     unsigned      grp2_upload_timer_en                      :  1;
     unsigned      grp3_upload_timer_en                      :  1;
     unsigned      grp4_upload_timer_en                      :  1;
     unsigned      grp5_upload_timer_en                      :  1;
     unsigned      grp0_load_timer_en                        :  1;
     unsigned      grp1_load_timer_en                        :  1;
     unsigned      grp2_load_timer_en                        :  1;
     unsigned      grp3_load_timer_en                        :  1;
     unsigned      grp4_load_timer_en                        :  1;
     unsigned      grp5_load_timer_en                        :  1;
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      tpcq_poke_enable                          :  1;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      hardware_upload_poke_en                   :  6;
     unsigned      reserved1                                 :  2;
     unsigned      hardware_load_poke_en                     :  6;
     unsigned      reserved0                                 :  2;
#endif
} ncp_nca_hw_poke_and_timer_enable_reg_woclr_25xx_t;

/*! @struct ncp_nca_hw_poke_and_timer_enable_reg_woclr_55xx_t
 *  @brief Hardware Poke and Timer Enable Write One to Clear
 *  @details This is an alias of the hw_poke_and_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_and_timer_enable_reg_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_hw_poke_and_timer_enable_reg_woclr_55xx_t
 *
 * Implemented by: 
 *      hw_poke_and_timer_enable_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
#else    /* Little Endian */
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      reserved0                                 : 29;
#endif
} ncp_nca_hw_poke_and_timer_enable_reg_woclr_55xx_t;

/*! @struct ncp_nca_hw_poke_and_timer_enable_reg_woset_25xx_t
 *  @brief Software Enable switches for Pointer Write and Read Pokes
 *  @details This is an alias of the hw_poke_and_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_and_timer_enable_reg_woset_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_load_poke_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> hardware_load_poke_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hardware_upload_poke_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> hardware_upload_poke_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> tpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> grp5_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> grp4_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> grp3_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> grp2_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> grp1_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_load_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> grp0_load_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp5_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> grp5_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp4_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> grp4_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp3_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> grp3_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp2_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> grp2_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp1_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> grp1_upload_timer_en </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp0_upload_timer_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> grp0_upload_timer_en </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_hw_poke_and_timer_enable_reg_woset_25xx_t
 *
 * Implemented by: 
 *      hw_poke_and_timer_enable_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  2;
     unsigned      hardware_load_poke_en                     :  6;
     unsigned      reserved1                                 :  2;
     unsigned      hardware_upload_poke_en                   :  6;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      tpcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      grp5_load_timer_en                        :  1;
     unsigned      grp4_load_timer_en                        :  1;
     unsigned      grp3_load_timer_en                        :  1;
     unsigned      grp2_load_timer_en                        :  1;
     unsigned      grp1_load_timer_en                        :  1;
     unsigned      grp0_load_timer_en                        :  1;
     unsigned      grp5_upload_timer_en                      :  1;
     unsigned      grp4_upload_timer_en                      :  1;
     unsigned      grp3_upload_timer_en                      :  1;
     unsigned      grp2_upload_timer_en                      :  1;
     unsigned      grp1_upload_timer_en                      :  1;
     unsigned      grp0_upload_timer_en                      :  1;
#else    /* Little Endian */
     unsigned      grp0_upload_timer_en                      :  1;
     unsigned      grp1_upload_timer_en                      :  1;
     unsigned      grp2_upload_timer_en                      :  1;
     unsigned      grp3_upload_timer_en                      :  1;
     unsigned      grp4_upload_timer_en                      :  1;
     unsigned      grp5_upload_timer_en                      :  1;
     unsigned      grp0_load_timer_en                        :  1;
     unsigned      grp1_load_timer_en                        :  1;
     unsigned      grp2_load_timer_en                        :  1;
     unsigned      grp3_load_timer_en                        :  1;
     unsigned      grp4_load_timer_en                        :  1;
     unsigned      grp5_load_timer_en                        :  1;
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      tpcq_poke_enable                          :  1;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      hardware_upload_poke_en                   :  6;
     unsigned      reserved1                                 :  2;
     unsigned      hardware_load_poke_en                     :  6;
     unsigned      reserved0                                 :  2;
#endif
} ncp_nca_hw_poke_and_timer_enable_reg_woset_25xx_t;

/*! @struct ncp_nca_hw_poke_and_timer_enable_reg_woset_55xx_t
 *  @brief Hardware Poke and Timer Enable Write One to Set
 *  @details This is an alias of the hw_poke_and_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_hw_poke_and_timer_enable_reg_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 29 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cpcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> opcq_poke_enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_poke_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> ipcq_poke_enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_hw_poke_and_timer_enable_reg_woset_55xx_t
 *
 * Implemented by: 
 *      hw_poke_and_timer_enable_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 29;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      ipcq_poke_enable                          :  1;
#else    /* Little Endian */
     unsigned      ipcq_poke_enable                          :  1;
     unsigned      opcq_poke_enable                          :  1;
     unsigned      cpcq_poke_enable                          :  1;
     unsigned      reserved0                                 : 29;
#endif
} ncp_nca_hw_poke_and_timer_enable_reg_woset_55xx_t;

/*! @struct ncp_nca_pio_lock_cown_reg_25xx_t
 *  @brief NCA PIO Lock Current Owner Register
 *  @details This register provides the ability to read the nca_pio_lock register without engaging the semaphore mechanism.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_pio_lock_cown_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param proc_id </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Only one bit will ever be set at a time. Indicates
 *        ID of processor that has control of configuration
 *        interface.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_pio_lock_cown_reg_25xx_t
 *
 * Implemented by: 
 *      nca_pio_lock_cown
 */
 
typedef struct
{
     unsigned  int                   proc_id;
} ncp_nca_pio_lock_cown_reg_25xx_t;

/*! @struct ncp_nca_software_pgit_load_poke_woset_reg_25xx_t
 *  @brief PGIT Software Load Poke Register
 *  @details This is an alias of the pgit_software_load_poke_reg register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_software_pgit_load_poke_woset_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param software_load_poke_grp </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Poke the PGIT CPU index load timers. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_software_pgit_load_poke_woset_reg_25xx_t
 *
 * Implemented by: 
 *      pgit_software_load_poke_reg_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      software_load_poke_grp                    :  6;
#else    /* Little Endian */
     unsigned      software_load_poke_grp                    :  6;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_software_pgit_load_poke_woset_reg_25xx_t;

/*! @struct ncp_nca_software_pgit_load_poke_woset_reg_55xx_t
 *  @brief PGIT Software Load Poke Register
 *  @details This is an alias of the pgit_software_load_poke_reg register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_software_pgit_load_poke_woset_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param software_load_poke_grp </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Poke the PGIT CPU index load timers. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_software_pgit_load_poke_woset_reg_55xx_t
 *
 * Implemented by: 
 *      pgit_software_load_poke_reg_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      software_load_poke_grp                    : 16;
#else    /* Little Endian */
     unsigned      software_load_poke_grp                    : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_software_pgit_load_poke_woset_reg_55xx_t;

/*! @struct ncp_nca_mpic_ctrl_reg_woclr_25xx_t
 *  @brief MPIC Interrupt Control Register
 *  @details This is an alias of the mpic_ctrl register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpic_ctrl_reg_woclr_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param sel </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Select. Maps the non group related interrupts to one
 *        of the 6 MPIC interrupt outputs. If this field is
 *        set to a value > 5, the interrupts are mapped to MPIC
 *        interrupt pin 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param int_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Interrupt Enable. Each bit enables the corresponding
 *        MPIC interrupt output.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_mpic_ctrl_reg_woclr_25xx_t
 *
 * Implemented by: 
 *      mpic_ctrl_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 21;
     unsigned      sel                                       :  3;
     unsigned      reserved1                                 :  2;
     unsigned      int_en                                    :  6;
#else    /* Little Endian */
     unsigned      int_en                                    :  6;
     unsigned      reserved1                                 :  2;
     unsigned      sel                                       :  3;
     unsigned      reserved0                                 : 21;
#endif
} ncp_nca_mpic_ctrl_reg_woclr_25xx_t;

/*! @struct ncp_nca_mpic_ctrl_reg_woclr_55xx_t
 *  @brief MPIC Interrupt Control Register
 *  @details This is an alias of the mpic_ctrl register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpic_ctrl_reg_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hw_int_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Hardware Interrupt Enable. This bit enables the MPIC
 *        hardware interrupt output.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_int_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group Interrupt Enable. Each bit enables the corresponding
 *        MPIC group interrupt output.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpic_ctrl_reg_woclr_55xx_t
 *
 * Implemented by: 
 *      mpic_ctrl_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      hw_int_en                                 :  1;
     unsigned      grp_int_en                                : 16;
#else    /* Little Endian */
     unsigned      grp_int_en                                : 16;
     unsigned      hw_int_en                                 :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_mpic_ctrl_reg_woclr_55xx_t;

/*! @struct ncp_nca_mpic_ctrl_reg_woset_25xx_t
 *  @brief MPIC Interrupt Control Register
 *  @details This is an alias of the mpic_ctrl register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpic_ctrl_reg_woset_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 21 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param sel </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Select. Maps the non group related interrupts to one
 *        of the 6 MPIC interrupt outputs. If this field is
 *        set to a value > 5, the interrupts are mapped to MPIC
 *        interrupt pin 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param int_en </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Interrupt Enable. Each bit enables the corresponding
 *        MPIC interrupt output.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_mpic_ctrl_reg_woset_25xx_t
 *
 * Implemented by: 
 *      mpic_ctrl_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 21;
     unsigned      sel                                       :  3;
     unsigned      reserved1                                 :  2;
     unsigned      int_en                                    :  6;
#else    /* Little Endian */
     unsigned      int_en                                    :  6;
     unsigned      reserved1                                 :  2;
     unsigned      sel                                       :  3;
     unsigned      reserved0                                 : 21;
#endif
} ncp_nca_mpic_ctrl_reg_woset_25xx_t;

/*! @struct ncp_nca_mpic_ctrl_reg_woset_55xx_t
 *  @brief MPIC Interrupt Control Register
 *  @details This is an alias of the mpic_ctrl register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpic_ctrl_reg_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hw_int_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Hardware Interrupt Enable. This bit enables the MPIC
 *        hardware interrupt output.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_int_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Group Interrupt Enable. Each bit enables the corresponding
 *        MPIC group interrupt output.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpic_ctrl_reg_woset_55xx_t
 *
 * Implemented by: 
 *      mpic_ctrl_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      hw_int_en                                 :  1;
     unsigned      grp_int_en                                : 16;
#else    /* Little Endian */
     unsigned      grp_int_en                                : 16;
     unsigned      hw_int_en                                 :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_mpic_ctrl_reg_woset_55xx_t;

/*! @struct ncp_nca_en_reg0_woclr_25xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r0 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg0_woclr_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> configuration instruction complete interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived for group 5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived for group 4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived for group 3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived for group 2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived for group 1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived for group 0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_en_reg0_woclr_25xx_t
 *
 * Implemented by: 
 *      en_r0_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_en_reg0_woclr_25xx_t;

/*! @struct ncp_nca_en_reg0_woclr_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r0 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg0_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> input tasks have arrived interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> input tasks have arrived interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> input tasks have arrived interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> input tasks have arrived interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> input tasks have arrived interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> input tasks have arrived interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> input tasks have arrived interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input tasks have arrived interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group15
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group14
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group13
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group12
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group11
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group10
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg0_woclr_55xx_t
 *
 * Implemented by: 
 *      en_r0_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_arrival_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp15                   :  1;
#endif
} ncp_nca_en_reg0_woclr_55xx_t;

/*! @struct ncp_nca_en_reg0_woset_25xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r0 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg0_woset_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> configuration instruction complete interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived for group 5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived for group 4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived for group 3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived for group 2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived for group 1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived for group 0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> tPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_en_reg0_woset_25xx_t
 *
 * Implemented by: 
 *      en_r0_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      tpcq_complete_int_grp0                    :  1;
     unsigned      tpcq_complete_int_grp1                    :  1;
     unsigned      tpcq_complete_int_grp2                    :  1;
     unsigned      tpcq_complete_int_grp3                    :  1;
     unsigned      tpcq_complete_int_grp4                    :  1;
     unsigned      tpcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_en_reg0_woset_25xx_t;

/*! @struct ncp_nca_en_reg0_woset_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r0 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg0_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> input tasks have arrived interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> input tasks have arrived interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> input tasks have arrived interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> input tasks have arrived interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> input tasks have arrived interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> input tasks have arrived interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> input tasks have arrived interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input tasks have arrived interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group15
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group14
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group13
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group12
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group11
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group10
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg0_woset_55xx_t
 *
 * Implemented by: 
 *      en_r0_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_arrival_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp15                   :  1;
#endif
} ncp_nca_en_reg0_woset_55xx_t;

/*! @struct ncp_nca_en_reg1_woclr_25xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r1 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg1_woclr_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration manager fifo error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_axi_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration manager read engine axi error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> output task data overflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_undeflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> output task data undeflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cnal access error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cnal access error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cnal access error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cnal access error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cnal access error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cnal access error interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_en_reg1_woclr_25xx_t
 *
 * Implemented by: 
 *      en_r1_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_en_reg1_woclr_25xx_t;

/*! @struct ncp_nca_en_reg1_woclr_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r1 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg1_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> configuration instruction complete interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 15
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 14
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 13
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 12
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 11
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 10
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 9
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 8
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 7
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 6
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg1_woclr_55xx_t
 *
 * Implemented by: 
 *      en_r1_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_en_reg1_woclr_55xx_t;

/*! @struct ncp_nca_en_reg1_woset_25xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r1 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg1_woset_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration manager fifo error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_axi_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration manager read engine axi error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> output task data overflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_undeflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> output task data undeflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cnal access error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cnal access error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cnal access error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cnal access error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cnal access error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cnal access error interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_en_reg1_woset_25xx_t
 *
 * Implemented by: 
 *      en_r1_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      otask_data_undeflow_int                   :  1;
     unsigned      otask_data_overflow_int                   :  1;
     unsigned      cmn_reng_axi_err_int                      :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_en_reg1_woset_25xx_t;

/*! @struct ncp_nca_en_reg1_woset_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r1 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg1_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> configuration instruction complete interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 15
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 14
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 13
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 12
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 11
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 10
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 9
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 8
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 7
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 6
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Enable
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg1_woset_55xx_t
 *
 * Implemented by: 
 *      en_r1_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_en_reg1_woset_55xx_t;

/*! @struct ncp_nca_en_reg2_woclr_25xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r2 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg2_woclr_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CMN fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> COW interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> statistics counters interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> task flow completion fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> receive buffer pool fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> PGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> receive buffer pool ECC interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> task flow completion fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> receive buffer pool fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> itask data axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> iPCQ entry axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> PGIT upload nca axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> PGIT load nca axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT load cpu axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_entry_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> receive buffer pool drop interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tpcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> rpcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> eng_cnal_if interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> config ring error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otsd axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_axi_write_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Enable </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_en_reg2_woclr_25xx_t
 *
 * Implemented by: 
 *      en_r2_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      cpcq_axi_read_int                         :  1;
#else    /* Little Endian */
     unsigned      cpcq_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
#endif
} ncp_nca_en_reg2_woclr_25xx_t;

/*! @struct ncp_nca_en_reg2_woclr_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r2 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg2_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cnal access error interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cnal access error interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cnal access error interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> cnal access error interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cnal access error interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cnal access error interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> cnal access error interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cnal access error interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> cnal access error interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cnal access error interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> cnal access error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> cnal access error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cnal access error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cnal access error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cnal access error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cnal access error interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration ring error interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration ring error interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> configuration ring error interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> configuration ring error interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> configuration ring error interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> configuration ring error interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> configuration ring error interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> configuration ring error interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> configuration ring error interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> configuration ring error interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg2_woclr_55xx_t
 *
 * Implemented by: 
 *      en_r2_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      eng_cnal_if_int_grp15                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp15                     :  1;
#endif
} ncp_nca_en_reg2_woclr_55xx_t;

/*! @struct ncp_nca_en_reg2_woset_25xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r2 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg2_woset_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> CMN fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> COW interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> statistics counters interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> task flow completion fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> receive buffer pool fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> PGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> receive buffer pool ECC interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tfc_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> task flow completion fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> receive buffer pool fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> PGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> itask data axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_axi_write_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> iPCQ entry axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_upload_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> PGIT upload nca axi write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_nca_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> PGIT load nca axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgit_load_cpu_axi_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT load cpu axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_drop_entry_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> receive buffer pool drop interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> tpcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rpcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> rpcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq axi read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> eng_cnal_if interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> config ring error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otsd_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> otsd axi read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_axi_write_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_axi_read_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Enable </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_en_reg2_woset_25xx_t
 *
 * Implemented by: 
 *      en_r2_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      cpcq_axi_read_int                         :  1;
#else    /* Little Endian */
     unsigned      cpcq_axi_read_int                         :  1;
     unsigned      cmn_axi_write_int                         :  1;
     unsigned      otsd_axi_read_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_axi_read_int                   :  1;
     unsigned      otask_data_axi_read_int                   :  1;
     unsigned      rpcq_entry_axi_read_int                   :  1;
     unsigned      tpcq_entry_axi_read_int                   :  1;
     unsigned      rbp_drop_entry_int                        :  1;
     unsigned      pgit_load_cpu_axi_er_int                  :  1;
     unsigned      pgit_load_nca_axi_er_int                  :  1;
     unsigned      pgit_upload_nca_axi_er_int                :  1;
     unsigned      ipcq_entry_axi_write_er_int               :  1;
     unsigned      itask_data_axi_write_er_int               :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      pgit_fifo_overflow_underflow_int          :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_overflow_underflow_int           :  1;
     unsigned      tfc_fifo_overflow_underflow_int           :  1;
     unsigned      rbp_fifo_ecc_int                          :  1;
     unsigned      pgit_fifo_par_err_int                     :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      rbp_fifo_par_err_int                      :  1;
     unsigned      tfc_fifo_par_err_int                      :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      cmn_fifo_par_err_int                      :  1;
     unsigned      cmn_fifo_overflow_underflow_int           :  1;
#endif
} ncp_nca_en_reg2_woset_25xx_t;

/*! @struct ncp_nca_en_reg2_woset_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r2 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg2_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cnal access error interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cnal access error interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cnal access error interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> cnal access error interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cnal access error interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cnal access error interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> cnal access error interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cnal access error interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> cnal access error interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cnal access error interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> cnal access error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> cnal access error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cnal access error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cnal access error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cnal access error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cnal access error interrupt group0 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration ring error interrupt group15 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration ring error interrupt group14 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> configuration ring error interrupt group13 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> configuration ring error interrupt group12 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> configuration ring error interrupt group11 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> configuration ring error interrupt group10 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> configuration ring error interrupt group9 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> configuration ring error interrupt group8 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> configuration ring error interrupt group7 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> configuration ring error interrupt group6 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg2_woset_55xx_t
 *
 * Implemented by: 
 *      en_r2_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      eng_cnal_if_int_grp15                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp15                     :  1;
#endif
} ncp_nca_en_reg2_woset_55xx_t;

/*! @struct ncp_nca_max_outstanding_axim_ops_reg_25xx_t
 *  @brief Maximum Outstanding AXI Master Operations
 *  @details This register sets the maximum number of outstanding axi master read and write operations allowed for many of the NCA's data types.  The value in each field is set to one less than the desired number of outstanding operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_max_outstanding_axim_ops_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_itask_data_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Maximum number of outstanding input task data write
 *        operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_pgit_wops </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Maximum number of outstanding PCQ group index table
 *        write operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_pgit_rops </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Maximum number of outstanding PCQ group index table
 *        read operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_otask_data_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Maximum number of outstanding output task data read
 *        operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_otsd_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Maximum number of outstanding output task segment
 *        descriptor read operations allowed (0 = 1, 1 = 2,
 *        2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_opcq_entry_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum number of outstanding oPCQ entry read operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_tpcq_entry_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Maximum number of outstanding tPCQ entry read operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_rpcq_entry_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Maximum number of outstanding rPCQ entry read operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_max_outstanding_axim_ops_reg_25xx_t
 *
 * Implemented by: 
 *      max_outstanding_axim_ops
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      max_outstanding_am_itask_data_wops        :  4;
     unsigned      reserved0                                 :  1;
     unsigned      max_outstanding_am_pgit_wops              :  3;
     unsigned      reserved1                                 :  1;
     unsigned      max_outstanding_am_pgit_rops              :  3;
     unsigned      max_outstanding_am_otask_data_rops        :  4;
     unsigned      max_outstanding_am_otsd_rops              :  4;
     unsigned      max_outstanding_am_opcq_entry_rops        :  4;
     unsigned      max_outstanding_am_tpcq_entry_rops        :  4;
     unsigned      max_outstanding_am_rpcq_entry_rops        :  4;
#else    /* Little Endian */
     unsigned      max_outstanding_am_rpcq_entry_rops        :  4;
     unsigned      max_outstanding_am_tpcq_entry_rops        :  4;
     unsigned      max_outstanding_am_opcq_entry_rops        :  4;
     unsigned      max_outstanding_am_otsd_rops              :  4;
     unsigned      max_outstanding_am_otask_data_rops        :  4;
     unsigned      max_outstanding_am_pgit_rops              :  3;
     unsigned      reserved1                                 :  1;
     unsigned      max_outstanding_am_pgit_wops              :  3;
     unsigned      reserved0                                 :  1;
     unsigned      max_outstanding_am_itask_data_wops        :  4;
#endif
} ncp_nca_max_outstanding_axim_ops_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter_ctl_reg_25xx_t
 *  @brief AXI Master Operation Counter Control Register
 *  @details Controls the AXI Master Operation Counters
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter_ctl_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param clk_cnt_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Indicates when the clock counter has overflowed (1:
 *        Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt3_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Indicates when AXI master operation counter 3 has
 *        overflowed (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt2_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Indicates when AXI master operation counter 2 has
 *        overflowed (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt1_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Indicates when AXI master operation counter 1 has
 *        overflowed (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt0_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Indicates when AXI master operation counter 0 has
 *        overflowed (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt3_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> AXI master operation counter 3 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt2_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> AXI master operation counter 2 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt1_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> AXI master operation counter 1 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt0_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> AXI master operation counter 0 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_lat_mode </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Counter latency mode. Puts the AXI master operation
 *        counters in latency mode, and selects a type of access.
 *        When in latency mode, AXI master operation counter0
 *        contains the minimum latency seen, AXI master operation
 *        counter1 contains the maximum latency seen, and
 *        AXI master operation counter2 contains the total latency
 *        seen. AXI master operation counter3 contains the
 *        number of transactions seen for ID 0 of the selected
 *        type of access, except for the three types of ready
 *        low latency. For ready low latency, counter3 counts
 *        the number of times ready is low when valid first
 *        went high (like non-latency mode).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Spare bits. They can be written and read, but are
 *        currently unconnected.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_halt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> If set, halt all AXI master operation counters when
 *        any counter overflows (>2**48-1). Note that the overflow
 *        indication for each counter is available as the *_ovfl
 *        bits of this register
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enable all AXI master operation counters (1: run,
 *        0: stop).
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter_ctl_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter_ctl
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      clk_cnt_ovfl                              :  1;
     unsigned      cnt3_ovfl                                 :  1;
     unsigned      cnt2_ovfl                                 :  1;
     unsigned      cnt1_ovfl                                 :  1;
     unsigned      cnt0_ovfl                                 :  1;
     unsigned      cnt3_sel                                  :  4;
     unsigned      cnt2_sel                                  :  4;
     unsigned      cnt1_sel                                  :  4;
     unsigned      cnt0_sel                                  :  4;
     unsigned      cnt_lat_mode                              :  4;
     unsigned      spare                                     :  2;
     unsigned      cnt_halt                                  :  1;
     unsigned      cnt_enable                                :  1;
#else    /* Little Endian */
     unsigned      cnt_enable                                :  1;
     unsigned      cnt_halt                                  :  1;
     unsigned      spare                                     :  2;
     unsigned      cnt_lat_mode                              :  4;
     unsigned      cnt0_sel                                  :  4;
     unsigned      cnt1_sel                                  :  4;
     unsigned      cnt2_sel                                  :  4;
     unsigned      cnt3_sel                                  :  4;
     unsigned      cnt0_ovfl                                 :  1;
     unsigned      cnt1_ovfl                                 :  1;
     unsigned      cnt2_ovfl                                 :  1;
     unsigned      cnt3_ovfl                                 :  1;
     unsigned      clk_cnt_ovfl                              :  1;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_axim_op_counter_ctl_reg_25xx_t;

/*! @struct ncp_nca_clk_counter_ls_reg_25xx_t
 *  @brief Clock Counter LS Register
 *  @details Contains the lower 32 bits of the 48b clock counter value.  It is used by internal logic when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_clk_counter_ls_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current clock count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_clk_counter_ls_reg_25xx_t
 *
 * Implemented by: 
 *      clk_counter_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_clk_counter_ls_reg_25xx_t;

/*! @struct ncp_nca_clk_counter_ms_reg_25xx_t
 *  @brief Clock Counter MS Register
 *  @details Contains the upper 16 bits of the 48b clock counter value.  It is used by internal logic when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_clk_counter_ms_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current clock count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_clk_counter_ms_reg_25xx_t
 *
 * Implemented by: 
 *      clk_counter_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_clk_counter_ms_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter0_ls_reg_25xx_t
 *  @brief AXI Master Operation Counter0 LS Register
 *  @details Contains the lower 32 bits of the 48b AXI master operation counter0 value.  Contains the minimum latency seen when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter0_ls_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter0 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter0_ls_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter0_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_axim_op_counter0_ls_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter1_ls_reg_25xx_t
 *  @brief AXI Master Operation Counter1 LS Register
 *  @details Contains the lower 32 bits of the 48b AXI master operation counter1 value.  Contains the maximum latency seen when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter1_ls_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter1 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter1_ls_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter1_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_axim_op_counter1_ls_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter2_ls_reg_25xx_t
 *  @brief AXI Master Operation Counter2 LS Register
 *  @details Contains the lower 32 bits of the 48b AXI master operation counter2 value.  Contains the total latency seen when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter2_ls_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter2 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter2_ls_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter2_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_axim_op_counter2_ls_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter3_ls_reg_25xx_t
 *  @brief AXI Master Operation Counter3 LS Register
 *  @details Contains the lower 32 bits of the 48b AXI master operation counter3 value.  Contains the number of transactions seen for ID 0 of the selected type of access when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter3_ls_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter3 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter3_ls_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter3_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_axim_op_counter3_ls_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter0_ms_reg_25xx_t
 *  @brief AXI Master Operation Counter0 MS Register
 *  @details Contains the upper 16 bits of the 48b AXI master operation counter0 value.  Contains the minimum latency seen when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter0_ms_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter0 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter0_ms_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter0_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_axim_op_counter0_ms_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter1_ms_reg_25xx_t
 *  @brief AXI Master Operation Counter1 MS Register
 *  @details Contains the upper 16 bits of the 48b AXI master operation counter1 value.  Contains the maximum latency seen when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter1_ms_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter1 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter1_ms_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter1_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_axim_op_counter1_ms_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter2_ms_reg_25xx_t
 *  @brief AXI Master Operation Counter2 MS Register
 *  @details Contains the upper 16 bits of the 48b AXI master operation counter2 value.  Contains the total latency seen when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter2_ms_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter2 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter2_ms_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter2_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_axim_op_counter2_ms_reg_25xx_t;

/*! @struct ncp_nca_axim_op_counter3_ms_reg_25xx_t
 *  @brief AXI Master Operation Counter3 MS Register
 *  @details Contains the upper 16 bits of the 48b AXI master operation counter3 value.  Contains the number of transactions seen for ID 0 of the selected type of access when the cnt_lat_mode field of the the axim_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_op_counter3_ms_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current AXI Master Operation Counter3 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_op_counter3_ms_reg_25xx_t
 *
 * Implemented by: 
 *      axim_op_counter3_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_axim_op_counter3_ms_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_rop_count0_reg_25xx_t
 *  @brief AXI Master Outstanding Read Operation Counter0
 *  @details Contains counts for the number of outstanding AXI master read operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_rop_count0_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cmn_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Outstanding configuration master node read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpcq_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding cPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_tpcq_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Outstanding tPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_rpcq_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Outstanding rPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Outstanding oPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Outstanding PCQ group index table read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otsd_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding output task segment descriptor read operations </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_rop_count0_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_rop_count0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_cmn_rops                      :  4;
     unsigned      outstanding_cpcq_rops                     :  4;
     unsigned      outstanding_tpcq_rops                     :  5;
     unsigned      outstanding_rpcq_rops                     :  5;
     unsigned      outstanding_opcq_rops                     :  5;
     unsigned      outstanding_pgit_rops                     :  4;
     unsigned      outstanding_otsd_rops                     :  5;
#else    /* Little Endian */
     unsigned      outstanding_otsd_rops                     :  5;
     unsigned      outstanding_pgit_rops                     :  4;
     unsigned      outstanding_opcq_rops                     :  5;
     unsigned      outstanding_rpcq_rops                     :  5;
     unsigned      outstanding_tpcq_rops                     :  5;
     unsigned      outstanding_cpcq_rops                     :  4;
     unsigned      outstanding_cmn_rops                      :  4;
#endif
} ncp_nca_axim_outstanding_rop_count0_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_rop_count1_reg_25xx_t
 *  @brief AXI Master Outstanding Read Operation Counter1
 *  @details Contains counts for the number of outstanding AXI master read operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_rop_count1_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otask_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding output task data read operations </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_rop_count1_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_rop_count1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      outstanding_otask_rops                    :  5;
#else    /* Little Endian */
     unsigned      outstanding_otask_rops                    :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_nca_axim_outstanding_rop_count1_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_rop_count2_reg_25xx_t
 *  @brief AXI Master Outstanding Read Operation Counter2
 *  @details Contains a count for the total number of outstanding AXI master read operations.  It also contains a high water mark field that records the maximum number of outstanding read operations observed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_rop_count2_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_rops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding total read operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_rops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding total read operations </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_rop_count2_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_rop_count2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_total_rops_hwm                : 16;
     unsigned      outstanding_total_rops                    : 16;
#else    /* Little Endian */
     unsigned      outstanding_total_rops                    : 16;
     unsigned      outstanding_total_rops_hwm                : 16;
#endif
} ncp_nca_axim_outstanding_rop_count2_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_rdata_count0_reg_25xx_t
 *  @brief AXI Master Outstanding Read Data Counter0
 *  @details Contains counts for the number of outstanding AXI master read data quadwords for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_rdata_count0_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_rpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for rPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for oPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for the
 *        PCQ group index table
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otsd_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for output
 *        task segment descriptors
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_rdata_count0_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_rdata_count0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_rpcq_rdata                    :  8;
     unsigned      outstanding_opcq_rdata                    :  8;
     unsigned      outstanding_pgit_rdata                    :  8;
     unsigned      outstanding_otsd_rdata                    :  8;
#else    /* Little Endian */
     unsigned      outstanding_otsd_rdata                    :  8;
     unsigned      outstanding_pgit_rdata                    :  8;
     unsigned      outstanding_opcq_rdata                    :  8;
     unsigned      outstanding_rpcq_rdata                    :  8;
#endif
} ncp_nca_axim_outstanding_rdata_count0_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_rdata_count1_reg_25xx_t
 *  @brief AXI Master Outstanding Read Data Counter1
 *  @details Contains counts for the number of outstanding AXI master read data quadwords for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_rdata_count1_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otask_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for output
 *        task data
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cmn_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for the
 *        configuration master node
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for cPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_tpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for tPCQ
 *        entries
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_rdata_count1_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_rdata_count1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_otask_rdata                   :  8;
     unsigned      outstanding_cmn_rdata                     :  8;
     unsigned      outstanding_cpcq_rdata                    :  8;
     unsigned      outstanding_tpcq_rdata                    :  8;
#else    /* Little Endian */
     unsigned      outstanding_tpcq_rdata                    :  8;
     unsigned      outstanding_cpcq_rdata                    :  8;
     unsigned      outstanding_cmn_rdata                     :  8;
     unsigned      outstanding_otask_rdata                   :  8;
#endif
} ncp_nca_axim_outstanding_rdata_count1_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_wop_count0_reg_25xx_t
 *  @brief AXI Master Outstanding Write Operation Counter0
 *  @details Contains counts for the number of outstanding AXI master write operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_wop_count0_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_itask_wops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding input task data and iPCQ entry write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cmn_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Outstanding configuration master node write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding PCQ group index table write operations </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_wop_count0_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_wop_count0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      outstanding_itask_wops                    :  5;
     unsigned      outstanding_cmn_wops                      :  4;
     unsigned      outstanding_pgit_wops                     :  4;
#else    /* Little Endian */
     unsigned      outstanding_pgit_wops                     :  4;
     unsigned      outstanding_cmn_wops                      :  4;
     unsigned      outstanding_itask_wops                    :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_nca_axim_outstanding_wop_count0_reg_25xx_t;

/*! @struct ncp_nca_axim_outstanding_wop_count1_reg_25xx_t
 *  @brief AXI Master Outstanding Write Operation Counter1
 *  @details Contains a count for the total number of outstanding AXI master write operations.  It also contains a high water mark field that records the maximum number of outstanding write operations observed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_outstanding_wop_count1_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_wops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding total write operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_wops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding total write operations </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_outstanding_wop_count1_reg_25xx_t
 *
 * Implemented by: 
 *      axim_outstanding_wop_count1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_total_wops_hwm                : 16;
     unsigned      outstanding_total_wops                    : 16;
#else    /* Little Endian */
     unsigned      outstanding_total_wops                    : 16;
     unsigned      outstanding_total_wops_hwm                : 16;
#endif
} ncp_nca_axim_outstanding_wop_count1_reg_25xx_t;

/*! @struct ncp_nca_axim_valid_ready_reg_25xx_t
 *  @brief AXI Master Valid Ready
 *  @details Shows the state of all of the AXI master valid and ready signals
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axim_valid_ready_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> AXI master write response valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> AXI master write response ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> AXI master data write valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> AXI master data write ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> AXI master address write valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> AXI master address write ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_rvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> AXI master data read valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_rready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> AXI master data read ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_arvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> AXI master address read valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axim_arready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> AXI master address read ready </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_axim_valid_ready_reg_25xx_t
 *
 * Implemented by: 
 *      axim_valid_ready
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      axim_bvalid                               :  1;
     unsigned      axim_bready                               :  1;
     unsigned      axim_wvalid                               :  1;
     unsigned      axim_wready                               :  1;
     unsigned      axim_awvalid                              :  1;
     unsigned      axim_awready                              :  1;
     unsigned      axim_rvalid                               :  1;
     unsigned      axim_rready                               :  1;
     unsigned      axim_arvalid                              :  1;
     unsigned      axim_arready                              :  1;
#else    /* Little Endian */
     unsigned      axim_arready                              :  1;
     unsigned      axim_arvalid                              :  1;
     unsigned      axim_rready                               :  1;
     unsigned      axim_rvalid                               :  1;
     unsigned      axim_awready                              :  1;
     unsigned      axim_awvalid                              :  1;
     unsigned      axim_wready                               :  1;
     unsigned      axim_wvalid                               :  1;
     unsigned      axim_bready                               :  1;
     unsigned      axim_bvalid                               :  1;
     unsigned      reserved0                                 : 22;
#endif
} ncp_nca_axim_valid_ready_reg_25xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size0
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo0_range_reg_size0_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo0_range_start_size0               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo0_range_end_size0                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size0                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo0_range_start_size0               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo0_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size0
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo0_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo0_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo0_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo0_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo0_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size1
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo0_range_reg_size1_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo0_range_start_size1               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo0_range_end_size1                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size1                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo0_range_start_size1               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo0_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size1
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo0_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo0_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo0_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo0_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo0_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size2
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo0_range_reg_size2_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo0_range_start_size2               :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo0_range_end_size2                 :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size2                 :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo0_range_start_size2               :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo0_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size2
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo0_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo0_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo0_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo0_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo0_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size3
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo0_range_reg_size3_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo0_range_start_size3               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo0_range_end_size3                 :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size3                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo0_range_start_size3               :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo0_range_reg_size3_25xx_t;

/*! @struct ncp_nca_rbp_fifo0_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 0 Range Size3
 *  @details Receive Buffer Pool FIFO 0 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 0 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo0_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo0_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 0 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo0_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo0_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo0_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo0_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo0_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo0_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size0
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo1_range_reg_size0_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo1_range_start_size0               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo1_range_end_size0                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size0                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo1_range_start_size0               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo1_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size0
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo1_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo1_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo1_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo1_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo1_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size1
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo1_range_reg_size1_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo1_range_start_size1               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo1_range_end_size1                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size1                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo1_range_start_size1               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo1_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size1
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo1_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo1_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo1_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo1_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo1_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size2
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo1_range_reg_size2_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo1_range_start_size2               :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo1_range_end_size2                 :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size2                 :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo1_range_start_size2               :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo1_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size2
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo1_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo1_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo1_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo1_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo1_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size3
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo1_range_reg_size3_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo1_range_start_size3               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo1_range_end_size3                 :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size3                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo1_range_start_size3               :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo1_range_reg_size3_25xx_t;

/*! @struct ncp_nca_rbp_fifo1_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 1 Range Size3
 *  @details Receive Buffer Pool FIFO 1 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 1 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo1_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo1_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 1 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo1_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo1_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo1_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo1_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo1_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo1_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size0
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo2_range_reg_size0_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo2_range_start_size0               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo2_range_end_size0                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size0                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo2_range_start_size0               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo2_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size0
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo2_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo2_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo2_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo2_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo2_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size1
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo2_range_reg_size1_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo2_range_start_size1               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo2_range_end_size1                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size1                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo2_range_start_size1               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo2_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size1
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo2_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo2_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo2_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo2_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo2_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size2
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo2_range_reg_size2_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo2_range_start_size2               :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo2_range_end_size2                 :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size2                 :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo2_range_start_size2               :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo2_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size2
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo2_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo2_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo2_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo2_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo2_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size3
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo2_range_reg_size3_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo2_range_start_size3               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo2_range_end_size3                 :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size3                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo2_range_start_size3               :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo2_range_reg_size3_25xx_t;

/*! @struct ncp_nca_rbp_fifo2_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 2 Range Size3
 *  @details Receive Buffer Pool FIFO 2 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 2 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo2_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo2_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 2 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo2_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo2_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo2_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo2_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo2_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo2_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size0
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo3_range_reg_size0_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo3_range_start_size0               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo3_range_end_size0                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size0                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo3_range_start_size0               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo3_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size0
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo3_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo3_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo3_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo3_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo3_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size1
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo3_range_reg_size1_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo3_range_start_size1               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo3_range_end_size1                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size1                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo3_range_start_size1               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo3_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size1
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo3_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo3_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo3_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo3_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo3_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size2
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo3_range_reg_size2_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo3_range_start_size2               :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo3_range_end_size2                 :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size2                 :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo3_range_start_size2               :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo3_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size2
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo3_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo3_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo3_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo3_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo3_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size3
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo3_range_reg_size3_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo3_range_start_size3               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo3_range_end_size3                 :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size3                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo3_range_start_size3               :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo3_range_reg_size3_25xx_t;

/*! @struct ncp_nca_rbp_fifo3_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 3 Range Size3
 *  @details Receive Buffer Pool FIFO 3 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 3 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo3_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo3_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 3 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo3_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo3_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo3_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo3_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo3_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo3_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size0
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo4_range_reg_size0_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo4_range_start_size0               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo4_range_end_size0                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size0                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo4_range_start_size0               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo4_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size0
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo4_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo4_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo4_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo4_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo4_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size1
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo4_range_reg_size1_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo4_range_start_size1               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo4_range_end_size1                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size1                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo4_range_start_size1               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo4_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size1
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo4_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo4_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo4_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo4_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo4_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size2
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo4_range_reg_size2_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo4_range_start_size2               :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo4_range_end_size2                 :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size2                 :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo4_range_start_size2               :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo4_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size2
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo4_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo4_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo4_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo4_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo4_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size3
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo4_range_reg_size3_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo4_range_start_size3               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo4_range_end_size3                 :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size3                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo4_range_start_size3               :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo4_range_reg_size3_25xx_t;

/*! @struct ncp_nca_rbp_fifo4_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 4 Range Size3
 *  @details Receive Buffer Pool FIFO 4 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 4 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo4_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo4_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 4 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo4_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo4_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo4_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo4_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo4_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo4_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size0
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo5_range_reg_size0_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo5_range_start_size0               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo5_range_end_size0                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size0                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo5_range_start_size0               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo5_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size0
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo5_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo5_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo5_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo5_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo5_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size1
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo5_range_reg_size1_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo5_range_start_size1               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo5_range_end_size1                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size1                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo5_range_start_size1               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo5_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size1
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo5_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo5_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo5_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo5_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo5_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size2
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo5_range_reg_size2_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo5_range_start_size2               :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo5_range_end_size2                 :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size2                 :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo5_range_start_size2               :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo5_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size2
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo5_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo5_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo5_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo5_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo5_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size3
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo5_range_reg_size3_25xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo5_range_start_size3               :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo5_range_end_size3                 :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size3                 :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo5_range_start_size3               :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo5_range_reg_size3_25xx_t;

/*! @struct ncp_nca_rbp_fifo5_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 5 Range Size3
 *  @details Receive Buffer Pool FIFO 5 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 5 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo5_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo5_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 5 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo5_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo5_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo5_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo5_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo5_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo5_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo_range_reg_size0_25xx_t
 *  @brief Receive Buffer Pool FIFO Range Size0
 *  @details Receive Buffer Pool FIFO start and end range pointers for size 0.  These pointers define the start and end address for the receive buffer pool FIFOs within the RAM for size0 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 6 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo_range_reg_size0_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_start_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range start pointer for size0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_end_size0 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo_range_reg_size0_25xx_t
 *
 * Implemented by: 
 *      rbp_fifo_range_size0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo_range_start_size0                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo_range_end_size0                  : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo_range_end_size0                  : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo_range_start_size0                : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo_range_reg_size0_25xx_t;

/*! @struct ncp_nca_rbp_fifo_range_reg_size1_25xx_t
 *  @brief Receive Buffer Pool FIFO Range Size1
 *  @details Receive Buffer Pool FIFO start and end range pointers for size 1.  These pointers define the start and end address for the receive buffer pool FIFOs within the RAM for size1 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 6 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo_range_reg_size1_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_start_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range start pointer for size1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_end_size1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo_range_reg_size1_25xx_t
 *
 * Implemented by: 
 *      rbp_fifo_range_size1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo_range_start_size1                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo_range_end_size1                  : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo_range_end_size1                  : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo_range_start_size1                : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo_range_reg_size1_25xx_t;

/*! @struct ncp_nca_rbp_fifo_range_reg_size2_25xx_t
 *  @brief Receive Buffer Pool FIFO Range Size2
 *  @details Receive Buffer Pool FIFO start and end range pointers for size 2.  These pointers define the start and end address for the receive buffer pool FIFOs within the RAM for size2 buffers.  This RAM is 384 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 6 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo_range_reg_size2_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_start_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range start pointer for size2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_end_size2 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo_range_reg_size2_25xx_t
 *
 * Implemented by: 
 *      rbp_fifo_range_size2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      rbp_fifo_range_start_size2                :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo_range_end_size2                  :  9;
#else    /* Little Endian */
     unsigned      rbp_fifo_range_end_size2                  :  9;
     unsigned      reserved1                                 :  7;
     unsigned      rbp_fifo_range_start_size2                :  9;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_rbp_fifo_range_reg_size2_25xx_t;

/*! @struct ncp_nca_rbp_fifo_range_reg_size3_25xx_t
 *  @brief Receive Buffer Pool FIFO Range Size3
 *  @details Receive Buffer Pool FIFO start and end range pointers for size 3.  These pointers define the start and end address for the receive buffer pool FIFOs within the RAM for size3 buffers.  This RAM is 192 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 6 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo_range_reg_size3_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_start_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range start pointer for size3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo_range_end_size3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_fifo_range_reg_size3_25xx_t
 *
 * Implemented by: 
 *      rbp_fifo_range_size3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      rbp_fifo_range_start_size3                :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo_range_end_size3                  :  8;
#else    /* Little Endian */
     unsigned      rbp_fifo_range_end_size3                  :  8;
     unsigned      reserved1                                 :  8;
     unsigned      rbp_fifo_range_start_size3                :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_rbp_fifo_range_reg_size3_25xx_t;

/*! @struct ncp_nca_smon_muxa_muxb_sel_reg_25xx_t
 *  @brief SMON mux a mux b select.
 *  @details Used to multiplex multi-bit fields into the NCA's SMON.  Since the SMON counts two things at a time, there are two select fields, a and b.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_smon_muxa_muxb_sel_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxb_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> SMON mux b mode. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxb_sel </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> SMON mux b select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxa_mode </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> SMON mux a mode. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_muxa_sel </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> SMON mux a select. </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_smon_muxa_muxb_sel_reg_25xx_t
 *
 * Implemented by: 
 *      smon_muxa_muxb_sel
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      smon_muxb_mode                            :  2;
     unsigned      smon_muxb_sel                             : 14;
     unsigned      smon_muxa_mode                            :  2;
     unsigned      smon_muxa_sel                             : 14;
#else    /* Little Endian */
     unsigned      smon_muxa_sel                             : 14;
     unsigned      smon_muxa_mode                            :  2;
     unsigned      smon_muxb_sel                             : 14;
     unsigned      smon_muxb_mode                            :  2;
#endif
} ncp_nca_smon_muxa_muxb_sel_reg_25xx_t;

/*! @struct ncp_nca_max_num_cfg_nodes_loop0_reg_25xx_t
 *  @brief Max Number Config Nodes Loop 0
 *  @details Number of configuration nodes on configuration ring 0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_max_num_cfg_nodes_loop0_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_cfg_nodes_loop0 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of nodes on config ring 0. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_max_num_cfg_nodes_loop0_reg_25xx_t
 *
 * Implemented by: 
 *      max_num_cfg_nodes_loop0
 */
 
typedef struct
{
     unsigned  int      max_num_cfg_nodes_loop0;
} ncp_nca_max_num_cfg_nodes_loop0_reg_25xx_t;

/*! @struct ncp_nca_max_num_cfg_nodes_loop1_reg_25xx_t
 *  @brief Max Number Config Nodes Loop 1
 *  @details Number of configuration nodes on configuration ring 1.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_max_num_cfg_nodes_loop1_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_cfg_nodes_loop1 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of nodes on config ring 1. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_max_num_cfg_nodes_loop1_reg_25xx_t
 *
 * Implemented by: 
 *      max_num_cfg_nodes_loop1
 */
 
typedef struct
{
     unsigned  int      max_num_cfg_nodes_loop1;
} ncp_nca_max_num_cfg_nodes_loop1_reg_25xx_t;

/*! @struct ncp_nca_max_num_cfg_nodes_loop2_reg_25xx_t
 *  @brief Max Number Config Nodes Loop 2
 *  @details Number of configuration nodes on configuration ring 2.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_max_num_cfg_nodes_loop2_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_cfg_nodes_loop2 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of nodes on config ring 2. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_max_num_cfg_nodes_loop2_reg_25xx_t
 *
 * Implemented by: 
 *      max_num_cfg_nodes_loop2
 */
 
typedef struct
{
     unsigned  int      max_num_cfg_nodes_loop2;
} ncp_nca_max_num_cfg_nodes_loop2_reg_25xx_t;

/*! @struct ncp_nca_bc_nodes_ring0_reg_25xx_t
 *  @brief Broadcast Nodes Ring 0
 *  @details A mask that is use to map the nodes on ring 0 that can accept broadcasts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_bc_nodes_ring0_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param bc_nodes_ring0 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Mask that maps nodes on ring 0 that can accept broadcasts. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_bc_nodes_ring0_reg_25xx_t
 *
 * Implemented by: 
 *      bc_nodes_ring0
 */
 
typedef struct
{
     unsigned  int            bc_nodes_ring0;
} ncp_nca_bc_nodes_ring0_reg_25xx_t;

/*! @struct ncp_nca_bc_nodes_ring1_reg_25xx_t
 *  @brief Broadcast Nodes Ring 1
 *  @details A mask that is use to map the nodes on ring 1 that can accept broadcasts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_bc_nodes_ring1_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param bc_nodes_ring1 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Mask that maps nodes on ring 1 that can accept broadcasts. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_bc_nodes_ring1_reg_25xx_t
 *
 * Implemented by: 
 *      bc_nodes_ring1
 */
 
typedef struct
{
     unsigned  int            bc_nodes_ring1;
} ncp_nca_bc_nodes_ring1_reg_25xx_t;

/*! @struct ncp_nca_bc_nodes_ring2_reg_25xx_t
 *  @brief Broadcast Nodes Ring 2
 *  @details A mask that is use to map the nodes on ring 2 that can accept broadcasts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_bc_nodes_ring2_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param bc_nodes_ring2 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Mask that maps nodes on ring 2 that can accept broadcasts. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_bc_nodes_ring2_reg_25xx_t
 *
 * Implemented by: 
 *      bc_nodes_ring2
 */
 
typedef struct
{
     unsigned  int            bc_nodes_ring2;
} ncp_nca_bc_nodes_ring2_reg_25xx_t;

/*! @struct ncp_nca_addr_width_reg_25xx_t
 *  @brief NCA AXI Address Width
 *  @details Number of bits in AXI addresses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_addr_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_addr_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in NCA AXI addresses. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_addr_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_addr_width
 */
 
typedef struct
{
     unsigned  int        nca_axi_addr_width;
} ncp_nca_addr_width_reg_25xx_t;

/*! @struct ncp_nca_m_rid_width_reg_25xx_t
 *  @brief NCA AXI Master Read ID Width
 *  @details Number of bits in NCA AXI master read IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_m_rid_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_m_rid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in NCA AXI master read IDs. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_m_rid_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_m_rid_width
 */
 
typedef struct
{
     unsigned  int       nca_axi_m_rid_width;
} ncp_nca_m_rid_width_reg_25xx_t;

/*! @struct ncp_nca_m_wid_width_reg_25xx_t
 *  @brief NCA AXI Master Write ID Width
 *  @details Number of bits in NCA AXI master write IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_m_wid_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_m_wid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in NCA AXI master write IDs. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_m_wid_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_m_wid_width
 */
 
typedef struct
{
     unsigned  int       nca_axi_m_wid_width;
} ncp_nca_m_wid_width_reg_25xx_t;

/*! @struct ncp_nca_sz_width_reg_25xx_t
 *  @brief NCA AXI Size Field Width
 *  @details Width of NCA AXI size field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_sz_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_sz_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of NCA AXI size field. </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_sz_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_sz_width
 */
 
typedef struct
{
     unsigned  int          nca_axi_sz_width;
} ncp_nca_sz_width_reg_25xx_t;

/*! @struct ncp_nca_m_data_width_reg_25xx_t
 *  @brief NCA AXI Master Data WIDTH
 *  @details Width of NCA AXI master data paths in bits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_m_data_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_m_data_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of NCA AXI master data paths in bits. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_m_data_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_m_data_width
 */
 
typedef struct
{
     unsigned  int      nca_axi_m_data_width;
} ncp_nca_m_data_width_reg_25xx_t;

/*! @struct ncp_nca_resp_width_reg_25xx_t
 *  @brief NCA AXI Response Width
 *  @details Width of NCA AXI response fields.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_resp_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_resp_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of NCA AXI response fields. </td>
 * </tr>
 * </table>
 * Applies to: 25xx 55xx --> ncp_nca_resp_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_resp_width
 */
 
typedef struct
{
     unsigned  int        nca_axi_resp_width;
} ncp_nca_resp_width_reg_25xx_t;

/*! @struct ncp_nca_m_byte_lanes_width_reg_25xx_t
 *  @brief NCA AXI Master Byte Lanes Width
 *  @details Width of NCA AXI master data paths in bytes.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_m_byte_lanes_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_m_byte_lanes_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of NCA AXI master data paths in bytes. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_m_byte_lanes_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_m_byte_lanes_width
 */
 
typedef struct
{
     unsigned  int      nca_axi_m_byte_lanes_width;
} ncp_nca_m_byte_lanes_width_reg_25xx_t;

/*! @struct ncp_nca_s_rid_width_reg_25xx_t
 *  @brief NCA AXI Slave Read ID Width
 *  @details Number of bits in NCA AXI slave read IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_s_rid_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_s_rid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in NCA AXI slave read IDs. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_s_rid_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_s_rid_width
 */
 
typedef struct
{
     unsigned  int       nca_axi_s_rid_width;
} ncp_nca_s_rid_width_reg_25xx_t;

/*! @struct ncp_nca_s_wid_width_reg_25xx_t
 *  @brief NCA AXI Slave Write ID Width
 *  @details Number of bits in NCA AXI slave write IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_s_wid_width_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_axi_s_wid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in NCA AXI slave write IDs. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_s_wid_width_reg_25xx_t
 *
 * Implemented by: 
 *      nca_axi_s_wid_width
 */
 
typedef struct
{
     unsigned  int       nca_axi_s_wid_width;
} ncp_nca_s_wid_width_reg_25xx_t;

/*! @struct ncp_nca_num_ipc_queues_reg_25xx_t
 *  @brief NCA Number Input Task Producer Consumer Queues
 *  @details Total number of NCA iPCQs
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_ipc_queues_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_ipc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCA iPCQs </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_num_ipc_queues_reg_25xx_t
 *
 * Implemented by: 
 *      nca_num_ipc_queues
 */
 
typedef struct
{
     unsigned  int        nca_num_ipc_queues;
} ncp_nca_num_ipc_queues_reg_25xx_t;

/*! @struct ncp_nca_num_opc_queues_reg_25xx_t
 *  @brief NCA Number Output Task Producer Consumer Queues
 *  @details Total number of NCA oPCQs
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_opc_queues_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_opc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCA oPCQs </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_num_opc_queues_reg_25xx_t
 *
 * Implemented by: 
 *      nca_num_opc_queues
 */
 
typedef struct
{
     unsigned  int        nca_num_opc_queues;
} ncp_nca_num_opc_queues_reg_25xx_t;

/*! @struct ncp_nca_num_tpc_queues_reg_25xx_t
 *  @brief NCA Number Task Flow Completion Producer Consumer Queues
 *  @details Total number of NCA tPCQs
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_tpc_queues_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_tpc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCA tPCQs </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_num_tpc_queues_reg_25xx_t
 *
 * Implemented by: 
 *      nca_num_tpc_queues
 */
 
typedef struct
{
     unsigned  int        nca_num_tpc_queues;
} ncp_nca_num_tpc_queues_reg_25xx_t;

/*! @struct ncp_nca_num_rpc_queues_reg_25xx_t
 *  @brief NCA Number Recevie Buffer Pool Producer Consumer Queues
 *  @details Total number of NCA rPCQs
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_rpc_queues_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_rpc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCA rPCQs </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_num_rpc_queues_reg_25xx_t
 *
 * Implemented by: 
 *      nca_num_rpc_queues
 */
 
typedef struct
{
     unsigned  int        nca_num_rpc_queues;
} ncp_nca_num_rpc_queues_reg_25xx_t;

/*! @struct ncp_nca_num_cpc_queues_reg_25xx_t
 *  @brief NCA Number Configuration Producer Consumer Queues
 *  @details Total number of NCA cPCQs
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_cpc_queues_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_cpc_queues </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCA cPCQs </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_num_cpc_queues_reg_25xx_t
 *
 * Implemented by: 
 *      nca_num_cpc_queues
 */
 
typedef struct
{
     unsigned  int        nca_num_cpc_queues;
} ncp_nca_num_cpc_queues_reg_25xx_t;

/*! @struct ncp_nca_num_rbuf_pools_reg_25xx_t
 *  @brief NCA Number Receive Buffer Pools
 *  @details Total number of NCA receive buffer pools.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_rbuf_pools_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_rbuf_pools </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total number of NCA receive buffer pools. </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_num_rbuf_pools_reg_25xx_t
 *
 * Implemented by: 
 *      nca_num_rbuf_pools
 */
 
typedef struct
{
     unsigned  int        nca_num_rbuf_pools;
} ncp_nca_num_rbuf_pools_reg_25xx_t;

/*! @struct ncp_nca_rbp_siz0_ram_depth_reg_25xx_t
 *  @brief NCA Receive Buffer Pool Size 0 RAM Depth
 *  @details Total depth of the RAM used for all receive buffer pools for size 0.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_siz0_ram_depth_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_rbp_siz0_ram_depth </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total depth of the RAM used for all receive buffer
 *        pools for size 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_siz0_ram_depth_reg_25xx_t
 *
 * Implemented by: 
 *      nca_rbp_siz0_ram_depth
 */
 
typedef struct
{
     unsigned  int      nca_rbp_siz0_ram_depth;
} ncp_nca_rbp_siz0_ram_depth_reg_25xx_t;

/*! @struct ncp_nca_rbp_siz1_ram_depth_reg_25xx_t
 *  @brief NCA Receive Buffer Pool Size 1 RAM Depth
 *  @details Total depth of the RAM used for all receive buffer pools for size 1.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_siz1_ram_depth_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_rbp_siz1_ram_depth </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total depth of the RAM used for all receive buffer
 *        pools for size 1.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_siz1_ram_depth_reg_25xx_t
 *
 * Implemented by: 
 *      nca_rbp_siz1_ram_depth
 */
 
typedef struct
{
     unsigned  int      nca_rbp_siz1_ram_depth;
} ncp_nca_rbp_siz1_ram_depth_reg_25xx_t;

/*! @struct ncp_nca_rbp_siz2_ram_depth_reg_25xx_t
 *  @brief NCA Receive Buffer Pool Size 2 RAM Depth
 *  @details Total depth of the RAM used for all receive buffer pools for size 2.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_siz2_ram_depth_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_rbp_siz2_ram_depth </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total depth of the RAM used for all receive buffer
 *        pools for size 2.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_siz2_ram_depth_reg_25xx_t
 *
 * Implemented by: 
 *      nca_rbp_siz2_ram_depth
 */
 
typedef struct
{
     unsigned  int      nca_rbp_siz2_ram_depth;
} ncp_nca_rbp_siz2_ram_depth_reg_25xx_t;

/*! @struct ncp_nca_rbp_siz3_ram_depth_reg_25xx_t
 *  @brief NCA Receive Buffer Pool Size 3 RAM Depth
 *  @details Total depth of the RAM used for all receive buffer pools for size 3.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_siz3_ram_depth_reg_25xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_rbp_siz3_ram_depth </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Total depth of the RAM used for all receive buffer
 *        pools for size 3.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 25xx --> ncp_nca_rbp_siz3_ram_depth_reg_25xx_t
 *
 * Implemented by: 
 *      nca_rbp_siz3_ram_depth
 */
 
typedef struct
{
     unsigned  int      nca_rbp_siz3_ram_depth;
} ncp_nca_rbp_siz3_ram_depth_reg_25xx_t;

/*! @struct ncp_nca_idle_status_reg_55xx_t
 *  @brief Idle Status
 *  @details Shows the idle status of NCA internal blocks.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_idle_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Input task accumulator idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpbf_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> MME pool buffer FIFO idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Output task accumulator idle </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_idle </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ processing idle </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_idle_status_reg_55xx_t
 *
 * Implemented by: 
 *      idle_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      ita_idle                                  :  1;
     unsigned      mpbf_idle                                 :  1;
     unsigned      ota_idle                                  :  1;
     unsigned      cpcq_idle                                 :  1;
#else    /* Little Endian */
     unsigned      cpcq_idle                                 :  1;
     unsigned      ota_idle                                  :  1;
     unsigned      mpbf_idle                                 :  1;
     unsigned      ita_idle                                  :  1;
     unsigned      reserved0                                 : 28;
#endif
} ncp_nca_idle_status_reg_55xx_t;

/*! @struct ncp_nca_ota_int_stat_reg_0_55xx_t
 *  @brief Output Task Accumulator Interrupt Status Register 0
 *  @details Provides additional status related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_int_stat_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Output task data memory read error memory select.
 *        0 - system memory, 1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Output task data memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_err_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task data memory read error oPCQ number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_wr_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ memory write error memory select. 0 - system
 *        memory, 1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_wr_err_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ memory write error oPCQ number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_rd_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ memory read error memory select. 0 - system memory,
 *        1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_mem_rd_err_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ memory read error oPCQ number. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_int_stat_reg_0_55xx_t
 *
 * Implemented by: 
 *      ota_int_stat_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      otask_data_mem_rd_err_mem_sel             :  1;
     unsigned      otask_data_mem_rd_err_resp                :  2;
     unsigned      otask_data_mem_rd_err_opcq_num            :  5;
     unsigned      opcq_mem_wr_err_mem_sel                   :  1;
     unsigned      opcq_mem_wr_err_resp                      :  2;
     unsigned      opcq_mem_wr_err_opcq_num                  :  5;
     unsigned      opcq_mem_rd_err_mem_sel                   :  1;
     unsigned      opcq_mem_rd_err_resp                      :  2;
     unsigned      opcq_mem_rd_err_opcq_num                  :  5;
#else    /* Little Endian */
     unsigned      opcq_mem_rd_err_opcq_num                  :  5;
     unsigned      opcq_mem_rd_err_resp                      :  2;
     unsigned      opcq_mem_rd_err_mem_sel                   :  1;
     unsigned      opcq_mem_wr_err_opcq_num                  :  5;
     unsigned      opcq_mem_wr_err_resp                      :  2;
     unsigned      opcq_mem_wr_err_mem_sel                   :  1;
     unsigned      otask_data_mem_rd_err_opcq_num            :  5;
     unsigned      otask_data_mem_rd_err_resp                :  2;
     unsigned      otask_data_mem_rd_err_mem_sel             :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_int_stat_reg_0_55xx_t;

/*! @struct ncp_nca_ota_int_stat_reg_1_55xx_t
 *  @brief Output Task Accumulator Interrupt Status Register 1
 *  @details Provides additional status related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_int_stat_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task data overflow oPCQ number </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_opcq_num </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task data underflow oPCQ number </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_int_stat_reg_1_55xx_t
 *
 * Implemented by: 
 *      ota_int_stat_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      otask_data_overflow_opcq_num              :  5;
     unsigned      reserved1                                 :  3;
     unsigned      otask_data_underflow_opcq_num             :  5;
#else    /* Little Endian */
     unsigned      otask_data_underflow_opcq_num             :  5;
     unsigned      reserved1                                 :  3;
     unsigned      otask_data_overflow_opcq_num              :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_nca_ota_int_stat_reg_1_55xx_t;

/*! @struct ncp_nca_ita_int_stat_reg_55xx_t
 *  @brief Input Task Accumulator Interrupt Status
 *  @details Provides additional status related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_int_stat_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_nobuf_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Input task drop no buffer group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_err_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Input task drop iPCQ error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_mem_rd_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> aPCQ memory read error memory select. 0 - system memory,
 *        1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> aPCQ memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_mem_rd_err_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> aPCQ memory read error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mem_wr_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> iPCQ memory write error memory select. 0 - system
 *        memory, 1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> iPCQ memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_mem_wr_err_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> iPCQ memory write error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Input task memory write error memory select. 0 - system
 *        memory, 1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Input task memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_err_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Input task memory write error group number. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_int_stat_reg_55xx_t
 *
 * Implemented by: 
 *      ita_int_stat
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_drop_nobuf_grp_num                  :  4;
     unsigned      itask_drop_ipcq_err_grp_num               :  4;
     unsigned      reserved0                                 :  1;
     unsigned      apcq_mem_rd_err_mem_sel                   :  1;
     unsigned      apcq_mem_rd_err_resp                      :  2;
     unsigned      apcq_mem_rd_err_grp_num                   :  4;
     unsigned      reserved1                                 :  1;
     unsigned      ipcq_mem_wr_err_mem_sel                   :  1;
     unsigned      ipcq_mem_wr_err_resp                      :  2;
     unsigned      ipcq_mem_wr_err_grp_num                   :  4;
     unsigned      reserved2                                 :  1;
     unsigned      itask_data_mem_wr_err_mem_sel             :  1;
     unsigned      itask_data_mem_wr_err_resp                :  2;
     unsigned      itask_data_mem_wr_err_grp_num             :  4;
#else    /* Little Endian */
     unsigned      itask_data_mem_wr_err_grp_num             :  4;
     unsigned      itask_data_mem_wr_err_resp                :  2;
     unsigned      itask_data_mem_wr_err_mem_sel             :  1;
     unsigned      reserved2                                 :  1;
     unsigned      ipcq_mem_wr_err_grp_num                   :  4;
     unsigned      ipcq_mem_wr_err_resp                      :  2;
     unsigned      ipcq_mem_wr_err_mem_sel                   :  1;
     unsigned      reserved1                                 :  1;
     unsigned      apcq_mem_rd_err_grp_num                   :  4;
     unsigned      apcq_mem_rd_err_resp                      :  2;
     unsigned      apcq_mem_rd_err_mem_sel                   :  1;
     unsigned      reserved0                                 :  1;
     unsigned      itask_drop_ipcq_err_grp_num               :  4;
     unsigned      itask_drop_nobuf_grp_num                  :  4;
#endif
} ncp_nca_ita_int_stat_reg_55xx_t;

/*! @struct ncp_nca_npgit_int_stat_reg_55xx_t
 *  @brief NCA PCQ Group Index Table Interrupt Status
 *  @details Provides additional status related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_int_stat_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 17 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT memory read error memory select. 0 - system
 *        memory, 1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> NPGIT memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_err_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory read error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> NPGIT memory write error memory select. 0 - system
 *        memory, 1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> NPGIT memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_err_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> NPGIT memory write error group number. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_int_stat_reg_55xx_t
 *
 * Implemented by: 
 *      npgit_int_stat
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 17;
     unsigned      npgit_mem_rd_err_mem_sel                  :  1;
     unsigned      npgit_mem_rd_err_resp                     :  2;
     unsigned      npgit_mem_rd_err_grp_num                  :  4;
     unsigned      reserved1                                 :  1;
     unsigned      npgit_mem_wr_err_mem_sel                  :  1;
     unsigned      npgit_mem_wr_err_resp                     :  2;
     unsigned      npgit_mem_wr_err_grp_num                  :  4;
#else    /* Little Endian */
     unsigned      npgit_mem_wr_err_grp_num                  :  4;
     unsigned      npgit_mem_wr_err_resp                     :  2;
     unsigned      npgit_mem_wr_err_mem_sel                  :  1;
     unsigned      reserved1                                 :  1;
     unsigned      npgit_mem_rd_err_grp_num                  :  4;
     unsigned      npgit_mem_rd_err_resp                     :  2;
     unsigned      npgit_mem_rd_err_mem_sel                  :  1;
     unsigned      reserved0                                 : 17;
#endif
} ncp_nca_npgit_int_stat_reg_55xx_t;

/*! @struct ncp_nca_mpb_int_stat_reg_55xx_t
 *  @brief MME Pool Buffer Interrupt Status
 *  @details Provides additional status related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_int_stat_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 23 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> MME pool ID. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_size </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> MME buffer size. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param single_bit_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Single-bit error. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param double_bit_error </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Double-bit_error. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_int_stat_reg_55xx_t
 *
 * Implemented by: 
 *      mpb_int_stat
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 23;
     unsigned      mpb_pool_id                               :  5;
     unsigned      mpb_size                                  :  2;
     unsigned      single_bit_error                          :  1;
     unsigned      double_bit_error                          :  1;
#else    /* Little Endian */
     unsigned      double_bit_error                          :  1;
     unsigned      single_bit_error                          :  1;
     unsigned      mpb_size                                  :  2;
     unsigned      mpb_pool_id                               :  5;
     unsigned      reserved0                                 : 23;
#endif
} ncp_nca_mpb_int_stat_reg_55xx_t;

/*! @struct ncp_nca_cmn_int_stat_reg_55xx_t
 *  @brief Configuration Ring Master Node Interrupt Status
 *  @details Provides additional status related to corresponding interrupts.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cmn_int_stat_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> eng_cnal_if_int_grp_num. When eng_cnal_if_int_is_pio
 *        is clear, and at least one of the grp_interrupt_status_table.status_r2.eng_cnal_if_grp_int
 *        bits is set, this field indicates for which group
 *        number the cnal_if_status register contains error
 *        data.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_is_pio </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> eng_cnal_if interrupt is for pio mode. When this bit
 *        and the grp_interrupt_status_table.status_r3.eng_cnal_if_pio_int
 *        bit are both set, the cnal_if_status register contains
 *        error data for that interrupt.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cfg_ring_err_int_grp_num. When cfg_ring_err_int_is_pio
 *        is clear, and at least one of the grp_interrupt_status_table.status_r2.cfg_ring_err_grp_int
 *        bits is set, this field indicates for which group
 *        number the cfg_ring_error_stat_r|0..1| registers contain
 *        error data.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_is_pio </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cfg_ring_err interrupt is for pio mode. When this
 *        bit and the grp_interrupt_status_table.status_r3.cfg_ring_err_pio_int
 *        bit are both set, the cfg_ring_error_stat_r|0..1|
 *        registers contain error data for that interrupt.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ memory read error memory select. 0 - system memory,
 *        1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ memory read error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_err_group_num </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ memory read error group number. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CMN memory write error memory select. 0 - system memory,
 *        1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CMN memory write error response code. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CMN memory read error memory select. 0 - system memory,
 *        1 - AXI memory.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_resp </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CMN memory read error response code. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_cmn_int_stat_reg_55xx_t
 *
 * Implemented by: 
 *      cmn_int_stat
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      eng_cnal_if_int_grp_num                   :  4;
     unsigned      eng_cnal_if_int_is_pio                    :  1;
     unsigned      reserved1                                 :  3;
     unsigned      cfg_ring_err_int_grp_num                  :  4;
     unsigned      cfg_ring_err_int_is_pio                   :  1;
     unsigned      reserved2                                 :  1;
     unsigned      cpcq_mem_rd_err_mem_sel                   :  1;
     unsigned      cpcq_mem_rd_err_resp                      :  2;
     unsigned      cpcq_mem_rd_err_group_num                 :  4;
     unsigned      reserved3                                 :  1;
     unsigned      cmn_mem_wr_err_mem_sel                    :  1;
     unsigned      cmn_mem_wr_err_resp                       :  2;
     unsigned      reserved4                                 :  1;
     unsigned      cmn_mem_rd_err_mem_sel                    :  1;
     unsigned      cmn_mem_rd_err_resp                       :  2;
#else    /* Little Endian */
     unsigned      cmn_mem_rd_err_resp                       :  2;
     unsigned      cmn_mem_rd_err_mem_sel                    :  1;
     unsigned      reserved4                                 :  1;
     unsigned      cmn_mem_wr_err_resp                       :  2;
     unsigned      cmn_mem_wr_err_mem_sel                    :  1;
     unsigned      reserved3                                 :  1;
     unsigned      cpcq_mem_rd_err_group_num                 :  4;
     unsigned      cpcq_mem_rd_err_resp                      :  2;
     unsigned      cpcq_mem_rd_err_mem_sel                   :  1;
     unsigned      reserved2                                 :  1;
     unsigned      cfg_ring_err_int_is_pio                   :  1;
     unsigned      cfg_ring_err_int_grp_num                  :  4;
     unsigned      reserved1                                 :  3;
     unsigned      eng_cnal_if_int_is_pio                    :  1;
     unsigned      eng_cnal_if_int_grp_num                   :  4;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_cmn_int_stat_reg_55xx_t;

/*! @struct ncp_nca_mme_input_fifo_hwm_reg_55xx_t
 *  @brief MME Input FIFO High Water Mark
 *  @details The depth at which the MME FIFO asserst backpressure to the MME block.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_input_fifo_hwm_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_input_fifo_hwm </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME input FIFO high water mark. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_input_fifo_hwm_reg_55xx_t
 *
 * Implemented by: 
 *      mme_input_fifo_hwm
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      mme_input_fifo_hwm                        :  5;
#else    /* Little Endian */
     unsigned      mme_input_fifo_hwm                        :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_nca_mme_input_fifo_hwm_reg_55xx_t;

/*! @struct ncp_nca_mem_init_done_reg_55xx_t
 *  @brief Memory Initialization Done
 *  @details This register initializes ECC protected memory.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_init_done_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param do_mem_init </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Do memory initialization. When set, the ota_cpu_vpp_xlat_table
 *        memory, ita_cpu_vpp_xlat_table memory, and ita_vpp_cpu_xlat_table
 *        memory are initialized to zero, and the rec_virt_pipe_ctrl_table
 *        memory is initialized to all ones. This bit clears
 *        itself one cycle after being set.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_init_done </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Memory initialization done. When set, the ota_cpu_vpp_xlat_table
 *        memory, ita_cpu_vpp_xlat_table memory, and ita_vpp_cpu_xlat_table
 *        memory have all been initialized to zero, and the
 *        rec_virt_pipe_ctrl_table memory has been initialized
 *        to all ones, following the setting of the do_mem_init
 *        bit of this register.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_init_done_reg_55xx_t
 *
 * Implemented by: 
 *      mem_init_done
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      do_mem_init                               :  1;
     unsigned      mem_init_done                             :  1;
#else    /* Little Endian */
     unsigned      mem_init_done                             :  1;
     unsigned      do_mem_init                               :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_nca_mem_init_done_reg_55xx_t;

/*! @struct ncp_nca_npgit_load_cpu_grp_indexes_reg_55xx_t
 *  @brief NCA PGIT Load CPU Indexes Register
 *  @details Forces the NPGIT to load the cpu PGITs from memory on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_load_cpu_grp_indexes_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param load_cpu_index_grp </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Load cpu PGIT indexes </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_load_cpu_grp_indexes_reg_55xx_t
 *
 * Implemented by: 
 *      npgit_load_cpu_grp_indexes
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      load_cpu_index_grp                        : 16;
#else    /* Little Endian */
     unsigned      load_cpu_index_grp                        : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_npgit_load_cpu_grp_indexes_reg_55xx_t;

/*! @struct ncp_nca_npgit_init_grp_indexes_reg_55xx_t
 *  @brief NCA PGIT Initialize Group Indexes Register
 *  @details Forces the NPGIT to initialize all the NCA's copies of the consumer and produce PCQ pointers to zero on a group basis.  This makes all of the PCQs in a group empty.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_init_grp_indexes_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param init_index_grp </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Initialize PCQ indexes to zero </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_init_grp_indexes_reg_55xx_t
 *
 * Implemented by: 
 *      npgit_init_grp_indexes
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      init_index_grp                            : 16;
#else    /* Little Endian */
     unsigned      init_index_grp                            : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_npgit_init_grp_indexes_reg_55xx_t;

/*! @struct ncp_nca_grp_load_poke_enable_reg_55xx_t
 *  @brief Group Load Poke Enable
 *  @details Enables load pokes on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_load_poke_enable_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_poke_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables load pokes for the timers that force NPGIT
 *        loads of the cpu managed PGITs from memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_load_poke_enable_reg_55xx_t
 *
 * Implemented by: 
 *      grp_load_poke_enable
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_load_poke_en                          : 16;
#else    /* Little Endian */
     unsigned      grp_load_poke_en                          : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_load_poke_enable_reg_55xx_t;

/*! @struct ncp_nca_grp_load_poke_enable_reg_woclr_55xx_t
 *  @brief Group Load Poke Enable Write One to Clear
 *  @details This is an alias of the grp_load_poke_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_load_poke_enable_reg_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_poke_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables load pokes for the timers that force NPGIT
 *        loads of the cpu managed PGITs from memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_load_poke_enable_reg_woclr_55xx_t
 *
 * Implemented by: 
 *      grp_load_poke_enable_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_load_poke_en                          : 16;
#else    /* Little Endian */
     unsigned      grp_load_poke_en                          : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_load_poke_enable_reg_woclr_55xx_t;

/*! @struct ncp_nca_grp_load_poke_enable_reg_woset_55xx_t
 *  @brief Group Load Poke Enable Write One to Set
 *  @details This is an alias of the grp_load_poke_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_load_poke_enable_reg_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_poke_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables load pokes for the timers that force NPGIT
 *        loads of the cpu managed PGITs from memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_load_poke_enable_reg_woset_55xx_t
 *
 * Implemented by: 
 *      grp_load_poke_enable_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_load_poke_en                          : 16;
#else    /* Little Endian */
     unsigned      grp_load_poke_en                          : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_load_poke_enable_reg_woset_55xx_t;

/*! @struct ncp_nca_grp_load_timer_enable_reg_55xx_t
 *  @brief Group Load Timer Enable
 *  @details Enables load timers on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_load_timer_enable_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_timer_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT loads of the cpu
 *        managed PGITs from memory. Each bit corresponds to
 *        a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_load_timer_enable_reg_55xx_t
 *
 * Implemented by: 
 *      grp_load_timer_enable
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_load_timer_en                         : 16;
#else    /* Little Endian */
     unsigned      grp_load_timer_en                         : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_load_timer_enable_reg_55xx_t;

/*! @struct ncp_nca_grp_load_timer_enable_reg_woclr_55xx_t
 *  @brief Group Load Timer Enable Write One to Clear
 *  @details This is an alias of the grp_load_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_load_timer_enable_reg_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_timer_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT loads of the cpu
 *        managed PGITs from memory. Each bit corresponds to
 *        a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_load_timer_enable_reg_woclr_55xx_t
 *
 * Implemented by: 
 *      grp_load_timer_enable_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_load_timer_en                         : 16;
#else    /* Little Endian */
     unsigned      grp_load_timer_en                         : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_load_timer_enable_reg_woclr_55xx_t;

/*! @struct ncp_nca_grp_load_timer_enable_reg_woset_55xx_t
 *  @brief Group Load Timer Enable Write One to Set
 *  @details This is an alias of the grp_load_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_load_timer_enable_reg_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_load_timer_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT loads of the cpu
 *        managed PGITs from memory. Each bit corresponds to
 *        a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_load_timer_enable_reg_woset_55xx_t
 *
 * Implemented by: 
 *      grp_load_timer_enable_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_load_timer_en                         : 16;
#else    /* Little Endian */
     unsigned      grp_load_timer_en                         : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_load_timer_enable_reg_woset_55xx_t;

/*! @struct ncp_nca_grp_upload_poke_enable_reg_55xx_t
 *  @brief Group Upload Poke Enable
 *  @details Enables upload pokes on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_upload_poke_enable_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_poke_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables upload pokes for the timers that force NPGIT
 *        uploads of the nca managed PGITs to memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_upload_poke_enable_reg_55xx_t
 *
 * Implemented by: 
 *      grp_upload_poke_enable
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_upload_poke_en                        : 16;
#else    /* Little Endian */
     unsigned      grp_upload_poke_en                        : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_upload_poke_enable_reg_55xx_t;

/*! @struct ncp_nca_grp_upload_poke_enable_reg_woclr_55xx_t
 *  @brief Group Upload Poke Enable Write One to Clear
 *  @details This is an alias of the grp_upload_poke_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_upload_poke_enable_reg_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_poke_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables upload pokes for the timers that force NPGIT
 *        uploads of the nca managed PGITs to memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_upload_poke_enable_reg_woclr_55xx_t
 *
 * Implemented by: 
 *      grp_upload_poke_enable_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_upload_poke_en                        : 16;
#else    /* Little Endian */
     unsigned      grp_upload_poke_en                        : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_upload_poke_enable_reg_woclr_55xx_t;

/*! @struct ncp_nca_grp_upload_poke_enable_reg_woset_55xx_t
 *  @brief Group Upload Poke Enable Write One to Set
 *  @details This is an alias of the grp_upload_poke_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_upload_poke_enable_reg_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_poke_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables upload pokes for the timers that force NPGIT
 *        uploads of the nca managed PGITs to memory. Each bit
 *        corresponds to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_upload_poke_enable_reg_woset_55xx_t
 *
 * Implemented by: 
 *      grp_upload_poke_enable_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_upload_poke_en                        : 16;
#else    /* Little Endian */
     unsigned      grp_upload_poke_en                        : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_upload_poke_enable_reg_woset_55xx_t;

/*! @struct ncp_nca_grp_upload_timer_enable_reg_55xx_t
 *  @brief Group Upload Timer Enable
 *  @details Enables upload timers on a group basis.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_upload_timer_enable_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_timer_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT uploads of the
 *        nca managed PGITs to memory. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_upload_timer_enable_reg_55xx_t
 *
 * Implemented by: 
 *      grp_upload_timer_enable
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_upload_timer_en                       : 16;
#else    /* Little Endian */
     unsigned      grp_upload_timer_en                       : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_upload_timer_enable_reg_55xx_t;

/*! @struct ncp_nca_grp_upload_timer_enable_reg_woclr_55xx_t
 *  @brief Group Upload Timer Enable Write One to Clear
 *  @details This is an alias of the grp_upload_timer_enable register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_upload_timer_enable_reg_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_timer_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT uploads of the
 *        nca managed PGITs to memory. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_upload_timer_enable_reg_woclr_55xx_t
 *
 * Implemented by: 
 *      grp_upload_timer_enable_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_upload_timer_en                       : 16;
#else    /* Little Endian */
     unsigned      grp_upload_timer_en                       : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_upload_timer_enable_reg_woclr_55xx_t;

/*! @struct ncp_nca_grp_upload_timer_enable_reg_woset_55xx_t
 *  @brief Group Upload Timer Enable Write One to Set
 *  @details This is an alias of the grp_upload_timer_enable register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_grp_upload_timer_enable_reg_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param grp_upload_timer_en </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enables the timers that force NPGIT uploads of the
 *        nca managed PGITs to memory. Each bit corresponds
 *        to a PCQ group.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_grp_upload_timer_enable_reg_woset_55xx_t
 *
 * Implemented by: 
 *      grp_upload_timer_enable_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      grp_upload_timer_en                       : 16;
#else    /* Little Endian */
     unsigned      grp_upload_timer_en                       : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_grp_upload_timer_enable_reg_woset_55xx_t;

/*! @struct ncp_nca_cfg_pio_cdr3_reg_55xx_t
 *  @brief PIO Mode Command Data Register 3
 *  @details PIO Mode CFG command descrption register 3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cfg_pio_cdr3_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> spare </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> For CR* Commands : unused, For CS* and SM* Commands
 *        : System memory Pool ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_cfg_pio_cdr3_reg_55xx_t
 *
 * Implemented by: 
 *      cfg_pio_cdr3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      spare                                     :  2;
     unsigned      reserved1                                 :  3;
     unsigned      pool_id                                   :  5;
#else    /* Little Endian */
     unsigned      pool_id                                   :  5;
     unsigned      reserved1                                 :  3;
     unsigned      spare                                     :  2;
     unsigned      reserved0                                 : 22;
#endif
} ncp_nca_cfg_pio_cdr3_reg_55xx_t;

/*! @struct ncp_nca_PCQ_desc_reg2_55xx_t
 *  @brief PCQ descriptor Register2
 *  @details Register 2 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_desc_reg2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 28 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_PCQ_desc_reg2_55xx_t
 *
 * Implemented by: 
 *      PCQ_desc_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 28;
     unsigned      q_vi_upper                                :  4;
#else    /* Little Endian */
     unsigned      q_vi_upper                                :  4;
     unsigned      reserved0                                 : 28;
#endif
} ncp_nca_PCQ_desc_reg2_55xx_t;

/*! @struct ncp_nca_PCQ_desc_reg3_55xx_t
 *  @brief PCQ descriptor Register3
 *  @details Register 3 of the PCQ Queue descriptor
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_PCQ_desc_reg3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param q_vi_lower </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> PCQ Queue Base Virtual Index lower bits[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_PCQ_desc_reg3_55xx_t
 *
 * Implemented by: 
 *      PCQ_desc_r3
 */
 
typedef struct
{
     unsigned  int                q_vi_lower;
} ncp_nca_PCQ_desc_reg3_55xx_t;

/*! @struct ncp_nca_mpb_depths_reg0_55xx_t
 *  @brief MME Pool Buffer FIFO Depths Register0
 *  @details MME Pool Buffer FIFO Depths for Size0 and Size1
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_depths_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size0 </td>
 *     <td width="20%" align="center"> 13 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size0[12:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size1[11:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_depths_reg0_55xx_t
 *
 * Implemented by: 
 *      mpb_depths_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      mpb_depth_size0                           : 13;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_depth_size1                           : 12;
#else    /* Little Endian */
     unsigned      mpb_depth_size1                           : 12;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_depth_size0                           : 13;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_mpb_depths_reg0_55xx_t;

/*! @struct ncp_nca_mpb_depths_reg1_55xx_t
 *  @brief MME Pool Buffer FIFO Depths Register1
 *  @details MME Pool Buffer FIFO Depths for Size2 and Size3
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_depths_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size2 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size2[10:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_depth_size3 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO Depth Size3[10:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_depths_reg1_55xx_t
 *
 * Implemented by: 
 *      mpb_depths_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      mpb_depth_size2                           : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_depth_size3                           : 11;
#else    /* Little Endian */
     unsigned      mpb_depth_size3                           : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_depth_size2                           : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_mpb_depths_reg1_55xx_t;

/*! @struct ncp_nca_otbp_vi_reg0_55xx_t
 *  @brief Output Task Backpressure Virtual Index Register0
 *  @details Upper 4 bits of virtual index where output task backpressure is written into memory.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otbp_vi_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Memory select. 0 - system memory, 1 - AXI memory </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pool_id </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Memory pool ID </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_vi_upper </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output Task Backpressure Virtual Index upper bits[35:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_otbp_vi_reg0_55xx_t
 *
 * Implemented by: 
 *      otbp_vi_upper
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved1                                 :  3;
     unsigned      pool_id                                   :  5;
     unsigned      reserved2                                 : 12;
     unsigned      otbp_vi_upper                             :  4;
#else    /* Little Endian */
     unsigned      otbp_vi_upper                             :  4;
     unsigned      reserved2                                 : 12;
     unsigned      pool_id                                   :  5;
     unsigned      reserved1                                 :  3;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_otbp_vi_reg0_55xx_t;

/*! @struct ncp_nca_otbp_vi_reg1_55xx_t
 *  @brief Output Task Backpressure Virtual Index Register1
 *  @details Lower 32 bits of virtual index where output task backpressure is written into memory.  Bits 1:0 are forced to zero.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_otbp_vi_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param otbp_vi_lower </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output Task Backpressure Virtual Index lower bits[31:0] </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 32 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_otbp_vi_reg1_55xx_t
 *
 * Implemented by: 
 *      otbp_vi_lower
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      otbp_vi_lower                             : 30;
     unsigned      reserved0                                 :  2;
#else    /* Little Endian */
     unsigned      reserved0                                 :  2;
     unsigned      otbp_vi_lower                             : 30;
#endif
} ncp_nca_otbp_vi_reg1_55xx_t;

/*! @struct ncp_nca_status_reg3_55xx_t
 *  @brief Interrupt Status Register
 *  @details This register holds interrupt status.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_status_reg3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CMN memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ECC error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param xlat_table_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> translation table error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task data overflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task data underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> COW interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> statistics counters interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> MPB input fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> MME pool buffer fifo ECC interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> MME pool buffer input fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask data memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> aPCQ entry memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> NPGIT memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask memory read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq memory read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq memory write error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> eng_cnal_if interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> config ring error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Status </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_status_reg3_55xx_t
 *
 * Implemented by: 
 *      status_r3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cpcq_mem_rd_er_int                        :  1;
#else    /* Little Endian */
     unsigned      cpcq_mem_rd_er_int                        :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_status_reg3_55xx_t;

/*! @struct ncp_nca_en_reg3_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This register enables interrupts
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CMN memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ECC error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param xlat_table_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> translation table error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task data overflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task data underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> COW interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> statistics counters interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> MPB input fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> MME pool buffer fifo ECC interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> MME pool buffer input fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask data memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> aPCQ entry memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> NPGIT memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq memory write error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> eng_cnal_if interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> config ring error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg3_55xx_t
 *
 * Implemented by: 
 *      en_r3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cpcq_mem_rd_er_int                        :  1;
#else    /* Little Endian */
     unsigned      cpcq_mem_rd_er_int                        :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_en_reg3_55xx_t;

/*! @struct ncp_nca_en_reg3_woclr_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r3 which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg3_woclr_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CMN memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ECC error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param xlat_table_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> translation table error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task data overflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task data underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> COW interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> statistics counters interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> MPB input fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> MME pool buffer fifo ECC interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> MME pool buffer input fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask data memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> aPCQ entry memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> NPGIT memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq memory write error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> eng_cnal_if interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> config ring error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg3_woclr_55xx_t
 *
 * Implemented by: 
 *      en_r3_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cpcq_mem_rd_er_int                        :  1;
#else    /* Little Endian */
     unsigned      cpcq_mem_rd_er_int                        :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_en_reg3_woclr_55xx_t;

/*! @struct ncp_nca_en_reg3_woset_55xx_t
 *  @brief Interrupt Enable Register
 *  @details This is an alias of grp_interrupt_enable_table.en_r3 which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_en_reg3_woset_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CMN memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ECC error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param xlat_table_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> translation table error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task data overflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task data underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> COW interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> statistics counters interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> MPB input fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> MME pool buffer fifo ECC interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> MME pool buffer input fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT fifo overflow/underflow interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask data memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> aPCQ entry memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> NPGIT memory read error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq memory read error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq memory write error Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> eng_cnal_if interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> config ring error interrupt Enable </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Enable
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Enable </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_en_reg3_woset_55xx_t
 *
 * Implemented by: 
 *      en_r3_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cpcq_mem_rd_er_int                        :  1;
#else    /* Little Endian */
     unsigned      cpcq_mem_rd_er_int                        :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_en_reg3_woset_55xx_t;

/*! @struct ncp_nca_force_reg3_55xx_t
 *  @brief Interrupt Force Register
 *  @details This address is an alias for the Interrupt Status register that allows normal CFG writes (as opposed to the Clear-On-Write-One behavior if the Interrupt Status register address is used). This allows CFG to set interrupt bits for testing purposes. Reading this address returns the current value of the Interrupt Status Register.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_force_reg3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CMN memory read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ECC error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param xlat_table_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> translation table error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task data overflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task data underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> COW interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> statistics counters interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> MPB input fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> MME pool buffer fifo ECC interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> MME pool buffer input fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT fifo overflow/underflow interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask data memory write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> aPCQ entry memory read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> NPGIT memory read error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask memory read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq memory read error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq memory write error Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> eng_cnal_if interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> config ring error interrupt Force </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Force
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Force </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_force_reg3_55xx_t
 *
 * Implemented by: 
 *      frc_r3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cpcq_mem_rd_er_int                        :  1;
#else    /* Little Endian */
     unsigned      cpcq_mem_rd_er_int                        :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_force_reg3_55xx_t;

/*! @struct ncp_nca_driving_int_status_reg0_55xx_t
 *  @brief Driving Interrupt Status Register 0
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table.status_r0, grp_interrupt_enable_table.en_r0, and mpic_ctrl are causing interrupt pins to be driven high.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_driving_int_status_reg0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> input tasks have arrived interrupt group15 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> input tasks have arrived interrupt group14 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> input tasks have arrived interrupt group13 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> input tasks have arrived interrupt group12 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> input tasks have arrived interrupt group11 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> input tasks have arrived interrupt group10 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> input tasks have arrived interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> input tasks have arrived interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> input tasks have arrived interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> input tasks have arrived interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> input tasks have arrived interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input tasks have arrived interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> input tasks have arrived interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> input tasks have arrived interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> input tasks have arrived interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_arrival_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> input tasks have arrived interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group15
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group14
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group13
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group12
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group11
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group10
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ completed entry processing interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_driving_int_status_reg0_55xx_t
 *
 * Implemented by: 
 *      driving_int_status_r0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      itask_arrival_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      opcq_complete_int_grp0                    :  1;
     unsigned      opcq_complete_int_grp1                    :  1;
     unsigned      opcq_complete_int_grp2                    :  1;
     unsigned      opcq_complete_int_grp3                    :  1;
     unsigned      opcq_complete_int_grp4                    :  1;
     unsigned      opcq_complete_int_grp5                    :  1;
     unsigned      opcq_complete_int_grp6                    :  1;
     unsigned      opcq_complete_int_grp7                    :  1;
     unsigned      opcq_complete_int_grp8                    :  1;
     unsigned      opcq_complete_int_grp9                    :  1;
     unsigned      opcq_complete_int_grp10                   :  1;
     unsigned      opcq_complete_int_grp11                   :  1;
     unsigned      opcq_complete_int_grp12                   :  1;
     unsigned      opcq_complete_int_grp13                   :  1;
     unsigned      opcq_complete_int_grp14                   :  1;
     unsigned      opcq_complete_int_grp15                   :  1;
     unsigned      itask_arrival_int_grp0                    :  1;
     unsigned      itask_arrival_int_grp1                    :  1;
     unsigned      itask_arrival_int_grp2                    :  1;
     unsigned      itask_arrival_int_grp3                    :  1;
     unsigned      itask_arrival_int_grp4                    :  1;
     unsigned      itask_arrival_int_grp5                    :  1;
     unsigned      itask_arrival_int_grp6                    :  1;
     unsigned      itask_arrival_int_grp7                    :  1;
     unsigned      itask_arrival_int_grp8                    :  1;
     unsigned      itask_arrival_int_grp9                    :  1;
     unsigned      itask_arrival_int_grp10                   :  1;
     unsigned      itask_arrival_int_grp11                   :  1;
     unsigned      itask_arrival_int_grp12                   :  1;
     unsigned      itask_arrival_int_grp13                   :  1;
     unsigned      itask_arrival_int_grp14                   :  1;
     unsigned      itask_arrival_int_grp15                   :  1;
#endif
} ncp_nca_driving_int_status_reg0_55xx_t;

/*! @struct ncp_nca_driving_int_status_reg1_55xx_t
 *  @brief Driving Interrupt Status Register 1
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table.status_r1, grp_interrupt_enable_table.en_r1, and mpic_ctrl are causing interrupt pins to be driven high.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_driving_int_status_reg1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 15 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_inst_compl_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> configuration instruction complete interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 15
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 14
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 13
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 12
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 11
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 10
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 9
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 8
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 7
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 6
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 5
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 4
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 3
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 2
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 1
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_complete_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ completed entry processing interrupt group 0
 *        Status
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_driving_int_status_reg1_55xx_t
 *
 * Implemented by: 
 *      driving_int_status_r1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 15;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp0                    :  1;
#else    /* Little Endian */
     unsigned      cpcq_complete_int_grp0                    :  1;
     unsigned      cpcq_complete_int_grp1                    :  1;
     unsigned      cpcq_complete_int_grp2                    :  1;
     unsigned      cpcq_complete_int_grp3                    :  1;
     unsigned      cpcq_complete_int_grp4                    :  1;
     unsigned      cpcq_complete_int_grp5                    :  1;
     unsigned      cpcq_complete_int_grp6                    :  1;
     unsigned      cpcq_complete_int_grp7                    :  1;
     unsigned      cpcq_complete_int_grp8                    :  1;
     unsigned      cpcq_complete_int_grp9                    :  1;
     unsigned      cpcq_complete_int_grp10                   :  1;
     unsigned      cpcq_complete_int_grp11                   :  1;
     unsigned      cpcq_complete_int_grp12                   :  1;
     unsigned      cpcq_complete_int_grp13                   :  1;
     unsigned      cpcq_complete_int_grp14                   :  1;
     unsigned      cpcq_complete_int_grp15                   :  1;
     unsigned      cfg_inst_compl_int                        :  1;
     unsigned      reserved0                                 : 15;
#endif
} ncp_nca_driving_int_status_reg1_55xx_t;

/*! @struct ncp_nca_driving_int_status_reg2_55xx_t
 *  @brief Driving Interrupt Status Register 2
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table.status_r2, grp_interrupt_enable_table.en_r2, and mpic_ctrl are causing interrupt pins to be driven high.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_driving_int_status_reg2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> cnal access error interrupt group15 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> cnal access error interrupt group14 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> cnal access error interrupt group13 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> cnal access error interrupt group12 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> cnal access error interrupt group11 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> cnal access error interrupt group10 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> cnal access error interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> cnal access error interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> cnal access error interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> cnal access error interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> cnal access error interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> cnal access error interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> cnal access error interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> cnal access error interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> cnal access error interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> cnal access error interrupt group0 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp15 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> configuration ring error interrupt group15 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp14 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> configuration ring error interrupt group14 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp13 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> configuration ring error interrupt group13 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp12 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> configuration ring error interrupt group12 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp11 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> configuration ring error interrupt group11 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp10 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> configuration ring error interrupt group10 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp9 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> configuration ring error interrupt group9 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp8 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> configuration ring error interrupt group8 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> configuration ring error interrupt group7 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp6 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> configuration ring error interrupt group6 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp5 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> configuration ring error interrupt group5 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp4 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> configuration ring error interrupt group4 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp3 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> configuration ring error interrupt group3 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> configuration ring error interrupt group2 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration ring error interrupt group1 Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int_grp0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> configuration ring error interrupt group0 Status </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_driving_int_status_reg2_55xx_t
 *
 * Implemented by: 
 *      driving_int_status_r2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      eng_cnal_if_int_grp15                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp0                     :  1;
#else    /* Little Endian */
     unsigned      cfg_ring_err_int_grp0                     :  1;
     unsigned      cfg_ring_err_int_grp1                     :  1;
     unsigned      cfg_ring_err_int_grp2                     :  1;
     unsigned      cfg_ring_err_int_grp3                     :  1;
     unsigned      cfg_ring_err_int_grp4                     :  1;
     unsigned      cfg_ring_err_int_grp5                     :  1;
     unsigned      cfg_ring_err_int_grp6                     :  1;
     unsigned      cfg_ring_err_int_grp7                     :  1;
     unsigned      cfg_ring_err_int_grp8                     :  1;
     unsigned      cfg_ring_err_int_grp9                     :  1;
     unsigned      cfg_ring_err_int_grp10                    :  1;
     unsigned      cfg_ring_err_int_grp11                    :  1;
     unsigned      cfg_ring_err_int_grp12                    :  1;
     unsigned      cfg_ring_err_int_grp13                    :  1;
     unsigned      cfg_ring_err_int_grp14                    :  1;
     unsigned      cfg_ring_err_int_grp15                    :  1;
     unsigned      eng_cnal_if_int_grp0                      :  1;
     unsigned      eng_cnal_if_int_grp1                      :  1;
     unsigned      eng_cnal_if_int_grp2                      :  1;
     unsigned      eng_cnal_if_int_grp3                      :  1;
     unsigned      eng_cnal_if_int_grp4                      :  1;
     unsigned      eng_cnal_if_int_grp5                      :  1;
     unsigned      eng_cnal_if_int_grp6                      :  1;
     unsigned      eng_cnal_if_int_grp7                      :  1;
     unsigned      eng_cnal_if_int_grp8                      :  1;
     unsigned      eng_cnal_if_int_grp9                      :  1;
     unsigned      eng_cnal_if_int_grp10                     :  1;
     unsigned      eng_cnal_if_int_grp11                     :  1;
     unsigned      eng_cnal_if_int_grp12                     :  1;
     unsigned      eng_cnal_if_int_grp13                     :  1;
     unsigned      eng_cnal_if_int_grp14                     :  1;
     unsigned      eng_cnal_if_int_grp15                     :  1;
#endif
} ncp_nca_driving_int_status_reg2_55xx_t;

/*! @struct ncp_nca_driving_int_status_reg3_55xx_t
 *  @brief Driving Interrupt Status Register 3
 *  @details This register provides status to indicate when corresponding bits in the grp_interrupt_status_table.status_r3, grp_interrupt_enable_table.en_r3, and mpic_ctrl are causing interrupt pins to be driven high.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_driving_int_status_reg3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_fifo_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> CMN fifo error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_rd_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> CMN memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> ECC error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param xlat_table_err_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> translation table error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_overflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Output task data overflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_underflow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Output task data underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cow_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> COW interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param smon_interrupt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> statistics counters interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> MPB input fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> output task accumulator fifo parity error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> input task accumulator fifo parity error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_par_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> NPGIT fifo parity error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_ecc_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> MME pool buffer fifo ECC interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 17 </td>
 *   <td width="30%"> MME pool buffer input fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> output task accumulator fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> input task accumulator fifo overflow/underflow interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_fifo_overflow_underflow_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> NPGIT fifo overflow/underflow interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_no_rbuf_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> itask drop no receive buffer available interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_drop_ipcq_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> itask drop iPCQ error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_data_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> itask data memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param apcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> aPCQ entry memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ipcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> iPCQ entry memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> NPGIT memory write error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param npgit_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> NPGIT memory read error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_data_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> otask memory read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> opcq memory read error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> opcq memory write error Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param eng_cnal_if_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> eng_cnal_if interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cfg_ring_err_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> config ring error interrupt Status </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_mem_wr_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> configuration master node axi write error interrupt
 *        Status
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cpcq_mem_rd_er_int </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> cPCQ axi read error interrupt Status </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_driving_int_status_reg3_55xx_t
 *
 * Implemented by: 
 *      driving_int_status_r3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cpcq_mem_rd_er_int                        :  1;
#else    /* Little Endian */
     unsigned      cpcq_mem_rd_er_int                        :  1;
     unsigned      cmn_mem_wr_er_int                         :  1;
     unsigned      cfg_ring_err_int                          :  1;
     unsigned      eng_cnal_if_int                           :  1;
     unsigned      opcq_entry_mem_wr_er_int                  :  1;
     unsigned      opcq_entry_mem_rd_er_int                  :  1;
     unsigned      otask_data_mem_rd_er_int                  :  1;
     unsigned      npgit_mem_rd_er_int                       :  1;
     unsigned      npgit_mem_wr_er_int                       :  1;
     unsigned      ipcq_entry_mem_wr_er_int                  :  1;
     unsigned      apcq_entry_mem_rd_er_int                  :  1;
     unsigned      itask_data_mem_wr_er_int                  :  1;
     unsigned      itask_drop_ipcq_er_int                    :  1;
     unsigned      itask_drop_no_rbuf_er_int                 :  1;
     unsigned      npgit_fifo_overflow_underflow_int         :  1;
     unsigned      ita_fifo_overflow_underflow_int           :  1;
     unsigned      ota_fifo_overflow_underflow_int           :  1;
     unsigned      mpb_input_fifo_overflow_underflow_int     :  1;
     unsigned      mpb_fifo_ecc_int                          :  1;
     unsigned      npgit_fifo_par_err_int                    :  1;
     unsigned      ita_fifo_par_err_int                      :  1;
     unsigned      ota_fifo_par_err_int                      :  1;
     unsigned      mpb_input_fifo_par_err_int                :  1;
     unsigned      smon_interrupt                            :  1;
     unsigned      cow_interrupt                             :  1;
     unsigned      otask_data_underflow_interrupt            :  1;
     unsigned      otask_data_overflow_interrupt             :  1;
     unsigned      xlat_table_err_interrupt                  :  1;
     unsigned      ecc_err_interrupt                         :  1;
     unsigned      cmn_mem_rd_err_int                        :  1;
     unsigned      cmn_fifo_err_int                          :  1;
     unsigned      reserved0                                 :  1;
#endif
} ncp_nca_driving_int_status_reg3_55xx_t;

/*! @struct ncp_nca_ota_fifo_full_empty_status_reg_0_55xx_t
 *  @brief Output Task Accumulator FIFO Full Empty Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_full_empty_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_full_empty_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_full_empty_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair11     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair0      :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_srbf_fifo_full_empty_pair0      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_srbf_fifo_full_empty_pair11     :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_full_empty_status_reg_0_55xx_t;

/*! @struct ncp_nca_ota_fifo_full_empty_status_reg_1_55xx_t
 *  @brief Output Task Accumulator FIFO Full Empty Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_full_empty_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_full_empty_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_full_empty_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair11     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair0      :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_arbf_fifo_full_empty_pair0      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair1      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair2      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair3      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair4      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair5      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair6      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair7      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair8      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair9      :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair10     :  2;
     unsigned      opcq_reng_arbf_fifo_full_empty_pair11     :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_full_empty_status_reg_1_55xx_t;

/*! @struct ncp_nca_ota_fifo_full_empty_status_reg_2_55xx_t
 *  @brief Output Task Accumulator FIFO Full Empty Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_full_empty_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_full_empty_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_full_empty_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      otask_reng_srbf_fifo_full_empty_pair11    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair0     :  2;
#else    /* Little Endian */
     unsigned      otask_reng_srbf_fifo_full_empty_pair0     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_srbf_fifo_full_empty_pair11    :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_full_empty_status_reg_2_55xx_t;

/*! @struct ncp_nca_ota_fifo_full_empty_status_reg_3_55xx_t
 *  @brief Output Task Accumulator FIFO Full Empty Status Register 3
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_full_empty_status_reg_3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_full_empty_status_reg_3_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_full_empty_status_reg3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      otask_reng_arbf_fifo_full_empty_pair11    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair0     :  2;
#else    /* Little Endian */
     unsigned      otask_reng_arbf_fifo_full_empty_pair0     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair1     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair2     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair3     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair4     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair5     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair6     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair7     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair8     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair9     :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair10    :  2;
     unsigned      otask_reng_arbf_fifo_full_empty_pair11    :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_full_empty_status_reg_3_55xx_t;

/*! @struct ncp_nca_ota_fifo_full_empty_status_reg_4_55xx_t
 *  @brief Output Task Accumulator FIFO Full Empty Status Register 4
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_full_empty_status_reg_4_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output data buffer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ index FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_update_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ index update FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT read FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT write FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Pointer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine request FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine request FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_full_empty_status_reg_4_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_full_empty_status_reg4
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      odb_fifo_full_empty_pair                  :  2;
     unsigned      opcq_index_fifo_full_empty_pair           :  2;
     unsigned      opcq_index_update_fifo_full_empty_pair    :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      opcq_entry_fifo_full_empty_pair           :  2;
     unsigned      ptr_fifo_full_empty_pair                  :  2;
     unsigned      otask_reng_req_fifo_full_empty_pair       :  2;
     unsigned      opcq_reng_req_fifo_full_empty_pair        :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_req_fifo_full_empty_pair        :  2;
     unsigned      otask_reng_req_fifo_full_empty_pair       :  2;
     unsigned      ptr_fifo_full_empty_pair                  :  2;
     unsigned      opcq_entry_fifo_full_empty_pair           :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      opcq_index_update_fifo_full_empty_pair    :  2;
     unsigned      opcq_index_fifo_full_empty_pair           :  2;
     unsigned      odb_fifo_full_empty_pair                  :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_nca_ota_fifo_full_empty_status_reg_4_55xx_t;

/*! @struct ncp_nca_ita_fifo_full_empty_status_reg_0_55xx_t
 *  @brief Input Task Accumulator FIFO Full Empty Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_full_empty_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_full_empty_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_full_empty_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ita_fifo_full_empty_status_reg_0_55xx_t;

/*! @struct ncp_nca_ita_fifo_full_empty_status_reg_1_55xx_t
 *  @brief Input Task Accumulator FIFO Full Empty Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_full_empty_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_full_empty_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_full_empty_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ita_fifo_full_empty_status_reg_1_55xx_t;

/*! @struct ncp_nca_ita_fifo_full_empty_status_reg_2_55xx_t
 *  @brief Input Task Accumulator FIFO Full Empty Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_full_empty_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param debug_data_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Debug data FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Input task data buffer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ptr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Input task pointer FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Task contents read interface FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Input task header FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Input task queue ID FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Input task delete task ID FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT read FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> PGIT write FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO full empty status pair. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_full_empty_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_full_empty_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      debug_data_fifo_full_empty_pair           :  2;
     unsigned      idb_fifo_full_empty_pair                  :  2;
     unsigned      itask_ptr_fifo_full_empty_pair            :  2;
     unsigned      tcri_data_fifo_full_empty_pair            :  2;
     unsigned      itask_header_fifo_full_empty_pair         :  2;
     unsigned      itask_qid_fifo_full_empty_pair            :  2;
     unsigned      itask_delete_tid_fifo_full_empty_pair     :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      reng_req_fifo_full_empty_pair             :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      itask_delete_tid_fifo_full_empty_pair     :  2;
     unsigned      itask_qid_fifo_full_empty_pair            :  2;
     unsigned      itask_header_fifo_full_empty_pair         :  2;
     unsigned      tcri_data_fifo_full_empty_pair            :  2;
     unsigned      itask_ptr_fifo_full_empty_pair            :  2;
     unsigned      idb_fifo_full_empty_pair                  :  2;
     unsigned      debug_data_fifo_full_empty_pair           :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ita_fifo_full_empty_status_reg_2_55xx_t;

/*! @struct ncp_nca_npgit_fifo_full_empty_status_reg_0_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Full Empty Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_full_empty_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO full
 *        empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_full_empty_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_full_empty_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_srbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_srbf_fifo_full_empty_pair11          :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_npgit_fifo_full_empty_status_reg_0_55xx_t;

/*! @struct ncp_nca_npgit_fifo_full_empty_status_reg_1_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Full Empty Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_full_empty_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO full empty
 *        status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_full_empty_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_full_empty_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_full_empty_pair0           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair1           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair2           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair3           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair4           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair5           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair6           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair7           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair8           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair9           :  2;
     unsigned      reng_arbf_fifo_full_empty_pair10          :  2;
     unsigned      reng_arbf_fifo_full_empty_pair11          :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_npgit_fifo_full_empty_status_reg_1_55xx_t;

/*! @struct ncp_nca_npgit_fifo_full_empty_status_reg_2_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Full Empty Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_full_empty_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO full empty status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO full empty status pair. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_full_empty_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_full_empty_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      reng_req_fifo_full_empty_pair             :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_full_empty_pair             :  2;
     unsigned      weng_wdb_fifo_full_empty_pair             :  2;
     unsigned      weng_req_fifo_full_empty_pair             :  2;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_npgit_fifo_full_empty_status_reg_2_55xx_t;

/*! @struct ncp_nca_mpb_input_fifo_full_empty_status_reg_55xx_t
 *  @brief MME Pool Buffer Input FIFO Full Empty Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_input_fifo_full_empty_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME input FIFO full empty status pair. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_input_fifo_full_empty_status_reg_55xx_t
 *
 * Implemented by: 
 *      mpb_input_fifo_full_empty_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      mpb_input_fifo_full_empty_pair            :  2;
#else    /* Little Endian */
     unsigned      mpb_input_fifo_full_empty_pair            :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_nca_mpb_input_fifo_full_empty_status_reg_55xx_t;

/*! @struct ncp_nca_cmn_fifo_full_empty_status_reg_55xx_t
 *  @brief Congiguration Ring Master Node FIFO Full Empty Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cmn_fifo_full_empty_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> PGIT read FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> PGIT write FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> CMN Write engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_wdb_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> CMN Write engine write data buffer FIFO full empty
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_req_fifo_full_empty_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CMN Read engine request FIFO full empty status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_arbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CMN Read engine AXI memory reorder buffer FIFO full
 *        empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_arbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CMN Read engine AXI memory reorder buffer FIFO full
 *        empty status pair 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_srbf_fifo_full_empty_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CMN Read engine system memory reorder buffer FIFO
 *        full empty status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_srbf_fifo_full_empty_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CMN Read engine system memory reorder buffer FIFO
 *        full empty status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_cmn_fifo_full_empty_status_reg_55xx_t
 *
 * Implemented by: 
 *      cmn_fifo_full_empty_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      cmn_weng_req_fifo_full_empty_pair         :  2;
     unsigned      cmn_weng_wdb_fifo_full_empty_pair         :  2;
     unsigned      cmn_reng_req_fifo_full_empty_pair         :  2;
     unsigned      cmn_reng_arbf_fifo_full_empty_pair1       :  2;
     unsigned      cmn_reng_arbf_fifo_full_empty_pair0       :  2;
     unsigned      cmn_reng_srbf_fifo_full_empty_pair1       :  2;
     unsigned      cmn_reng_srbf_fifo_full_empty_pair0       :  2;
#else    /* Little Endian */
     unsigned      cmn_reng_srbf_fifo_full_empty_pair0       :  2;
     unsigned      cmn_reng_srbf_fifo_full_empty_pair1       :  2;
     unsigned      cmn_reng_arbf_fifo_full_empty_pair0       :  2;
     unsigned      cmn_reng_arbf_fifo_full_empty_pair1       :  2;
     unsigned      cmn_reng_req_fifo_full_empty_pair         :  2;
     unsigned      cmn_weng_wdb_fifo_full_empty_pair         :  2;
     unsigned      cmn_weng_req_fifo_full_empty_pair         :  2;
     unsigned      pgitw_fifo_full_empty_pair                :  2;
     unsigned      pgitr_fifo_full_empty_pair                :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_nca_cmn_fifo_full_empty_status_reg_55xx_t;

/*! @struct ncp_nca_ota_fifo_overflow_underflow_status_reg_0_55xx_t
 *  @brief Output Task Accumulator FIFO Overflow Underflow Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_overflow_underflow_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_overflow_underflow_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_overflow_underflow_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_overflow_underflow_status_reg_0_55xx_t;

/*! @struct ncp_nca_ota_fifo_overflow_underflow_status_reg_1_55xx_t
 *  @brief Output Task Accumulator FIFO Overflow Underflow Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_overflow_underflow_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_overflow_underflow_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_overflow_underflow_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      opcq_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_overflow_underflow_status_reg_1_55xx_t;

/*! @struct ncp_nca_ota_fifo_overflow_underflow_status_reg_2_55xx_t
 *  @brief Output Task Accumulator FIFO Overflow Underflow Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_overflow_underflow_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_overflow_underflow_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_overflow_underflow_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_overflow_underflow_status_reg_2_55xx_t;

/*! @struct ncp_nca_ota_fifo_overflow_underflow_status_reg_3_55xx_t
 *  @brief Output Task Accumulator FIFO Overflow Underflow Status Register 3
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_overflow_underflow_status_reg_3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_overflow_underflow_status_reg_3_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_overflow_underflow_status_reg3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair2  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair3  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair4  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair5  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair6  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair7  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair8  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair9  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      otask_reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ota_fifo_overflow_underflow_status_reg_3_55xx_t;

/*! @struct ncp_nca_ota_fifo_overflow_underflow_status_reg_4_55xx_t
 *  @brief Output Task Accumulator FIFO Overflow Underflow Status Register 4
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_overflow_underflow_status_reg_4_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param odb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output data buffer FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> oPCQ index FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_index_update_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ index update FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> PGIT read FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT write FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> oPCQ entry FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Pointer FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Output task read engine request FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine request FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_overflow_underflow_status_reg_4_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_overflow_underflow_status_reg4
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      odb_fifo_overflow_underflow_pair          :  2;
     unsigned      opcq_index_fifo_overflow_underflow_pair   :  2;
     unsigned      opcq_index_update_fifo_overflow_underflow_pair  :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      opcq_entry_fifo_overflow_underflow_pair   :  2;
     unsigned      ptr_fifo_overflow_underflow_pair          :  2;
     unsigned      otask_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      opcq_reng_req_fifo_overflow_underflow_pair  :  2;
#else    /* Little Endian */
     unsigned      opcq_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      otask_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      ptr_fifo_overflow_underflow_pair          :  2;
     unsigned      opcq_entry_fifo_overflow_underflow_pair   :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      opcq_index_update_fifo_overflow_underflow_pair  :  2;
     unsigned      opcq_index_fifo_overflow_underflow_pair   :  2;
     unsigned      odb_fifo_overflow_underflow_pair          :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_nca_ota_fifo_overflow_underflow_status_reg_4_55xx_t;

/*! @struct ncp_nca_ita_fifo_overflow_underflow_status_reg_0_55xx_t
 *  @brief Input Task Accumulator FIFO Overflow Underflow Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_overflow_underflow_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_overflow_underflow_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_overflow_underflow_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ita_fifo_overflow_underflow_status_reg_0_55xx_t;

/*! @struct ncp_nca_ita_fifo_overflow_underflow_status_reg_1_55xx_t
 *  @brief Input Task Accumulator FIFO Overflow Underflow Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_overflow_underflow_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_overflow_underflow_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_overflow_underflow_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ita_fifo_overflow_underflow_status_reg_1_55xx_t;

/*! @struct ncp_nca_ita_fifo_overflow_underflow_status_reg_2_55xx_t
 *  @brief Input Task Accumulator FIFO Overflow Underflow Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_overflow_underflow_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param debug_data_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Debug data FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param idb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Input task dta buffer FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_ptr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Input task pointer FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param tcri_data_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Task contents read interface FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_header_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Input task header FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_qid_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Input task queue ID FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param itask_delete_tid_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Input task delete task ID FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> PGIT read FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> PGIT write FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_overflow_underflow_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_overflow_underflow_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      debug_data_fifo_overflow_underflow_pair   :  2;
     unsigned      idb_fifo_overflow_underflow_pair          :  2;
     unsigned      itask_ptr_fifo_overflow_underflow_pair    :  2;
     unsigned      tcri_data_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_header_fifo_overflow_underflow_pair  :  2;
     unsigned      itask_qid_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_delete_tid_fifo_overflow_underflow_pair  :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      itask_delete_tid_fifo_overflow_underflow_pair  :  2;
     unsigned      itask_qid_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_header_fifo_overflow_underflow_pair  :  2;
     unsigned      tcri_data_fifo_overflow_underflow_pair    :  2;
     unsigned      itask_ptr_fifo_overflow_underflow_pair    :  2;
     unsigned      idb_fifo_overflow_underflow_pair          :  2;
     unsigned      debug_data_fifo_overflow_underflow_pair   :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ita_fifo_overflow_underflow_status_reg_2_55xx_t;

/*! @struct ncp_nca_npgit_fifo_overflow_underflow_status_reg_0_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Overflow Underflow Status Register 0
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_overflow_underflow_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_overflow_underflow_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_overflow_underflow_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_srbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_npgit_fifo_overflow_underflow_status_reg_0_55xx_t;

/*! @struct ncp_nca_npgit_fifo_overflow_underflow_status_reg_1_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Overflow Underflow Status Register 1
 *  @details Value of the full and empty flags for the fifos indicated.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_overflow_underflow_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair11 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 11.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair10 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 10.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair9 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 9.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair8 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 8.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair7 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 7.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair6 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 6.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair5 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 5.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair4 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 4.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 3.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 2.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_overflow_underflow_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_overflow_underflow_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
#else    /* Little Endian */
     unsigned      reng_arbf_fifo_overflow_underflow_pair0   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair1   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair2   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair3   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair4   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair5   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair6   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair7   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair8   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair9   :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair10  :  2;
     unsigned      reng_arbf_fifo_overflow_underflow_pair11  :  2;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_npgit_fifo_overflow_underflow_status_reg_1_55xx_t;

/*! @struct ncp_nca_npgit_fifo_overflow_underflow_status_reg_2_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Overflow Underflow Status Register 2
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_overflow_underflow_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 26 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Write engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Write engine write data buffer FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_overflow_underflow_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_overflow_underflow_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 26;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
#else    /* Little Endian */
     unsigned      reng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_wdb_fifo_overflow_underflow_pair     :  2;
     unsigned      weng_req_fifo_overflow_underflow_pair     :  2;
     unsigned      reserved0                                 : 26;
#endif
} ncp_nca_npgit_fifo_overflow_underflow_status_reg_2_55xx_t;

/*! @struct ncp_nca_mpb_input_fifo_overflow_underflow_status_reg_55xx_t
 *  @brief MME Pool Buffer Input FIFO Overflow Underflow Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_input_fifo_overflow_underflow_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME input FIFO overflow underflow status pair. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_input_fifo_overflow_underflow_status_reg_55xx_t
 *
 * Implemented by: 
 *      mpb_input_fifo_overflow_underflow_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      mpb_input_fifo_overflow_underflow_pair    :  2;
#else    /* Little Endian */
     unsigned      mpb_input_fifo_overflow_underflow_pair    :  2;
     unsigned      reserved0                                 : 30;
#endif
} ncp_nca_mpb_input_fifo_overflow_underflow_status_reg_55xx_t;

/*! @struct ncp_nca_cmn_fifo_overflow_underflow_status_reg_55xx_t
 *  @brief Congiguration Ring Master Node FIFO Overflow Underflow Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cmn_fifo_overflow_underflow_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 14 </td>
 *     <td width="20%" align="center"> 18 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitr_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> PGIT read FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param pgitw_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> PGIT write FIFO overflow underflow status pair. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> CMN Write engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_wdb_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> CMN Write engine write data buffer FIFO overflow underflow
 *        status pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_req_fifo_overflow_underflow_pair </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> CMN Read engine request FIFO overflow underflow status
 *        pair.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_arbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CMN Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_arbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CMN Read engine AXI memory reorder buffer FIFO overflow
 *        underflow status pair 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_srbf_fifo_overflow_underflow_pair1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CMN Read engine system memory reorder buffer FIFO
 *        overflow underflow status pair 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_srbf_fifo_overflow_underflow_pair0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CMN Read engine system memory reorder buffer FIFO
 *        overflow underflow status pair 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_cmn_fifo_overflow_underflow_status_reg_55xx_t
 *
 * Implemented by: 
 *      cmn_fifo_overflow_underflow_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 14;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      cmn_weng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      cmn_weng_wdb_fifo_overflow_underflow_pair  :  2;
     unsigned      cmn_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      cmn_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cmn_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      cmn_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cmn_reng_srbf_fifo_overflow_underflow_pair0  :  2;
#else    /* Little Endian */
     unsigned      cmn_reng_srbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      cmn_reng_srbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cmn_reng_arbf_fifo_overflow_underflow_pair0  :  2;
     unsigned      cmn_reng_arbf_fifo_overflow_underflow_pair1  :  2;
     unsigned      cmn_reng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      cmn_weng_wdb_fifo_overflow_underflow_pair  :  2;
     unsigned      cmn_weng_req_fifo_overflow_underflow_pair  :  2;
     unsigned      pgitw_fifo_overflow_underflow_pair        :  2;
     unsigned      pgitr_fifo_overflow_underflow_pair        :  2;
     unsigned      reserved0                                 : 14;
#endif
} ncp_nca_cmn_fifo_overflow_underflow_status_reg_55xx_t;

/*! @struct ncp_nca_ota_fifo_par_err_status_reg_0_55xx_t
 *  @brief Output Task Accumulator FIFO Parity Error Status Register 0
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_par_err_status_reg_0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> oPCQ entry read engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> oPCQ entry read engine AXI memory reorder buffer FIFO
 *        parity error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> oPCQ entry read engine system memory reorder buffer
 *        FIFO parity error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_par_err_status_reg_0_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_par_err_status_reg0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      opcq_reng_req_fifo_par_err_status         :  1;
     unsigned      opcq_reng_arbf_fifo_par_err_status        : 12;
     unsigned      opcq_reng_srbf_fifo_par_err_status        : 12;
#else    /* Little Endian */
     unsigned      opcq_reng_srbf_fifo_par_err_status        : 12;
     unsigned      opcq_reng_arbf_fifo_par_err_status        : 12;
     unsigned      opcq_reng_req_fifo_par_err_status         :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_ota_fifo_par_err_status_reg_0_55xx_t;

/*! @struct ncp_nca_ota_fifo_par_err_status_reg_1_55xx_t
 *  @brief Output Task Accumulator FIFO Parity Error Status Register 1
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_par_err_status_reg_1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Output task read engine request FIFO parity error
 *        flag.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Output task read engine AXI memory reorder buffer
 *        FIFO parity error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param otask_reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Output task read engine system memory reorder buffer
 *        FIFO parity error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_par_err_status_reg_1_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_par_err_status_reg1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  7;
     unsigned      otask_reng_req_fifo_par_err_status        :  1;
     unsigned      otask_reng_arbf_fifo_par_err_status       : 12;
     unsigned      otask_reng_srbf_fifo_par_err_status       : 12;
#else    /* Little Endian */
     unsigned      otask_reng_srbf_fifo_par_err_status       : 12;
     unsigned      otask_reng_arbf_fifo_par_err_status       : 12;
     unsigned      otask_reng_req_fifo_par_err_status        :  1;
     unsigned      reserved0                                 :  7;
#endif
} ncp_nca_ota_fifo_par_err_status_reg_1_55xx_t;

/*! @struct ncp_nca_ota_fifo_par_err_status_reg_2_55xx_t
 *  @brief Output Task Accumulator FIFO Parity Error Status Register 2
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ota_fifo_par_err_status_reg_2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 30 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param opcq_entry_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> oPCQ entry FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Pointer FIFO parity error flag. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ota_fifo_par_err_status_reg_2_55xx_t
 *
 * Implemented by: 
 *      ota_fifo_par_err_status_reg2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 30;
     unsigned      opcq_entry_fifo_par_err_status            :  1;
     unsigned      ptr_fifo_par_err_status                   :  1;
#else    /* Little Endian */
     unsigned      ptr_fifo_par_err_status                   :  1;
     unsigned      opcq_entry_fifo_par_err_status            :  1;
     unsigned      reserved0                                 : 30;
#endif
} ncp_nca_ota_fifo_par_err_status_reg_2_55xx_t;

/*! @struct ncp_nca_ita_fifo_par_err_status_reg_55xx_t
 *  @brief Input Task Accumulator FIFO Parity Error Status
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ita_fifo_par_err_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ptr_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Input task pointer FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Write engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Write engine write data buffer FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ita_fifo_par_err_status_reg_55xx_t
 *
 * Implemented by: 
 *      ita_fifo_par_err_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      ptr_fifo_par_err_status                   :  1;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_srbf_fifo_par_err_status             : 12;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_par_err_status             : 12;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      ptr_fifo_par_err_status                   :  1;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_ita_fifo_par_err_status_reg_55xx_t;

/*! @struct ncp_nca_npgit_fifo_par_err_status_reg_55xx_t
 *  @brief NCA PCQ Group Index Table FIFO Parity Error Status
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_npgit_fifo_par_err_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Write engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param weng_wdb_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Write engine write data buffer FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_req_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Read engine request FIFO parity error flag. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_arbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Read engine AXI memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reng_srbf_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Read engine system memory reorder buffer FIFO parity
 *        error flags.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_npgit_fifo_par_err_status_reg_55xx_t
 *
 * Implemented by: 
 *      npgit_fifo_par_err_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_srbf_fifo_par_err_status             : 12;
#else    /* Little Endian */
     unsigned      reng_srbf_fifo_par_err_status             : 12;
     unsigned      reng_arbf_fifo_par_err_status             : 12;
     unsigned      reng_req_fifo_par_err_status              :  1;
     unsigned      weng_wdb_fifo_par_err_status              :  1;
     unsigned      weng_req_fifo_par_err_status              :  1;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_npgit_fifo_par_err_status_reg_55xx_t;

/*! @struct ncp_nca_mpb_input_fifo_par_err_status_reg_55xx_t
 *  @brief MME Pool Buffer Input FIFO Parity Error Status
 *  @details Value of the parity error flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_input_fifo_par_err_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 31 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_input_fifo_par_err_status </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer input FIFO parity error flag. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_input_fifo_par_err_status_reg_55xx_t
 *
 * Implemented by: 
 *      mpb_input_fifo_par_err_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 31;
     unsigned      mpb_input_fifo_par_err_status             :  1;
#else    /* Little Endian */
     unsigned      mpb_input_fifo_par_err_status             :  1;
     unsigned      reserved0                                 : 31;
#endif
} ncp_nca_mpb_input_fifo_par_err_status_reg_55xx_t;

/*! @struct ncp_nca_cmn_fifo_par_err_status_reg_55xx_t
 *  @brief Congiguration Ring Master Node FIFO Parity Error Status Register
 *  @details Value of the full and empty flags for the fifos indicated
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_cmn_fifo_par_err_status_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 25 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_req_fifo_par_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> CMN Write engine request FIFO parity error status. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_weng_wdb_fifo_par_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> CMN Write engine write data buffer FIFO parity error
 *        status.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_req_fifo_par_err </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> CMN Read engine request FIFO parity error status. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_arbf_fifo_par_err1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> CMN Read engine AXI memory reorder buffer FIFO parity
 *        error status 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_arbf_fifo_par_err0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> CMN Read engine AXI memory reorder buffer FIFO parity
 *        error status 0.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_srbf_fifo_par_err1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> CMN Read engine system memory reorder buffer FIFO
 *        parity error status 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cmn_reng_srbf_fifo_par_err0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> CMN Read engine system memory reorder buffer FIFO
 *        parity error status 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_cmn_fifo_par_err_status_reg_55xx_t
 *
 * Implemented by: 
 *      cmn_fifo_par_err_status
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 25;
     unsigned      cmn_weng_req_fifo_par_err                 :  1;
     unsigned      cmn_weng_wdb_fifo_par_err                 :  1;
     unsigned      cmn_reng_req_fifo_par_err                 :  1;
     unsigned      cmn_reng_arbf_fifo_par_err1               :  1;
     unsigned      cmn_reng_arbf_fifo_par_err0               :  1;
     unsigned      cmn_reng_srbf_fifo_par_err1               :  1;
     unsigned      cmn_reng_srbf_fifo_par_err0               :  1;
#else    /* Little Endian */
     unsigned      cmn_reng_srbf_fifo_par_err0               :  1;
     unsigned      cmn_reng_srbf_fifo_par_err1               :  1;
     unsigned      cmn_reng_arbf_fifo_par_err0               :  1;
     unsigned      cmn_reng_arbf_fifo_par_err1               :  1;
     unsigned      cmn_reng_req_fifo_par_err                 :  1;
     unsigned      cmn_weng_wdb_fifo_par_err                 :  1;
     unsigned      cmn_weng_req_fifo_par_err                 :  1;
     unsigned      reserved0                                 : 25;
#endif
} ncp_nca_cmn_fifo_par_err_status_reg_55xx_t;

/*! @struct ncp_nca_max_outstanding_mem_ops_reg_55xx_t
 *  @brief Maximum Outstanding Memory Operations
 *  @details This register sets the maximum number of outstanding memory read and write operations allowed for many of the NCA's data types.  The value in each field is set to one less than the desired number of outstanding operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_max_outstanding_mem_ops_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_itask_data_mops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Maximum number of outstanding input task accumulator
 *        read and write operations allowed (0 = 1, 1 = 2, 2
 *        = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_npgit_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Maximum number of outstanding NCA PCQ group index
 *        table write operations allowed (0 = 1, 1 = 2, 2 =
 *        3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_npgit_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Maximum number of outstanding NCA PCQ group index
 *        table read operations allowed (0 = 1, 1 = 2, 2 = 3,
 *        etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_otask_data_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum number of outstanding output task data read
 *        operations allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_apcq_entry_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Maximum number of outstanding aPCQ entry read operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_outstanding_am_opcq_entry_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Maximum number of outstanding oPCQ read operations
 *        allowed (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_max_outstanding_mem_ops_reg_55xx_t
 *
 * Implemented by: 
 *      max_outstanding_mem_ops
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      max_outstanding_am_itask_data_mops        :  4;
     unsigned      max_outstanding_npgit_wops                :  4;
     unsigned      max_outstanding_npgit_rops                :  4;
     unsigned      max_outstanding_am_otask_data_rops        :  4;
     unsigned      max_outstanding_am_apcq_entry_rops        :  4;
     unsigned      max_outstanding_am_opcq_entry_rops        :  4;
#else    /* Little Endian */
     unsigned      max_outstanding_am_opcq_entry_rops        :  4;
     unsigned      max_outstanding_am_apcq_entry_rops        :  4;
     unsigned      max_outstanding_am_otask_data_rops        :  4;
     unsigned      max_outstanding_npgit_rops                :  4;
     unsigned      max_outstanding_npgit_wops                :  4;
     unsigned      max_outstanding_am_itask_data_mops        :  4;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_max_outstanding_mem_ops_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter_ctl_reg_55xx_t
 *  @brief Memory Operation Counter Control Register
 *  @details Controls the Memory Operation Counters
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter_ctl_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_sel </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Memory select. Determines whether the memory operation
 *        counters monitor system memory or AXI memory. 0 -
 *        system memory, 1 - AXI memory
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param clk_cnt_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Indicates when the clock counter has overflowed (1:
 *        Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt3_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Indicates when memory operation counter 3 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt2_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Indicates when memory operation counter 2 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt1_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 25 </td>
 *   <td width="30%"> Indicates when memory operation counter 1 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt0_ovfl </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Indicates when memory operation counter 0 has overflowed
 *        (1: Overflow, 0: No overflow).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt3_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 20 </td>
 *   <td width="30%"> Memory operation counter 3 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt2_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Memory operation counter 2 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt1_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Memory operation counter 1 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt0_sel </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Memory operation counter 0 increment select. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_lat_mode </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Counter latency mode. Puts the memory operation counters
 *        in latency mode, and selects a type of access. When
 *        in latency mode, memory operation counter0 contains
 *        the minimum latency seen, memory operation counter1
 *        contains the maximum latency seen, and memory operation
 *        counter2 contains the total latency seen. memory operation
 *        counter3 contains the number of transactions seen
 *        for ID 0 of the selected type of access, except for
 *        the three types of ready low latency. For ready
 *        low latency, counter3 counts the number of times ready
 *        is low when valid first went high (like non-latency
 *        mode).
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param spare </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Spare bits. They can be written and read, but are
 *        currently unconnected.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_halt </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> If set, halt all memory operation counters when any
 *        counter overflows (>2**48-1). Note that the overflow
 *        indication for each counter is available as the *_ovfl
 *        bits of this register
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param cnt_enable </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Enable all memory operation counters (1: run, 0: stop). </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter_ctl_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter_ctl
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  2;
     unsigned      mem_sel                                   :  1;
     unsigned      clk_cnt_ovfl                              :  1;
     unsigned      cnt3_ovfl                                 :  1;
     unsigned      cnt2_ovfl                                 :  1;
     unsigned      cnt1_ovfl                                 :  1;
     unsigned      cnt0_ovfl                                 :  1;
     unsigned      cnt3_sel                                  :  4;
     unsigned      cnt2_sel                                  :  4;
     unsigned      cnt1_sel                                  :  4;
     unsigned      cnt0_sel                                  :  4;
     unsigned      cnt_lat_mode                              :  4;
     unsigned      spare                                     :  2;
     unsigned      cnt_halt                                  :  1;
     unsigned      cnt_enable                                :  1;
#else    /* Little Endian */
     unsigned      cnt_enable                                :  1;
     unsigned      cnt_halt                                  :  1;
     unsigned      spare                                     :  2;
     unsigned      cnt_lat_mode                              :  4;
     unsigned      cnt0_sel                                  :  4;
     unsigned      cnt1_sel                                  :  4;
     unsigned      cnt2_sel                                  :  4;
     unsigned      cnt3_sel                                  :  4;
     unsigned      cnt0_ovfl                                 :  1;
     unsigned      cnt1_ovfl                                 :  1;
     unsigned      cnt2_ovfl                                 :  1;
     unsigned      cnt3_ovfl                                 :  1;
     unsigned      clk_cnt_ovfl                              :  1;
     unsigned      mem_sel                                   :  1;
     unsigned      reserved0                                 :  2;
#endif
} ncp_nca_mem_op_counter_ctl_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter0_ls_reg_55xx_t
 *  @brief Memory Operation Counter0 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter0 value.  Contains the minimum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter0_ls_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter0 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter0_ls_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter0_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_mem_op_counter0_ls_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter1_ls_reg_55xx_t
 *  @brief Memory Operation Counter1 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter1 value.  Contains the maximum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter1_ls_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter1 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter1_ls_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter1_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_mem_op_counter1_ls_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter2_ls_reg_55xx_t
 *  @brief Memory Operation Counter2 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter2 value.  Contains the total latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter2_ls_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter2 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter2_ls_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter2_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_mem_op_counter2_ls_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter3_ls_reg_55xx_t
 *  @brief Memory Operation Counter3 LS Register
 *  @details Contains the lower 32 bits of the 48b memory operation counter3 value.  Contains the number of transactions seen for ID 0 of the selected type of access when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter3_ls_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param count_ls </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter3 count[31:0] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter3_ls_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter3_ls
 */
 
typedef struct
{
     unsigned  int                  count_ls;
} ncp_nca_mem_op_counter3_ls_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter0_ms_reg_55xx_t
 *  @brief Memory Operation Counter0 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter0 value.  Contains the minimum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter0_ms_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter0 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter0_ms_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter0_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_mem_op_counter0_ms_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter1_ms_reg_55xx_t
 *  @brief Memory Operation Counter1 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter1 value.  Contains the maximum latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter1_ms_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter1 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter1_ms_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter1_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_mem_op_counter1_ms_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter2_ms_reg_55xx_t
 *  @brief Memory Operation Counter2 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter2 value.  Contains the total latency seen when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter2_ms_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter2 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter2_ms_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter2_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_mem_op_counter2_ms_reg_55xx_t;

/*! @struct ncp_nca_mem_op_counter3_ms_reg_55xx_t
 *  @brief Memory Operation Counter3 MS Register
 *  @details Contains the upper 16 bits of the 48b memory operation counter3 value.  Contains the number of transactions seen for ID 0 of the selected type of access when the cnt_lat_mode field of the the mem_op_counter_ctl register is selecting a latency mode item.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_op_counter3_ms_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param count_ms </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Current Memory Operation Counter3 count[47:32] </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_op_counter3_ms_reg_55xx_t
 *
 * Implemented by: 
 *      mem_op_counter3_ms
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 16;
     unsigned      count_ms                                  : 16;
#else    /* Little Endian */
     unsigned      count_ms                                  : 16;
     unsigned      reserved0                                 : 16;
#endif
} ncp_nca_mem_op_counter3_ms_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_rop_count0_reg_55xx_t
 *  @brief Memory Outstanding Read Operation Counter0
 *  @details Contains counts for the number of outstanding memory read operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_rop_count0_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cmn_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Outstanding configuration master node read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpcq_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding cPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_tpcq_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 19 </td>
 *   <td width="30%"> Outstanding tPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_rpcq_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Outstanding rPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Outstanding oPCQ entry read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_rops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Outstanding PCQ group index table read operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otsd_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding output task segment descriptor read operations </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_rop_count0_reg_55xx_t
 *
 * Implemented by: 
 *      mem_outstanding_rop_count0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_cmn_rops                      :  4;
     unsigned      outstanding_cpcq_rops                     :  4;
     unsigned      outstanding_tpcq_rops                     :  5;
     unsigned      outstanding_rpcq_rops                     :  5;
     unsigned      outstanding_opcq_rops                     :  5;
     unsigned      outstanding_pgit_rops                     :  4;
     unsigned      outstanding_otsd_rops                     :  5;
#else    /* Little Endian */
     unsigned      outstanding_otsd_rops                     :  5;
     unsigned      outstanding_pgit_rops                     :  4;
     unsigned      outstanding_opcq_rops                     :  5;
     unsigned      outstanding_rpcq_rops                     :  5;
     unsigned      outstanding_tpcq_rops                     :  5;
     unsigned      outstanding_cpcq_rops                     :  4;
     unsigned      outstanding_cmn_rops                      :  4;
#endif
} ncp_nca_mem_outstanding_rop_count0_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_rop_count1_reg_55xx_t
 *  @brief Memory Outstanding Read Operation Counter1
 *  @details Contains counts for the number of outstanding memory read operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_rop_count1_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 27 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otask_rops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding output task data read operations </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_rop_count1_reg_55xx_t
 *
 * Implemented by: 
 *      mem_outstanding_rop_count1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 27;
     unsigned      outstanding_otask_rops                    :  5;
#else    /* Little Endian */
     unsigned      outstanding_otask_rops                    :  5;
     unsigned      reserved0                                 : 27;
#endif
} ncp_nca_mem_outstanding_rop_count1_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_rop_count2_reg_55xx_t
 *  @brief Memory Outstanding Read Operation Counter2
 *  @details Contains a count for the total number of outstanding memory read operations.  It also contains a high water mark field that records the maximum number of outstanding read operations observed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_rop_count2_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_rops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding total read operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_rops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding total read operations </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_rop_count2_reg_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_total_rops_hwm                : 16;
     unsigned      outstanding_total_rops                    : 16;
#else    /* Little Endian */
     unsigned      outstanding_total_rops                    : 16;
     unsigned      outstanding_total_rops_hwm                : 16;
#endif
} ncp_nca_mem_outstanding_rop_count2_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_rdata_count0_reg_55xx_t
 *  @brief Memory Outstanding Read Data Counter0
 *  @details Contains counts for the number of outstanding memory read data quadwords for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_rdata_count0_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_rpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for rPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_opcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for oPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for the
 *        PCQ group index table
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otsd_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for output
 *        task segment descriptors
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_rdata_count0_reg_55xx_t
 *
 * Implemented by: 
 *      mem_outstanding_rdata_count0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_rpcq_rdata                    :  8;
     unsigned      outstanding_opcq_rdata                    :  8;
     unsigned      outstanding_pgit_rdata                    :  8;
     unsigned      outstanding_otsd_rdata                    :  8;
#else    /* Little Endian */
     unsigned      outstanding_otsd_rdata                    :  8;
     unsigned      outstanding_pgit_rdata                    :  8;
     unsigned      outstanding_opcq_rdata                    :  8;
     unsigned      outstanding_rpcq_rdata                    :  8;
#endif
} ncp_nca_mem_outstanding_rdata_count0_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_rdata_count1_reg_55xx_t
 *  @brief Memory Outstanding Read Data Counter1
 *  @details Contains counts for the number of outstanding memory read data quadwords for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_rdata_count1_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_otask_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for output
 *        task data
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cmn_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for the
 *        configuration master node
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for cPCQ
 *        entries
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_tpcq_rdata </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding number of read data quadwords for tPCQ
 *        entries
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_rdata_count1_reg_55xx_t
 *
 * Implemented by: 
 *      mem_outstanding_rdata_count1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_otask_rdata                   :  8;
     unsigned      outstanding_cmn_rdata                     :  8;
     unsigned      outstanding_cpcq_rdata                    :  8;
     unsigned      outstanding_tpcq_rdata                    :  8;
#else    /* Little Endian */
     unsigned      outstanding_tpcq_rdata                    :  8;
     unsigned      outstanding_cpcq_rdata                    :  8;
     unsigned      outstanding_cmn_rdata                     :  8;
     unsigned      outstanding_otask_rdata                   :  8;
#endif
} ncp_nca_mem_outstanding_rdata_count1_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_wop_count0_reg_55xx_t
 *  @brief Memory Outstanding Write Operation Counter0
 *  @details Contains counts for the number of outstanding memory write operations for various data types.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_wop_count0_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_itask_wops </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Outstanding input task data and iPCQ entry write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_cmn_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Outstanding configuration master node write operations </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_pgit_wops </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding PCQ group index table write operations </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_wop_count0_reg_55xx_t
 *
 * Implemented by: 
 *      mem_outstanding_wop_count0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      outstanding_itask_wops                    :  5;
     unsigned      outstanding_cmn_wops                      :  4;
     unsigned      outstanding_pgit_wops                     :  4;
#else    /* Little Endian */
     unsigned      outstanding_pgit_wops                     :  4;
     unsigned      outstanding_cmn_wops                      :  4;
     unsigned      outstanding_itask_wops                    :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_nca_mem_outstanding_wop_count0_reg_55xx_t;

/*! @struct ncp_nca_mem_outstanding_wop_count1_reg_55xx_t
 *  @brief Memory Outstanding Write Operation Counter1
 *  @details Contains a count for the total number of outstanding memory write operations.  It also contains a high water mark field that records the maximum number of outstanding write operations observed.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_outstanding_wop_count1_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_wops_hwm </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Outstanding total write operations high water mark </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param outstanding_total_wops </td>
 *     <td width="20%" align="center"> 16 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Outstanding total write operations </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_outstanding_wop_count1_reg_55xx_t
 *
 * Implemented by: 
 *      mem_outstanding_wop_count1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      outstanding_total_wops_hwm                : 16;
     unsigned      outstanding_total_wops                    : 16;
#else    /* Little Endian */
     unsigned      outstanding_total_wops                    : 16;
     unsigned      outstanding_total_wops_hwm                : 16;
#endif
} ncp_nca_mem_outstanding_wop_count1_reg_55xx_t;

/*! @struct ncp_nca_mem_valid_ready_reg_55xx_t
 *  @brief Memory Valid Ready
 *  @details Shows the state of all of the memory valid and ready signals
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mem_valid_ready_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 22 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_bvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Memory write response valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_bready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Memory write response ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_wvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Memory data write valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_wready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Memory data write ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_awvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Memory address write valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_awready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *   <td width="30%"> Memory address write ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_rvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Memory data read valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_rready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Memory data read ready </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_arvalid </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Memory address read valid </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mem_arready </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Memory address read ready </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mem_valid_ready_reg_55xx_t
 *
 * Implemented by: 
 *      mem_valid_ready
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 22;
     unsigned      mem_bvalid                                :  1;
     unsigned      mem_bready                                :  1;
     unsigned      mem_wvalid                                :  1;
     unsigned      mem_wready                                :  1;
     unsigned      mem_awvalid                               :  1;
     unsigned      mem_awready                               :  1;
     unsigned      mem_rvalid                                :  1;
     unsigned      mem_rready                                :  1;
     unsigned      mem_arvalid                               :  1;
     unsigned      mem_arready                               :  1;
#else    /* Little Endian */
     unsigned      mem_arready                               :  1;
     unsigned      mem_arvalid                               :  1;
     unsigned      mem_rready                                :  1;
     unsigned      mem_rvalid                                :  1;
     unsigned      mem_awready                               :  1;
     unsigned      mem_awvalid                               :  1;
     unsigned      mem_wready                                :  1;
     unsigned      mem_wvalid                                :  1;
     unsigned      mem_bready                                :  1;
     unsigned      mem_bvalid                                :  1;
     unsigned      reserved0                                 : 22;
#endif
} ncp_nca_mem_valid_ready_reg_55xx_t;

/*! @struct ncp_nca_rbp_fifo6_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 6 Range Size0
 *  @details Receive Buffer Pool FIFO 6 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 6 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo6_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo6_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo6_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo6_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo6_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo6_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo6_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo6_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 6 Range Size1
 *  @details Receive Buffer Pool FIFO 6 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 6 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo6_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo6_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo6_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo6_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo6_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo6_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo6_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo6_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 6 Range Size2
 *  @details Receive Buffer Pool FIFO 6 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 6 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo6_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo6_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo6_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo6_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo6_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo6_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo6_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo6_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 6 Range Size3
 *  @details Receive Buffer Pool FIFO 6 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 6 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo6_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo6_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 6 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo6_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo6_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo6_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo6_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo6_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo6_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo7_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 7 Range Size0
 *  @details Receive Buffer Pool FIFO 7 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 7 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo7_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo7_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo7_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo7_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo7_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo7_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo7_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo7_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 7 Range Size1
 *  @details Receive Buffer Pool FIFO 7 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 7 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo7_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo7_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo7_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo7_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo7_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo7_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo7_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo7_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 7 Range Size2
 *  @details Receive Buffer Pool FIFO 7 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 7 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo7_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo7_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo7_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo7_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo7_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo7_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo7_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo7_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 7 Range Size3
 *  @details Receive Buffer Pool FIFO 7 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 7 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo7_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo7_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 7 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo7_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo7_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo7_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo7_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo7_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo7_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo8_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 8 Range Size0
 *  @details Receive Buffer Pool FIFO 8 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 8 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo8_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo8_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo8_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo8_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo8_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo8_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo8_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo8_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 8 Range Size1
 *  @details Receive Buffer Pool FIFO 8 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 8 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo8_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo8_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo8_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo8_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo8_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo8_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo8_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo8_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 8 Range Size2
 *  @details Receive Buffer Pool FIFO 8 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 8 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo8_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo8_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo8_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo8_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo8_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo8_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo8_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo8_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 8 Range Size3
 *  @details Receive Buffer Pool FIFO 8 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 8 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo8_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo8_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 8 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo8_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo8_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo8_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo8_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo8_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo8_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo9_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 9 Range Size0
 *  @details Receive Buffer Pool FIFO 9 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 9 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo9_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo9_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo9_range_start_size0               : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo9_range_end_size0                 : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo9_range_end_size0                 : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo9_range_start_size0               : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo9_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo9_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 9 Range Size1
 *  @details Receive Buffer Pool FIFO 9 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 9 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo9_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo9_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo9_range_start_size1               : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo9_range_end_size1                 : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo9_range_end_size1                 : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo9_range_start_size1               : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo9_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo9_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 9 Range Size2
 *  @details Receive Buffer Pool FIFO 9 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 9 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo9_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo9_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo9_range_start_size2               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo9_range_end_size2                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo9_range_end_size2                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo9_range_start_size2               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo9_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo9_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 9 Range Size3
 *  @details Receive Buffer Pool FIFO 9 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 9 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo9_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo9_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 9 range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo9_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo9_range_start_size3               : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo9_range_end_size3                 : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo9_range_end_size3                 : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo9_range_start_size3               : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo9_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo10_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 10 Range Size0
 *  @details Receive Buffer Pool FIFO 10 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 10 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo10_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo10_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo10_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo10_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo10_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo10_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo10_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo10_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 10 Range Size1
 *  @details Receive Buffer Pool FIFO 10 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 10 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo10_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo10_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo10_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo10_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo10_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo10_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo10_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo10_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 10 Range Size2
 *  @details Receive Buffer Pool FIFO 10 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 10 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo10_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo10_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo10_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo10_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo10_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo10_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo10_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo10_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 10 Range Size3
 *  @details Receive Buffer Pool FIFO 10 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 10 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo10_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo10_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 10 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo10_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo10_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo10_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo10_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo10_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo10_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo11_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 11 Range Size0
 *  @details Receive Buffer Pool FIFO 11 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 11 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo11_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo11_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo11_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo11_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo11_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo11_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo11_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo11_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 11 Range Size1
 *  @details Receive Buffer Pool FIFO 11 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 11 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo11_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo11_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo11_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo11_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo11_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo11_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo11_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo11_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 11 Range Size2
 *  @details Receive Buffer Pool FIFO 11 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 11 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo11_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo11_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo11_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo11_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo11_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo11_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo11_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo11_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 11 Range Size3
 *  @details Receive Buffer Pool FIFO 11 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 11 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo11_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo11_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 11 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo11_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo11_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo11_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo11_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo11_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo11_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo12_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 12 Range Size0
 *  @details Receive Buffer Pool FIFO 12 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 12 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo12_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo12_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo12_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo12_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo12_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo12_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo12_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo12_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 12 Range Size1
 *  @details Receive Buffer Pool FIFO 12 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 12 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo12_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo12_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo12_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo12_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo12_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo12_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo12_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo12_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 12 Range Size2
 *  @details Receive Buffer Pool FIFO 12 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 12 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo12_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo12_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo12_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo12_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo12_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo12_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo12_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo12_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 12 Range Size3
 *  @details Receive Buffer Pool FIFO 12 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 12 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo12_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo12_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 12 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo12_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo12_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo12_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo12_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo12_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo12_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo13_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 13 Range Size0
 *  @details Receive Buffer Pool FIFO 13 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 13 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo13_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo13_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo13_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo13_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo13_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo13_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo13_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo13_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 13 Range Size1
 *  @details Receive Buffer Pool FIFO 13 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 13 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo13_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo13_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo13_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo13_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo13_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo13_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo13_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo13_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 13 Range Size2
 *  @details Receive Buffer Pool FIFO 13 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 13 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo13_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo13_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo13_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo13_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo13_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo13_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo13_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo13_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 13 Range Size3
 *  @details Receive Buffer Pool FIFO 13 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 13 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo13_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo13_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 13 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo13_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo13_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo13_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo13_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo13_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo13_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo14_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 14 Range Size0
 *  @details Receive Buffer Pool FIFO 14 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 14 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo14_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo14_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo14_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo14_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo14_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo14_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo14_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo14_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 14 Range Size1
 *  @details Receive Buffer Pool FIFO 14 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 14 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo14_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo14_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo14_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo14_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo14_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo14_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo14_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo14_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 14 Range Size2
 *  @details Receive Buffer Pool FIFO 14 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 14 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo14_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo14_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo14_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo14_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo14_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo14_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo14_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo14_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 14 Range Size3
 *  @details Receive Buffer Pool FIFO 14 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 14 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo14_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo14_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 14 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo14_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo14_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo14_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo14_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo14_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo14_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo15_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 15 Range Size0
 *  @details Receive Buffer Pool FIFO 15 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 15 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo15_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo15_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo15_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo15_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo15_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo15_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo15_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo15_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 15 Range Size1
 *  @details Receive Buffer Pool FIFO 15 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 15 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo15_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo15_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo15_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo15_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo15_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo15_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo15_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo15_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 15 Range Size2
 *  @details Receive Buffer Pool FIFO 15 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 15 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo15_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo15_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo15_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo15_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo15_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo15_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo15_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo15_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 15 Range Size3
 *  @details Receive Buffer Pool FIFO 15 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 15 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo15_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo15_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 15 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo15_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo15_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo15_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo15_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo15_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo15_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo16_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 16 Range Size0
 *  @details Receive Buffer Pool FIFO 16 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 16 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo16_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo16_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo16_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo16_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo16_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo16_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo16_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo16_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 16 Range Size1
 *  @details Receive Buffer Pool FIFO 16 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 16 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo16_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo16_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo16_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo16_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo16_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo16_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo16_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo16_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 16 Range Size2
 *  @details Receive Buffer Pool FIFO 16 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 16 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo16_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo16_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo16_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo16_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo16_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo16_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo16_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo16_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 16 Range Size3
 *  @details Receive Buffer Pool FIFO 16 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 16 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo16_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo16_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 16 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo16_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo16_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo16_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo16_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo16_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo16_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo17_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 17 Range Size0
 *  @details Receive Buffer Pool FIFO 17 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 17 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo17_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo17_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo17_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo17_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo17_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo17_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo17_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo17_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 17 Range Size1
 *  @details Receive Buffer Pool FIFO 17 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 17 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo17_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo17_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo17_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo17_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo17_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo17_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo17_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo17_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 17 Range Size2
 *  @details Receive Buffer Pool FIFO 17 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 17 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo17_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo17_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo17_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo17_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo17_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo17_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo17_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo17_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 17 Range Size3
 *  @details Receive Buffer Pool FIFO 17 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 17 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo17_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo17_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 17 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo17_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo17_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo17_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo17_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo17_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo17_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo18_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 18 Range Size0
 *  @details Receive Buffer Pool FIFO 18 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 18 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo18_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo18_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo18_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo18_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo18_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo18_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo18_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo18_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 18 Range Size1
 *  @details Receive Buffer Pool FIFO 18 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 18 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo18_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo18_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo18_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo18_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo18_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo18_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo18_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo18_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 18 Range Size2
 *  @details Receive Buffer Pool FIFO 18 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 18 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo18_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo18_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo18_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo18_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo18_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo18_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo18_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo18_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 18 Range Size3
 *  @details Receive Buffer Pool FIFO 18 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 18 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo18_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo18_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 18 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo18_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo18_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo18_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo18_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo18_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo18_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo19_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 19 Range Size0
 *  @details Receive Buffer Pool FIFO 19 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 19 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo19_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo19_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo19_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo19_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo19_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo19_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo19_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo19_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 19 Range Size1
 *  @details Receive Buffer Pool FIFO 19 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 19 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo19_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo19_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo19_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo19_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo19_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo19_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo19_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo19_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 19 Range Size2
 *  @details Receive Buffer Pool FIFO 19 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 19 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo19_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo19_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo19_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo19_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo19_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo19_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo19_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo19_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 19 Range Size3
 *  @details Receive Buffer Pool FIFO 19 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 19 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo19_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo19_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 19 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo19_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo19_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo19_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo19_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo19_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo19_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo20_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 20 Range Size0
 *  @details Receive Buffer Pool FIFO 20 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 20 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo20_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo20_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo20_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo20_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo20_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo20_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo20_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo20_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 20 Range Size1
 *  @details Receive Buffer Pool FIFO 20 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 20 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo20_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo20_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo20_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo20_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo20_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo20_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo20_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo20_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 20 Range Size2
 *  @details Receive Buffer Pool FIFO 20 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 20 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo20_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo20_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo20_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo20_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo20_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo20_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo20_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo20_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 20 Range Size3
 *  @details Receive Buffer Pool FIFO 20 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 20 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo20_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo20_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 20 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo20_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo20_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo20_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo20_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo20_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo20_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo21_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 21 Range Size0
 *  @details Receive Buffer Pool FIFO 21 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 21 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo21_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo21_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo21_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo21_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo21_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo21_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo21_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo21_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 21 Range Size1
 *  @details Receive Buffer Pool FIFO 21 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 21 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo21_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo21_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo21_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo21_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo21_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo21_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo21_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo21_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 21 Range Size2
 *  @details Receive Buffer Pool FIFO 21 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 21 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo21_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo21_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo21_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo21_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo21_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo21_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo21_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo21_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 21 Range Size3
 *  @details Receive Buffer Pool FIFO 21 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 21 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo21_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo21_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 21 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo21_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo21_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo21_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo21_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo21_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo21_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo22_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 22 Range Size0
 *  @details Receive Buffer Pool FIFO 22 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 22 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo22_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo22_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo22_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo22_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo22_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo22_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo22_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo22_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 22 Range Size1
 *  @details Receive Buffer Pool FIFO 22 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 22 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo22_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo22_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo22_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo22_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo22_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo22_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo22_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo22_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 22 Range Size2
 *  @details Receive Buffer Pool FIFO 22 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 22 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo22_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo22_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo22_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo22_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo22_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo22_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo22_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo22_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 22 Range Size3
 *  @details Receive Buffer Pool FIFO 22 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 22 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo22_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo22_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 22 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo22_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo22_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo22_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo22_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo22_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo22_range_reg_size3_55xx_t;

/*! @struct ncp_nca_rbp_fifo23_range_reg_size0_55xx_t
 *  @brief Receive Buffer Pool FIFO 23 Range Size0
 *  @details Receive Buffer Pool FIFO 23 start and end range pointers for size 0.  These pointers define the start and end address for receive buffer pool FIFO 23 within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo23_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range start pointer for
 *        size0
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range end pointer for
 *        size0
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo23_range_reg_size0_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      rbp_fifo23_range_start_size0              : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo23_range_end_size0                : 12;
#else    /* Little Endian */
     unsigned      rbp_fifo23_range_end_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      rbp_fifo23_range_start_size0              : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_rbp_fifo23_range_reg_size0_55xx_t;

/*! @struct ncp_nca_rbp_fifo23_range_reg_size1_55xx_t
 *  @brief Receive Buffer Pool FIFO 23 Range Size1
 *  @details Receive Buffer Pool FIFO 23 start and end range pointers for size 1.  These pointers define the start and end address for receive buffer pool FIFO 23 within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo23_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range start pointer for
 *        size1
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range end pointer for
 *        size1
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo23_range_reg_size1_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      rbp_fifo23_range_start_size1              : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo23_range_end_size1                : 11;
#else    /* Little Endian */
     unsigned      rbp_fifo23_range_end_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      rbp_fifo23_range_start_size1              : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_rbp_fifo23_range_reg_size1_55xx_t;

/*! @struct ncp_nca_rbp_fifo23_range_reg_size2_55xx_t
 *  @brief Receive Buffer Pool FIFO 23 Range Size2
 *  @details Receive Buffer Pool FIFO 23 start and end range pointers for size 2.  These pointers define the start and end address for receive buffer pool FIFO 23 within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo23_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range start pointer for
 *        size2
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range end pointer for
 *        size2
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo23_range_reg_size2_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo23_range_start_size2              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo23_range_end_size2                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo23_range_end_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo23_range_start_size2              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo23_range_reg_size2_55xx_t;

/*! @struct ncp_nca_rbp_fifo23_range_reg_size3_55xx_t
 *  @brief Receive Buffer Pool FIFO 23 Range Size3
 *  @details Receive Buffer Pool FIFO 23 start and end range pointers for size 3.  These pointers define the start and end address for receive buffer pool FIFO 23 within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rbp_fifo23_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range start pointer for
 *        size3
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rbp_fifo23_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Receive Buffer Pool FIFO 23 range end pointer for
 *        size3
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rbp_fifo23_range_reg_size3_55xx_t
 *
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      rbp_fifo23_range_start_size3              : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo23_range_end_size3                : 10;
#else    /* Little Endian */
     unsigned      rbp_fifo23_range_end_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      rbp_fifo23_range_start_size3              : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_rbp_fifo23_range_reg_size3_55xx_t;

/*! @struct ncp_nca_mpb_fifo_range_reg_size0_55xx_t
 *  @brief MME Pool Buffer FIFO Range Size0
 *  @details MME Pool Buffer FIFO start and end range pointers for size 0.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size0 buffers.  This RAM is 3072 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_fifo_range_reg_size0_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 28 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size0 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size0 </td>
 *     <td width="20%" align="center"> 12 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_fifo_range_reg_size0_55xx_t
 *
 * Implemented by: 
 *      mpb_fifo_range_size0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  4;
     unsigned      mpb_fifo_range_start_size0                : 12;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_fifo_range_end_size0                  : 12;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size0                  : 12;
     unsigned      reserved1                                 :  4;
     unsigned      mpb_fifo_range_start_size0                : 12;
     unsigned      reserved0                                 :  4;
#endif
} ncp_nca_mpb_fifo_range_reg_size0_55xx_t;

/*! @struct ncp_nca_mpb_fifo_range_reg_size1_55xx_t
 *  @brief MME Pool Buffer FIFO Range Size1
 *  @details MME Pool Buffer FIFO start and end range pointers for size 1.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size1 buffers.  This RAM is 1536 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_fifo_range_reg_size1_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 27 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 11 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size1 </td>
 *     <td width="20%" align="center"> 11 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size1 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_fifo_range_reg_size1_55xx_t
 *
 * Implemented by: 
 *      mpb_fifo_range_size1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  5;
     unsigned      mpb_fifo_range_start_size1                : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_fifo_range_end_size1                  : 11;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size1                  : 11;
     unsigned      reserved1                                 :  5;
     unsigned      mpb_fifo_range_start_size1                : 11;
     unsigned      reserved0                                 :  5;
#endif
} ncp_nca_mpb_fifo_range_reg_size1_55xx_t;

/*! @struct ncp_nca_mpb_fifo_range_reg_size2_55xx_t
 *  @brief MME Pool Buffer FIFO Range Size2
 *  @details MME Pool Buffer FIFO start and end range pointers for size 2.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size2 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_fifo_range_reg_size2_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size2 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size2 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_fifo_range_reg_size2_55xx_t
 *
 * Implemented by: 
 *      mpb_fifo_range_size2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      mpb_fifo_range_start_size2                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_end_size2                  : 10;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size2                  : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_start_size2                : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_mpb_fifo_range_reg_size2_55xx_t;

/*! @struct ncp_nca_mpb_fifo_range_reg_size3_55xx_t
 *  @brief MME Pool Buffer FIFO Range Size3
 *  @details MME Pool Buffer FIFO start and end range pointers for size 3.  These pointers define the start and end address for the MME pool buffer FIFOs within the RAM for size3 buffers.  This RAM is 768 deep.  Writing these pointers sets the FIFO to empty.  It is software's responsibility to set the ranges for all of the FIFOs so that none overlap or are beyond the range of the RAM.  Even though the reset values are shown as undefined, the actual reset values are set to divide the RAM into 24 equal parts.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mpb_fifo_range_reg_size3_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 26 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_start_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range start pointer for size3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 10 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mpb_fifo_range_end_size3 </td>
 *     <td width="20%" align="center"> 10 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> MME Pool Buffer FIFO range end pointer for size3 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mpb_fifo_range_reg_size3_55xx_t
 *
 * Implemented by: 
 *      mpb_fifo_range_size3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  6;
     unsigned      mpb_fifo_range_start_size3                : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_end_size3                  : 10;
#else    /* Little Endian */
     unsigned      mpb_fifo_range_end_size3                  : 10;
     unsigned      reserved1                                 :  6;
     unsigned      mpb_fifo_range_start_size3                : 10;
     unsigned      reserved0                                 :  6;
#endif
} ncp_nca_mpb_fifo_range_reg_size3_55xx_t;

/*! @struct ncp_nca_node_in_ring0_reg_55xx_t
 *  @brief Number Config Nodes Loop 0
 *  @details A 256-bit mask representing the node IDs on ring 0.  Even though the reset values are shown as undefined, the actual reset value is that of the bit mask divided into eight 32-bit words starting with the least significant 32 bits.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_node_in_ring0_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_node_in_ring0 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 32-bits of the 256-bit mask representing the node
 *        IDs on ring 0.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_node_in_ring0_reg_55xx_t
 *
 * Implemented by: 
 *      nca_node_in_ring0
 */
 
typedef struct
{
     unsigned  int         nca_node_in_ring0;
} ncp_nca_node_in_ring0_reg_55xx_t;

/*! @struct ncp_nca_node_in_ring1_reg_55xx_t
 *  @brief Number Config Nodes Loop 1
 *  @details A 256-bit mask representing the node IDs on ring 1.  Even though the reset values are shown as undefined, the actual reset value is that of the bit mask divided into eight 32-bit words starting with the least significant 32 bits.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_node_in_ring1_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_node_in_ring1 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 32-bits of the 256-bit mask representing the node
 *        IDs on ring 1.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_node_in_ring1_reg_55xx_t
 *
 * Implemented by: 
 *      nca_node_in_ring1
 */
 
typedef struct
{
     unsigned  int         nca_node_in_ring1;
} ncp_nca_node_in_ring1_reg_55xx_t;

/*! @struct ncp_nca_node_in_ring2_reg_55xx_t
 *  @brief Number Config Nodes Loop 2
 *  @details A 256-bit mask representing the node IDs on ring 2.  Even though the reset values are shown as undefined, the actual reset value is that of the bit mask divided into eight 32-bit words starting with the least significant 32 bits.  The rdl is coded this way to allow for the creation of a register array instead of individual registers.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_node_in_ring2_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_node_in_ring2 </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> 32-bits of the 256-bit mask representing the node
 *        IDs on ring 2.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_node_in_ring2_reg_55xx_t
 *
 * Implemented by: 
 *      nca_node_in_ring2
 */
 
typedef struct
{
     unsigned  int         nca_node_in_ring2;
} ncp_nca_node_in_ring2_reg_55xx_t;

/*! @struct ncp_nca_acel_m_ports_reg_55xx_t
 *  @brief ACE Lite Master Ports
 *  @details Number of ACE Lite master ports.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_acel_m_ports_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param acel_m_ports </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of ACE Lite master ports. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_acel_m_ports_reg_55xx_t
 *
 * Implemented by: 
 *      acel_m_ports
 */
 
typedef struct
{
     unsigned  int              acel_m_ports;
} ncp_nca_acel_m_ports_reg_55xx_t;

/*! @struct ncp_nca_axi3_m_ports_reg_55xx_t
 *  @brief AXI3 Master Ports
 *  @details Number of AXI3 master ports.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_m_ports_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_m_ports </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of AXI3 master ports. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_m_ports_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_m_ports
 */
 
typedef struct
{
     unsigned  int              axi3_m_ports;
} ncp_nca_axi3_m_ports_reg_55xx_t;

/*! @struct ncp_nca_axi3_m_rid_width_reg_55xx_t
 *  @brief AXI3 Master Read ID Width
 *  @details Number of bits in AXI3 master read IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_m_rid_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_m_rid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in AXI3 master read IDs. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_m_rid_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_m_rid_width
 */
 
typedef struct
{
     unsigned  int          axi3_m_rid_width;
} ncp_nca_axi3_m_rid_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_m_wid_width_reg_55xx_t
 *  @brief AXI3 Master Write ID Width
 *  @details Number of bits in AXI3 master write IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_m_wid_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_m_wid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in AXI3 master write IDs. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_m_wid_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_m_wid_width
 */
 
typedef struct
{
     unsigned  int          axi3_m_wid_width;
} ncp_nca_axi3_m_wid_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_m_addr_width_reg_55xx_t
 *  @brief AXI3 Master Address Width
 *  @details Width of AXI3 master address field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_m_addr_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_m_addr_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of AXI3 master address field. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_m_addr_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_m_addr_width
 */
 
typedef struct
{
     unsigned  int         axi3_m_addr_width;
} ncp_nca_axi3_m_addr_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_m_data_width_reg_55xx_t
 *  @brief AXI3 Master Data WIDTH
 *  @details Width of AXI3 master data paths in bits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_m_data_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_m_data_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of AXI3 master data paths in bits. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_m_data_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_m_data_width
 */
 
typedef struct
{
     unsigned  int         axi3_m_data_width;
} ncp_nca_axi3_m_data_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_m_strb_width_reg_55xx_t
 *  @brief AXI3 Master Strobe Width
 *  @details Width of AXI3 master byte strobe field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_m_strb_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_m_strb_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of AXI3 master byte strobe field. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_m_strb_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_m_strb_width
 */
 
typedef struct
{
     unsigned  int         axi3_m_strb_width;
} ncp_nca_axi3_m_strb_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_s_ports_reg_55xx_t
 *  @brief AXI3 Slave Ports
 *  @details Number of AXI3 slave ports.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_s_ports_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_s_ports </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of AXI3 slave ports. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_s_ports_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_s_ports
 */
 
typedef struct
{
     unsigned  int              axi3_s_ports;
} ncp_nca_axi3_s_ports_reg_55xx_t;

/*! @struct ncp_nca_axi3_s_rid_width_reg_55xx_t
 *  @brief AXI3 Slave Read ID Width
 *  @details Number of bits in AXI3 slave read IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_s_rid_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_s_rid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in AXI3 slave read IDs. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_s_rid_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_s_rid_width
 */
 
typedef struct
{
     unsigned  int          axi3_s_rid_width;
} ncp_nca_axi3_s_rid_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_s_wid_width_reg_55xx_t
 *  @brief AXI3 Slave Write ID Width
 *  @details Number of bits in AXI3 slave write IDs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_s_wid_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_s_wid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits in AXI3 slave write IDs. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_s_wid_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_s_wid_width
 */
 
typedef struct
{
     unsigned  int          axi3_s_wid_width;
} ncp_nca_axi3_s_wid_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_s_addr_width_reg_55xx_t
 *  @brief AXI3 Slave Address Width
 *  @details Width of AXI3 slave address field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_s_addr_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_s_addr_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of AXI3 slave address field. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_s_addr_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_s_addr_width
 */
 
typedef struct
{
     unsigned  int         axi3_s_addr_width;
} ncp_nca_axi3_s_addr_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_s_data_width_reg_55xx_t
 *  @brief AXI3 Slave Data WIDTH
 *  @details Width of AXI3 slave data paths in bits.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_s_data_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_s_data_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of AXI3 slave data paths in bits. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_s_data_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_s_data_width
 */
 
typedef struct
{
     unsigned  int         axi3_s_data_width;
} ncp_nca_axi3_s_data_width_reg_55xx_t;

/*! @struct ncp_nca_axi3_s_strb_width_reg_55xx_t
 *  @brief AXI3 Slave Strobe Width
 *  @details Width of AXI3 slave byte strobe field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi3_s_strb_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param axi3_s_strb_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of AXI3 slave byte strobe field. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi3_s_strb_width_reg_55xx_t
 *
 * Implemented by: 
 *      axi3_s_strb_width
 */
 
typedef struct
{
     unsigned  int         axi3_s_strb_width;
} ncp_nca_axi3_s_strb_width_reg_55xx_t;

/*! @struct ncp_nca_num_cpu_interrupts_reg_55xx_t
 *  @brief NCA Number of CPU Interrupts
 *  @details Number of CPU interrupt pins.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_cpu_interrupts_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_cpu_interrupts </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of CPU interrupt pins. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_num_cpu_interrupts_reg_55xx_t
 *
 * Implemented by: 
 *      nca_num_cpu_interrupts
 */
 
typedef struct
{
     unsigned  int      nca_num_cpu_interrupts;
} ncp_nca_num_cpu_interrupts_reg_55xx_t;

/*! @struct ncp_nca_num_hw_interrupts_reg_55xx_t
 *  @brief NCA Number of Hardware Interrupts
 *  @details Number of hardware interrupt pins.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_hw_interrupts_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param nca_num_hw_interrupts </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of hardware interrupt pins. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_num_hw_interrupts_reg_55xx_t
 *
 * Implemented by: 
 *      nca_num_hw_interrupts
 */
 
typedef struct
{
     unsigned  int      nca_num_hw_interrupts;
} ncp_nca_num_hw_interrupts_reg_55xx_t;

/*! @struct ncp_nca_num_pcq_groups_reg_55xx_t
 *  @brief Number of PCQ Groups
 *  @details Number of producer consumer queue groups.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_pcq_groups_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_pcq_groups </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of producer consumer queue groups. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_num_pcq_groups_reg_55xx_t
 *
 * Implemented by: 
 *      num_pcq_groups
 */
 
typedef struct
{
     unsigned  int            num_pcq_groups;
} ncp_nca_num_pcq_groups_reg_55xx_t;

/*! @struct ncp_nca_num_pcq_groups_width_reg_55xx_t
 *  @brief Number of PCQ Groups Width
 *  @details Number of bits required to represent the number of pcq groups.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_pcq_groups_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_pcq_groups_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits required to represent the number of
 *        pcq groups.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_num_pcq_groups_width_reg_55xx_t
 *
 * Implemented by: 
 *      num_pcq_groups_width
 */
 
typedef struct
{
     unsigned  int      num_pcq_groups_width;
} ncp_nca_num_pcq_groups_width_reg_55xx_t;

/*! @struct ncp_nca_vi_width_reg_55xx_t
 *  @brief Virtual Index Width
 *  @details Width of virtual index addresses.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_vi_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param vi_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of virtual index addresses. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_vi_width_reg_55xx_t
 *
 * Implemented by: 
 *      vi_width
 */
 
typedef struct
{
     unsigned  int                  vi_width;
} ncp_nca_vi_width_reg_55xx_t;

/*! @struct ncp_nca_poolid_width_reg_55xx_t
 *  @brief Pool ID Width
 *  @details Width of pool ID field.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_poolid_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param poolid_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Width of pool ID field. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_poolid_width_reg_55xx_t
 *
 * Implemented by: 
 *      poolid_width
 */
 
typedef struct
{
     unsigned  int              poolid_width;
} ncp_nca_poolid_width_reg_55xx_t;

/*! @struct ncp_nca_num_mem_pools_reg_55xx_t
 *  @brief Number of Memory Pools
 *  @details Number of memory pools.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_mem_pools_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_mem_pools </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of memory pools. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_num_mem_pools_reg_55xx_t
 *
 * Implemented by: 
 *      num_mem_pools
 */
 
typedef struct
{
     unsigned  int             num_mem_pools;
} ncp_nca_num_mem_pools_reg_55xx_t;

/*! @struct ncp_nca_num_mem_pools_width_reg_55xx_t
 *  @brief Number of Memory Pools Width
 *  @details Number of bits required to represent the number of memory pools.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_num_mem_pools_width_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param num_mem_pools_width </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Number of bits required to represent the number of
 *        memory pools.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_num_mem_pools_width_reg_55xx_t
 *
 * Implemented by: 
 *      num_mem_pools_width
 */
 
typedef struct
{
     unsigned  int       num_mem_pools_width;
} ncp_nca_num_mem_pools_width_reg_55xx_t;

/*! @struct ncp_nca_ecc_test_reg_55xx_t
 *  @brief ECC Test
 *  @details This register provides the ability to create errors in ECC protected memory in order to verify the detection and correction logic.  This register is for testing purposes only.  It should remain clear during normal operation.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ecc_test_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> ECC invert. This is an inversion mask that is used
 *        to invert ECC bits written to memory when enabled
 *        by the ECC invert enable bit of this register. Set
 *        one bit to cause a single bit error, two bits to cause
 *        a double bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ECC invert enable. Enables ECC inversion using the
 *        ecc_invert field of this register.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dis_ecc_correct </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Disable ECC correction. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ecc_test_reg_55xx_t
 *
 * Implemented by: 
 *      ota_cpu_vpp_xlat_table_ecc_test
 *      ita_cpu_vpp_xlat_table_ecc_test
 *      ita_vpp_cpu_xlat_table_ecc_test
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      ecc_invert                                :  8;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved2                                 :  7;
     unsigned      dis_ecc_correct                           :  1;
#else    /* Little Endian */
     unsigned      dis_ecc_correct                           :  1;
     unsigned      reserved2                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert                                :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_ecc_test_reg_55xx_t;

/*! @struct ncp_nca_rvct_ecc_test_reg_55xx_t
 *  @brief ECC Test
 *  @details This register provides the ability to create errors in ECC protected memory in order to verify the detection and correction logic.  This register is for testing purposes only.  It should remain clear during normal operation.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rvct_ecc_test_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 9 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> ECC invert. This is an inversion mask that is used
 *        to invert ECC bits written to memory when enabled
 *        by the ECC invert enable bit of this register. Set
 *        one bit to cause a single bit error, two bits to cause
 *        a double bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 9 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ecc_invert_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> ECC invert enable. Enables ECC inversion using the
 *        ecc_invert field of this register.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 7 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param dis_ecc_correct </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Disable ECC correction. </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rvct_ecc_test_reg_55xx_t
 *
 * Implemented by: 
 *      rec_virt_pipe_ctrl_table_ecc_test
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  9;
     unsigned      ecc_invert                                :  7;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved2                                 :  7;
     unsigned      dis_ecc_correct                           :  1;
#else    /* Little Endian */
     unsigned      dis_ecc_correct                           :  1;
     unsigned      reserved2                                 :  7;
     unsigned      ecc_invert_en                             :  1;
     unsigned      reserved1                                 :  7;
     unsigned      ecc_invert                                :  7;
     unsigned      reserved0                                 :  9;
#endif
} ncp_nca_rvct_ecc_test_reg_55xx_t;

/*! @struct ncp_nca_rvct_reg_55xx_t
 *  @brief Receive Virtual Pipeline Control Table
 *  @details This table uses the input task template ID as an index to provide an 8-bit mask that corresponds to VPP pool IDs 0 to 7.  If the mask bit corresponding to the input task pool ID is set, then the itask is allowed to be passed by pointer reference (no copy).  Each entry in the table contains four masks which are selected by the two LSBs of the template ID.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_rvct_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_3 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> VPP mask template ID 3 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_2 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> VPP mask template ID 2 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> VPP mask template ID 1 </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_mask_tmplt_id_0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> VPP mask template ID 0 </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_rvct_reg_55xx_t
 *
 * Implemented by: 
 *      rec_virt_pipe_ctrl_table
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      vpp_mask_tmplt_id_3                       :  8;
     unsigned      vpp_mask_tmplt_id_2                       :  8;
     unsigned      vpp_mask_tmplt_id_1                       :  8;
     unsigned      vpp_mask_tmplt_id_0                       :  8;
#else    /* Little Endian */
     unsigned      vpp_mask_tmplt_id_0                       :  8;
     unsigned      vpp_mask_tmplt_id_1                       :  8;
     unsigned      vpp_mask_tmplt_id_2                       :  8;
     unsigned      vpp_mask_tmplt_id_3                       :  8;
#endif
} ncp_nca_rvct_reg_55xx_t;

/*! @struct ncp_nca_sys_mem_ttype_reg_55xx_t
 *  @brief System Memory CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done with the system memory CAAL block.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_sys_mem_ttype_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 29 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param shared_sys_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Shared system memory CAAL write ttype for pool IDs
 *        2 and above.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param shared_sys_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Shared system memory CAAL read ttype for pool IDs
 *        2 and above.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 3 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param private_sys_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Private system memory CAAL write ttype for pool IDs
 *        0 and 1.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved3 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param private_sys_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Private system memory CAAL read ttype for pool IDs
 *        0 and 1.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_sys_mem_ttype_reg_55xx_t
 *
 * Implemented by: 
 *      sys_mem_ttype
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  3;
     unsigned      shared_sys_caal_w_ttype                   :  5;
     unsigned      reserved1                                 :  2;
     unsigned      shared_sys_caal_r_ttype                   :  6;
     unsigned      reserved2                                 :  3;
     unsigned      private_sys_caal_w_ttype                  :  5;
     unsigned      reserved3                                 :  2;
     unsigned      private_sys_caal_r_ttype                  :  6;
#else    /* Little Endian */
     unsigned      private_sys_caal_r_ttype                  :  6;
     unsigned      reserved3                                 :  2;
     unsigned      private_sys_caal_w_ttype                  :  5;
     unsigned      reserved2                                 :  3;
     unsigned      shared_sys_caal_r_ttype                   :  6;
     unsigned      reserved1                                 :  2;
     unsigned      shared_sys_caal_w_ttype                   :  5;
     unsigned      reserved0                                 :  3;
#endif
} ncp_nca_sys_mem_ttype_reg_55xx_t;

/*! @struct ncp_nca_axi_mem_ttype_reg_55xx_t
 *  @brief AXI Memory CAAL Transfer Type
 *  @details Provides the CAAL client side ttype codes for all read and write tranfers done with the AXI memory CAAL block.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_axi_mem_ttype_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 19 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axi_caal_w_ttype </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> AXI memory CAAL write ttype </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param axi_caal_r_ttype </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> AXI memory CAAL read ttype </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_axi_mem_ttype_reg_55xx_t
 *
 * Implemented by: 
 *      axi_mem_ttype
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 : 19;
     unsigned      axi_caal_w_ttype                          :  5;
     unsigned      reserved1                                 :  2;
     unsigned      axi_caal_r_ttype                          :  6;
#else    /* Little Endian */
     unsigned      axi_caal_r_ttype                          :  6;
     unsigned      reserved1                                 :  2;
     unsigned      axi_caal_w_ttype                          :  5;
     unsigned      reserved0                                 : 19;
#endif
} ncp_nca_axi_mem_ttype_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size0_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 0
 *  @details Provides a fetch enable bit for each of the size 0 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size0_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 0 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size0_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size0
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size0                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size0                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size0_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size0_woclr_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 0 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size0 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size0_woclr_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 0 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size0_woclr_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size0_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size0                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size0                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size0_woclr_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size0_woset_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 0 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size0 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size0_woset_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size0 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 0 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size0_woset_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size0_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size0                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size0                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size0_woset_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size1_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 1
 *  @details Provides a fetch enable bit for each of the size 1 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size1_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 1 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size1_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size1
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size1                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size1                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size1_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size1_woclr_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 1 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size1 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size1_woclr_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 1 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size1_woclr_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size1_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size1                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size1                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size1_woclr_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size1_woset_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 1 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size1 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size1_woset_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size1 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 1 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size1_woset_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size1_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size1                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size1                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size1_woset_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size2_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 2
 *  @details Provides a fetch enable bit for each of the size 2 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size2_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 2 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size2_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size2
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size2                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size2                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size2_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size2_woclr_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 2 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size2 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size2_woclr_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 2 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size2_woclr_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size2_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size2                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size2                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size2_woclr_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size2_woset_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 2 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size2 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size2_woset_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size2 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 2 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size2_woset_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size2_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size2                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size2                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size2_woset_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size3_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 3
 *  @details Provides a fetch enable bit for each of the size 3 MME pool buffer FIFOs.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size3_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 3 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size3_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size3
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size3                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size3                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size3_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size3_woclr_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 3 Write One to Clear
 *  @details This is an alias of the mme_buf_fetch_en_size3 register which performs write one to clear.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size3_woclr_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 3 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size3_woclr_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size3_woclr
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size3                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size3                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size3_woclr_reg_55xx_t;

/*! @struct ncp_nca_mme_buf_fetch_en_size3_woset_reg_55xx_t
 *  @brief MME Buffer Fetch Enable Size 3 Write One to Set
 *  @details This is an alias of the mme_buf_fetch_en_size3 register which performs write one to set.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_buf_fetch_en_size3_woset_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param mme_buf_fetch_en_size3 </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Each bit enables fetching of size 3 MME pool buffers
 *        for the corresponding POOL ID
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_buf_fetch_en_size3_woset_reg_55xx_t
 *
 * Implemented by: 
 *      mme_buf_fetch_en_size3_woset
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      mme_buf_fetch_en_size3                    : 24;
#else    /* Little Endian */
     unsigned      mme_buf_fetch_en_size3                    : 24;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_buf_fetch_en_size3_woset_reg_55xx_t;

/*! @struct ncp_nca_mme_ctl_reg_55xx_t
 *  @brief MME Control
 *  @details Includes fields to turn on pointer recovery and set the number of outstanding pointer requests to the MME for each {poolID, size} pair.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_mme_ctl_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param vpp_pool_req_stall_cnt_value </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> VPP pool request stall count value. At reset, and
 *        when a nack is received for pointer requests for VPP
 *        pools (poolID < 8), requests go into a stall mode
 *        on a {poolID, size} pair basis. This limits the number
 *        of outstanding requests to one, and sets the minimum
 *        time between requests to the number of clock cycles
 *        indicated by this field. Once a pointer is received
 *        from the MME, stall mode turns off.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_fill_reqs_per_fifo_recover_ptr_mode_m1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 12 </td>
 *   <td width="30%"> Maximum number fill requests per FIFO on recover mode
 *        minus one. Sets the maximum number of outstanding
 *        pointer requests to the MME for each {poolID, size}
 *        pair when in recover pointer mode. (0 = 1, 1 = 2,
 *        2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_num_fill_reqs_per_fifo_m1 </td>
 *     <td width="20%" align="center"> 4 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum number fill requests per FIFO minus one. Sets
 *        the maximum number of outstanding pointer requests
 *        to the MME for each {poolID, size} pair when not in
 *        recover pointer mode. (0 = 1, 1 = 2, 2 = 3, etc.)
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 3 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param disable_mme_req_hprior </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 2 </td>
 *   <td width="30%"> Disable MME request high priority. Normally, buffers
 *        coming from the MME have priority over all others
 *        for access to the MME FIFOs. This bit disables that
 *        priority and makes it round robin.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param hysteresis_en </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *   <td width="30%"> Hysteresis Enable. Enables hysteresis for FIFO filling.
 *        Hysteresis is also enabled when the recover_ptr_mode
 *        bit of this register is set.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param recover_ptr_mode </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Recover pointer mode. When set, the MME FIFO will
 *        recover pointers being returned by the output task
 *        accumulator instead of passing them to the MME if
 *        room is available.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_mme_ctl_reg_55xx_t
 *
 * Implemented by: 
 *      mme_ctl
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      vpp_pool_req_stall_cnt_value              :  8;
     unsigned      max_num_fill_reqs_per_fifo_recover_ptr_mode_m1  :  4;
     unsigned      max_num_fill_reqs_per_fifo_m1             :  4;
     unsigned      reserved1                                 :  5;
     unsigned      disable_mme_req_hprior                    :  1;
     unsigned      hysteresis_en                             :  1;
     unsigned      recover_ptr_mode                          :  1;
#else    /* Little Endian */
     unsigned      recover_ptr_mode                          :  1;
     unsigned      hysteresis_en                             :  1;
     unsigned      disable_mme_req_hprior                    :  1;
     unsigned      reserved1                                 :  5;
     unsigned      max_num_fill_reqs_per_fifo_m1             :  4;
     unsigned      max_num_fill_reqs_per_fifo_recover_ptr_mode_m1  :  4;
     unsigned      vpp_pool_req_stall_cnt_value              :  8;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_mme_ctl_reg_55xx_t;

/*! @struct ncp_nca_xlat_err_reg_55xx_t
 *  @brief Translation Error Status
 *  @details This register contains the addresss and error indications for detected translation errors in the ita_cpu_vpp_xlat_table, ita_vpp_cpu_xlat_table, and ota_cpu_vpp_xlat_table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_xlat_err_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Output task accumulator cpu to vpp translation table
 *        result greater than maximum allowed address value
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_less_than_base </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task accumulator cpu to vpp translation table
 *        result less than pool base error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Output task accumulator cpu to vpp translation table
 *        underflow error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task accumulator vpp to cpu translation table
 *        translation error address. The address in the table
 *        where the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_vpp_cpu_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Input task accumulator vpp to cpu translation table
 *        result greater than maximum allowed address value
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_vpp_cpu_overflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Input task accumulator vpp to cpu translation table
 *        overflow error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_vpp_cpu_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        translation error address. The address in the table
 *        where the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_gr_max_dynamic </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        result greater than maximum allowed address value
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_less_than_base </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        result less than pool base error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_underflow </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        underflow error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_xlat_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        translation error address. The address in the table
 *        where the error occured.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_xlat_err_reg_55xx_t
 *
 * Implemented by: 
 *      xlat_err
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      reserved0                                 :  8;
     unsigned      ota_cpu_vpp_gr_max_dynamic                :  1;
     unsigned      ota_cpu_vpp_less_than_base                :  1;
     unsigned      ota_cpu_vpp_underflow                     :  1;
     unsigned      ota_cpu_vpp_xlat_err_addr                 :  5;
     unsigned      ita_vpp_cpu_gr_max_dynamic                :  1;
     unsigned      ita_vpp_cpu_overflow                      :  1;
     unsigned      reserved1                                 :  1;
     unsigned      ita_vpp_cpu_xlat_err_addr                 :  5;
     unsigned      ita_cpu_vpp_gr_max_dynamic                :  1;
     unsigned      ita_cpu_vpp_less_than_base                :  1;
     unsigned      ita_cpu_vpp_underflow                     :  1;
     unsigned      ita_cpu_vpp_xlat_err_addr                 :  5;
#else    /* Little Endian */
     unsigned      ita_cpu_vpp_xlat_err_addr                 :  5;
     unsigned      ita_cpu_vpp_underflow                     :  1;
     unsigned      ita_cpu_vpp_less_than_base                :  1;
     unsigned      ita_cpu_vpp_gr_max_dynamic                :  1;
     unsigned      ita_vpp_cpu_xlat_err_addr                 :  5;
     unsigned      reserved1                                 :  1;
     unsigned      ita_vpp_cpu_overflow                      :  1;
     unsigned      ita_vpp_cpu_gr_max_dynamic                :  1;
     unsigned      ota_cpu_vpp_xlat_err_addr                 :  5;
     unsigned      ota_cpu_vpp_underflow                     :  1;
     unsigned      ota_cpu_vpp_less_than_base                :  1;
     unsigned      ota_cpu_vpp_gr_max_dynamic                :  1;
     unsigned      reserved0                                 :  8;
#endif
} ncp_nca_xlat_err_reg_55xx_t;

/*! @struct ncp_nca_ecc_err_reg_55xx_t
 *  @brief ECC Error Status
 *  @details This register contains the addresss and single/double bit error indications for detected ECC errors in the ita_cpu_vpp_xlat_table, ita_vpp_cpu_xlat_table, and ota_cpu_vpp_xlat_table.
 *  <table width="70%" align="center">
 *  <tr>
 *   <td colspan="4" align="center">
 *    struct ncp_nca_ecc_err_reg_55xx_t\n
 *   </td>
 *  </tr>
 *  <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *  </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 31 </td>
 *   <td width="30%"> Receive virtual pipeline control table double-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 30 </td>
 *   <td width="30%"> Receive virtual pipeline control table single-bit
 *        error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param rvct_ecc_err_addr </td>
 *     <td width="20%" align="center"> 6 </td>
 *     <td width="20%" align="center"> 24 </td>
 *   <td width="30%"> Receive virtual pipeline control table ECC error address.
 *        The address in the table where the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 23 </td>
 *   <td width="30%"> Output task accumulator cpu to vpp translation table
 *        double-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 22 </td>
 *   <td width="30%"> Output task accumulator cpu to vpp translation table
 *        single-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 21 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ota_cpu_vpp_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 16 </td>
 *   <td width="30%"> Output task accumulator cpu to vpp translation table
 *        ECC error address. The address in the table where
 *        the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_vpp_cpu_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 15 </td>
 *   <td width="30%"> Input task accumulator vpp to cpu translation table
 *        double-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_vpp_cpu_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 14 </td>
 *   <td width="30%"> Input task accumulator vpp to cpu translation table
 *        single-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 13 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_vpp_cpu_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Input task accumulator vpp to cpu translation table
 *        ECC error address. The address in the table where
 *        the error occured.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_dbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 7 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        double-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_sbe </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 6 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        single-bit error.
 *   </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved2 </td>
 *     <td width="20%" align="center"> 1 </td>
 *     <td width="20%" align="center"> 5 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param ita_cpu_vpp_ecc_err_addr </td>
 *     <td width="20%" align="center"> 5 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Input task accumulator cpu to vpp translation table
 *        ECC error address. The address in the table where
 *        the error occured.
 *   </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_ecc_err_reg_55xx_t
 *
 * Implemented by: 
 *      ecc_err
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
     unsigned      rvct_dbe                                  :  1;
     unsigned      rvct_sbe                                  :  1;
     unsigned      rvct_ecc_err_addr                         :  6;
     unsigned      ota_cpu_vpp_dbe                           :  1;
     unsigned      ota_cpu_vpp_sbe                           :  1;
     unsigned      reserved0                                 :  1;
     unsigned      ota_cpu_vpp_ecc_err_addr                  :  5;
     unsigned      ita_vpp_cpu_dbe                           :  1;
     unsigned      ita_vpp_cpu_sbe                           :  1;
     unsigned      reserved1                                 :  1;
     unsigned      ita_vpp_cpu_ecc_err_addr                  :  5;
     unsigned      ita_cpu_vpp_dbe                           :  1;
     unsigned      ita_cpu_vpp_sbe                           :  1;
     unsigned      reserved2                                 :  1;
     unsigned      ita_cpu_vpp_ecc_err_addr                  :  5;
#else    /* Little Endian */
     unsigned      ita_cpu_vpp_ecc_err_addr                  :  5;
     unsigned      reserved2                                 :  1;
     unsigned      ita_cpu_vpp_sbe                           :  1;
     unsigned      ita_cpu_vpp_dbe                           :  1;
     unsigned      ita_vpp_cpu_ecc_err_addr                  :  5;
     unsigned      reserved1                                 :  1;
     unsigned      ita_vpp_cpu_sbe                           :  1;
     unsigned      ita_vpp_cpu_dbe                           :  1;
     unsigned      ota_cpu_vpp_ecc_err_addr                  :  5;
     unsigned      reserved0                                 :  1;
     unsigned      ota_cpu_vpp_sbe                           :  1;
     unsigned      ota_cpu_vpp_dbe                           :  1;
     unsigned      rvct_ecc_err_addr                         :  6;
     unsigned      rvct_sbe                                  :  1;
     unsigned      rvct_dbe                                  :  1;
#endif
} ncp_nca_ecc_err_reg_55xx_t;

/*! @struct ncp_nca_addr_xlat_reg_55xx_t
 *  @brief Multi-word data structure
 *  <table width="70%" align="center">
 *   <tr>
 *     <td colspan="4" align="center">
 *       struct ncp_nca_addr_xlat_reg_55xx_t
 *     </td>
 *   </tr>
 *   <tr>
 *     <td width="30%"><b> Name </b></td>
 *     <td width="20%" align="center"><b> Width </b></td>
 *     <td width="20%" align="center"><b> Start Offset </b></td>
 *     <td width="30%"><b> Description </b></td>
 *   </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Base address high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param base_addr_l </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Base address low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved0 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_dynamic_h </td>
 *     <td width="20%" align="center"> 32 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Maximum dynamic high. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param max_dynamic_l </td>
 *     <td width="20%" align="center"> 24 </td>
 *     <td width="20%" align="center"> 8 </td>
 *   <td width="30%"> Maximum dynamic low. </td>
 * </tr>
 *   <tr>
 *     <td width="30%"> @param reserved1 </td>
 *     <td width="20%" align="center"> 8 </td>
 *     <td width="20%" align="center"> 0 </td>
 *   <td width="30%"> Reserved for future use </td>
 * </tr>
 * </table>
 * Applies to: 55xx --> ncp_nca_addr_xlat_reg_55xx_t
 *
 * Implemented by: 
 *      ota_cpu_vpp_xlat_table
 *      ita_cpu_vpp_xlat_table
 *      ita_vpp_cpu_xlat_table
 */
 
typedef struct
{
#ifdef NCP_BIG_ENDIAN
          /* word 0 */
     unsigned      base_addr_h                               : 32;
          /* word 1 */
     unsigned      base_addr_l                               : 24;
     unsigned      reserved0                                 :  8;
          /* word 2 */
     unsigned      max_dynamic_h                             : 32;
          /* word 3 */
     unsigned      max_dynamic_l                             : 24;
     unsigned      reserved1                                 :  8;
#else    /* Little Endian */
          /* word 0 */
     unsigned      base_addr_h                               : 32;
          /* word 1 */
     unsigned      reserved0                                 :  8;
     unsigned      base_addr_l                               : 24;
          /* word 2 */
     unsigned      max_dynamic_h                             : 32;
          /* word 3 */
     unsigned      reserved1                                 :  8;
     unsigned      max_dynamic_l                             : 24;
#endif
} ncp_nca_addr_xlat_reg_55xx_t;

#ifdef __cplusplus
}
#endif

#endif /* _NCP_NCA_REGS_H_ */
